
--

    Suunto EON Steel: set date too when doing device timesync
    
    I'd never noticed this before, since my date had always been already set
    correctly, but the timesync with the EON Steel only set the time, not
    the date.
    
    The fix is trivial, since the code already filled in the datetime data,
    it just didn't do the SET_DATE command.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

--

    Correctly fix build without HID support
    
    Suggested by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Revert "Allow compilation on platforms without USBHID support"
    
    This reverts commit 7444cca876cf1637fd7c3d4ad1e48145b215aed8.
    
    The commit does what it advertises - but also breaks HID support everywhere
    else. Oops.
    
    Reported-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    remove the transfer type comments from the descriptor array
    
    This basically reverts commit 4a3f7a7cce54 ("Mark DC descriptors with
    supported transport").
    
    The commit wasn't wrong, but it ends up having caused a *lot* of pain
    for merging, because it adds the transfer type marker to most lines in
    that descriptor array, and the end result is very painful to merge if
    upstream libdivecomputer ever changes any of the array entries (which
    happens fairly regularly, either because of format changes, or because a
    new entry is added).
    
    It's probably better and simpler to simply have some entirely separate
    model for figuring out which dive computer supports which protocol.
    There are enough common rules (like "old Suunto models are all FTDI")
    that such a separate table probably would be simpler and clearer anyway.
    
    This does not implement such a table, though - it just removes the
    information entirely.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

--

    remove 'serial' number from descriptor array
    
    I added this long ago as a merge fixup (see commit f9db4ca97c4b: "Merge
    git://git.libdivecomputer.org/libdivecomputer into Subsurface-branch"),
    because some of the OSTC parser_create() functions take a serial number.
    
    However, the serial number is never actually taken from the descriptor
    array, and if it was, it would be incorrect anyway.  None of the entries
    in the descriptor array actually have any, so it's always zero.
    
    So just remove it, because it's a big pain whenever upstream changes the
    descriptor array format.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

--

    get rid of annoying compile warnings
    
    This gets rid of the warnings in the build, mostly by just disabling
    them entirely, and in one case by adding a default statement to make the
    compiler not warn about lacking case statements for a switch()
    statement.
    
    Some of the warnings really don't work that well for libdivecomputer
    (warning about pointer signs is very annoying when we mix regular
    strings and various "unsigned char *" raw data).
    
    And some of the warnings we should probably re-enable once by one, and
    actually fix up.
    
    But even the ones we should re-enable are right now more of a pain than
    they are worth, and nobody has had the energy to do so.  And as long as
    there are *so* many warnings, nobody likely will.
    
    In the meantime, this gets rid of the harmless warnings, so that we can
    see if any *bad* warnings happen.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

--

    Remove the half-duplex emulation from the I/O api
    
    Now that the half-duplex emulation code isn't used anymore, it can be
    removed from the I/O stream api.

--

    Handle the half-duplex emulation in the vyper2 backend
    
    The half-duplex emulation is basically a workaround for a timing problem
    in the vyper2 backend. Since no other dive computer backend uses or
    needs this feature, it makes no sense to support this at the I/O layer.
    It can be implemented directly in the vyper2 backend instead.

--

    Use the new timer for the timestamps in the logging
    
    Replace the platform specific code with the new timers.

--

    Use the new timer for the timeout calculations
    
    Replace the gettimeofday() based implementation with the new monotonic
    timers. This makes the implementation more robust against unexpected
    adjustments of the clock.

--

    Add a high resolution timer module
    
    The new timer module provides an cross-platform interface for a high
    resolution monotonic clock. The timestamps are always relative to the
    creation of the timer and their unit is one microseconds.
    
    The timers can be used for logging, measuring elapsed time and
    implementing timeouts.

--

    Add functions for converting bluetooth addresses

--

    Add support for the OSTC 2 TR
    
    The OSTC 2 TR add supports for one or more tank pressure transmitters,
    and the active transmitter is linked to the active gas mix.

--

    Allow compilation on platforms without USBHID support
    
    E.g. iOS.
    
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Revert "Shearwater: correctly handle the different models"
    
    This reverts commit 8ea8cebb4e6c3d86b9ceb2291caa077dabd2a3f7.
    
    Well intended, but as Jef points out it breaks download from older Shearwater
    dive computers in certain situations.
    
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Add a workaround for invalid logbook begin pointers
    
    Unfortunately there are several devices where an invalid logbook begin
    pointer occurs relative frequently. Typical examples are the Oceanic VT
    4.1 and the Sherwood Wisdom 2. In such cases, the strict validation of
    the pointer causes the download to fail, without being able to download
    any dives at all.
    
    Since the begin pointer is only needed to detect the oldest logbook
    entry, we can fall back to downloading the entire logbook ringbuffer. If
    we're lucky (and we usually are), we can detect the oldest entry by
    inspecting the logbook entries once they are downloaded (e.g. presence
    of uninitialized entries) and then the download will finish succesfully.
    In the worst case scenario, we'll be able to download at least some
    dives before hitting another error.

--

    Let the ringbuffer function handle a full ringbuffer
    
    The ringbuffer_distance() function has a parameter to specify whether a
    ringbuffer with identical begin/end pointers should be considered an
    empty or a full ringbuffer. Hence there is no need to handle the case of
    a full ringbuffer manually.

--

    Suppress the warning if no O2 sensors are present
    
    The warning about disabling the O2 sensors due to factory default
    calibration values, applies only if there is at least one calibrated O2
    sensor present.
    
    This has no effect on the calibration bits, because those are already
    zero if there are no calibrated O2 sensors present.

--

    Integrate the connect step into the open function
    
    There is no need to expose the two step connection setup of the
    underlying socket interface in the public api. Doing so may complicate
    the implementation on platforms where the native api is not based on the
    socket interface (e.g. Mac OS X).
    
    Note that the function to connect based on the IrDA service name is
    removed. It's not used anywhere in libdivecomputer and since IrDA is an
    outdated technology nowadays, it's unlikely we'll need it in the future.

--

    Implement some filter functions

--

    Add suport for applying a filter function
    
    The device descriptors are extended with a filter function. During the
    device discovery, this filter function is used to return only devices
    that match a known dive computer.
    
    The filtering is optional, and can be disabled by passing a NULL pointer
    for the device descriptor when creating the iterator with one of the
    dc_xxx_iterator_new() functions.

--

    Re-write the device discovery using the iterator api
    
    Replacing the callback based interface with an iterator based interface,
    results in a more extensible abstraction with a common interface for
    each of the built-in I/O implementations (serial, usbhid, irda and
    bluetooth).

--

    Cleanup the iterator internals

--

    Simplify the conditional compilation
    
    Move the global variables inside an existing conditionally compiled
    block, to remove some of the #ifdef's.

--

    Disable some Windows specific compiler warnings
    
    The -Wno-pedantic-ms-format option is only needed for the MinGW target.
    But for some reason, the AX_APPEND_COMPILE_FLAGS macro enables the
    option for all other GCC targets too. But during compilation GCC outputs
    the warning "unrecognized command line option".

--

    Use SDP to auto-detect the rfcomm port number
    
    When the port number is set to zero (which is an invalid value), detect
    the port number automatically. On Windows, we can simply supply the UUID
    of the serial port service, and the Windows api will take care of the
    discovery. On Linux (bluez), the SDP discovery needs to be performed
    manually to retrieve the port number.

--

    Use the actual IrDA device names

--

    Use the correct data type for the temperature
    
    Temperatures are reported as a floating point values and not as
    (unsigned) integers.

--

    Disable O2 sensors with default calibration values
    
    If all (calibrated) sensors still have their factory default calibration
    values (2100), they are probably not calibrated properly. To avoid
    returning incorrect ppO2 values to the application, they are manually
    disabled (e.g. marked as uncalibrated).

--

    Add support for the Seac Jack
    
    The Seac Jack is compatible with the DiveSystem/Ratio dive computers.

--

    Check for memory allocation errors
    
    Appending data to the buffer may fail if a memory allocation is
    necessary to enlarge the buffer. Hence the return value of the
    dc_buffer_append() call should always be checked, unless the memory was
    already pre-allocated or the check is deferred after the last operation.

--

    Erase the buffer before calling the vtable function
    
    This guarantees that the backend will always receive an empty buffer,
    and eliminates the need to clear the buffer manually in every single
    backend.

--

    Replace hardcoded size with the sizeof operator

--

    Use the correct model number for the Shearwater Nerd 2
    
    Unlike the Shearwater Petrel, the Shearwater Nerd 2 appears to have a
    distinct model number from the Nerd.
    
    Reported-by: Janice McLaughlin <janice@moremobilesoftware.com>

--

    Scubapro G2 cleanup: avoid memory leak
    
    Coverity CID 207807
    
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

--

    Cleanup: remove confusing NULL check
    
    device has already been dereferenced before we ever get here
    
    Coverity CID 207713
    Coverity CID 207780
    
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Cleanup: bail on error
    
    Coverity CID 207809
    
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Cleanup: consistently check return value of iostream functions
    
    Coverity CID 215197
    Coverity CID 215200
    
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Cleanup: check return value of ioctl()
    
    It's checked for all the other invocations...
    
    Coverity CID 207796
    
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Cleanup: remove dead code and return the correct return code
    
    Coverity CID 207700
    
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Cleanup: avoid undefined shift operation
    
    Shifting a 32bit value by 32 is undefined.
    
    Instead of using shifts to create the mask, explicitly create it by
    subtracting 1 from the signbit value (and using bitwise NOT to fill all
    the higher bits).
    
    This commit looks confusing because Jef wanted me to not have two places
    where I use the bitwise not. So instead of creating an equivalent mask
    variable and not having to change the return statements we end up with a
    mask that is the bitwise invert of what was there before this commit and
    therefore the return statements need to change as well.
    
    Coverity CID 207769
    
    Suggested-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Cleanup: ensure string is 0 terminated
    
    The Linux kernel uses the sir_name as a standard C string (in one
    instance copying it into a 60 char buffer using kstrncpy with a length
    limit of 60), we therefore need to ensure that it is 0 terminated.
    
    Since the existing code didn't notify the caller if we were truncating
    the string at 25 characters, I didn't add such a warning/error for
    truncating at 24 characters.
    
    I was not able to find documentation on how Windows uses irdaServiceName
    but since this is implementing the same standard, the same change was
    made to the Windows code.
    
    In both cases I replaced the hardcoded length of 25 with a sizeof()
    argument (but both Linux and Windows hard code that length in their
    headers, so it seems unlikely this would ever change).
    
    Coverity CID 207790
    
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Cleanup: avoid memory leak
    
    Coverity CID 207731
    
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Cleanup: avoid memory leak
    
    Coverity CID 207773
    
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Cleanup: avoid memory leaks
    
    Coverity CID 207730
    Coverity CID 207747
    
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Cleanup: correctly handle upper bound of array
    
    Coverity CID 207684
    Coverity CID 207724
    Coverity CID 207728
    
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Fix a mistake in the error checking
    
    This is a small bug that was introduced long time ago, with commit
    84563c6303a4ab263ea19c973d3f0bbfe6fc0955.

--

    Add support for the Mares Quad Air

--

    Correctly determine git SHA if libdivecomputer is a git submodule
    
    In the case of a submodule, the .git file is a text file pointing to the
    correct module in the parent's .git folder. The git rev-parse works
    correctly in both cases.
    
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Correctly determine git SHA if libdivecomputer is a git submodule
    
    In the case of a submodule, the .git file is a text file pointing to the
    correct module in the parent's .git folder. The git rev-parse works
    correctly in both cases.
    
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Disable a couple of overly aggressive warnings
    
    -Wextra and -Wpedantic are creating more noise than useful warnings.
    
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Add configure flag to explicitly enable BLE support
    
    This way BLE dive computers that are otherwise conditional on USBHID will be
    built on platforms that support them but don't have USBHID (like iOS).
    
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    EON Steel: remove a few unused variables
    
    Most of the new warnings due to compiler flags are just unnecessary
    noise, but let's clean up at least the obvious and unquestionably valid
    ones.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

--

    build: ignore the build from git
    
    Now as a submodule, the change in libdivecomputer created by the
    build process is annoying. Just ignore it.
    
    Signed-off-by: Jan Mulder <jlmulder@xs4all.nl>

--

    Don't accept a NULL pointer as parameter
    
    Immediately return an error instead of trying to pass the NULL pointer
    to the underlying open system call.

--

    Add support for semi-closed circuit diving
    
    Add a new type to distinguish between closed circuit (CCR) and
    semi-closed circuit (SCR) diving. Some dive computers from HW and
    DiveSystem/Ratio support this.
    
    Because the CCR/SCR abbreviations are more commonly used, let's take the
    opportunity to also rename the existing DC_DIVEMODE_CC. To preserve
    backwards compatibility, a macro is added to map the old name to the new
    one.
    
    Reported-by: Jan Mulder <jlmulder@xs4all.nl>

--

    Detect dives with invalid profile data
    
    The OSTC3 stores the dive headers and profile data in two separate
    memory areas. There is a header area with fixed positions and a profile
    area which is used as a ring buffer. Each dive header stores the
    position of the profile data in the ring buffer.
    
    Now, once there are more dive headers then room for the profiles, the
    oldest profiles (but not the headers) are overwritten with new data.
    Because the dive headers are not updated when their profile data gets
    overwritten, they will now point to data that is no longer available.
    The internal logbook detects this situation and does not display the
    profile. But during the download, there is no such check, and the OSTC
    will send invalid profile data.
    
    This invalid profile data should be dropped on the receiver side.
    Unfortunately implementing the exact same check as is done by the OSTC
    itself isn't possible, because the OSTC doesn't send the 6 byte internal
    header on which the check is based. As a workaround, the two byte
    end-of-profile marker and the length field in the profile header is used
    to detect overwritten profiles.

--

    Implement the serial communication functions as no-ops
    
    For the socket based I/O stream implementations (IrDA and bluetooth) the
    serial communication specific functions are meaningless. Implementing
    them as no-ops allows the dive computer backends the call the I/O stream
    functions unconditionally.
    
    This is important for the bluetooth implementation, because bluetooth
    enabled dive computers will be able to use both the native bluetooth
    communication and the legacy bluetooth serial port emulation.

--

    Move the socket code to a common file
    
    A large part of the irda and bluetooth code is the Windows and BSD
    socket code. Moving this code to a common file reduces code duplication.

--

    Add support for a custom I/O implementation
    
    Wih the custom I/O implementation, an application can use its own
    low-level I/O layer instead of using one of the built-in ones. The
    application only needs to provide a set of callback functions, and
    libdivecomputer will wrap them into a I/O stream.

--

    Port the USB HID code to the new I/O interface

--

    Port the bluetooth code to the new I/O interface

--

    Port the IrDA code to the new I/O interface

--

    Port the serial code to the new I/O interface

--

    Add a new abstract I/O interface
    
    The purpose of the new I/O interface is to provide a common interface
    for all existing I/O implementations (serial, IrDA, bluetooth and USB
    HID). With a common interface the dive computer backends can more easily
    use different I/O implementations at runtime, without needing
    significant code changes. For example bluetooth enabled devices can
    easily switch between native bluetooth communication and serial port
    emulation mode.
    
    The new interface is modelled after the existing serial communication
    api. Implementations where some of those functions are meaningless (e.g.
    IrDA, bluetooth and USB), can just leave those functions unimplemented
    (causing the call to fail with DC_STATUS_UNSUPPORTED), or implement it
    as a no-op (always return DC_STATUS_SUCCESS).

--

    Post release version bump to 0.7.0

--

    Release version 0.6.0

--

    Fix some potential buffer overflows
    
    Verify the buffer size before accessing its content!

--

    Fix some casts with constant pointers
    
    Casting away the const qualifier generates a compiler warning which can
    easily be avoided by preserving the const qualifier.

--

    Enable some useful compiler warnings by default
    
    Because some of those compiler warnings are GCC specific, they should
    only be enabled if the compiler actually supports them. This is take
    care of with some macros from the autoconf-archive.
    
    To avoid breaking the build on systems that don't have those macros
    installed (e.g. Mac OS X), they are included in the project.

--

    Generate html documentation from the manpages

--

    Add support for new Suunto EON Core dive computer
    
    Nick Shore reports that it seems to act exactly like an EON Steel, just
    with a different USB device ID.
    
    Acting like the EON Steel is not a surprise: it does seem to be the same
    dive computer, just in a smaller and lighter package (same screen size,
    but more compact body and without the stainless steel to make it less
    than half the weight).  Looks like the battery is smaller, but the
    electronics are likely the same.
    
    We probably really should have some way to add new device ID's without
    having to add whole new model numbers etc.  It's not the first time this
    happens (see the Scubapro Aladin Square vs the G2), and it's likely not
    the last time.
    
    Reported-by: Nick Shore <support@mac-dive.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

--

    Fix the decoding of the ndl/deco information
    
    With the new APOS4 firmware, both the tts and the duration of the first
    deco stop are recorded while in deco. But compared with the older
    firmware, the tts field has moved to a slightly different offset. And
    contrary to the new documentation, it seems that the value for invalid
    or infinite has also changed from 0xFFFF to 0x7FFF,
    
    Note that for dives recorded with an older firmware version, the
    duration of the first deco stop isn't available, and libdivecomputer
    reports the tts instead. This is the same behaviour as before.
    
    Reported-by: Janice McLaughlin <janice@moremobilesoftware.com>

--

    Decode the firmware version for the iDive series
    
    For the older iDive series, the firmware is stored at a slightly
    different offset.

--

    Add support for the Suunto Eon Core
    
    The Suunto Eon Core uses a different USB PID, but otherwise it's
    compatible with the Eon Steel. It's probably an Eon Steel internally,
    but with a smaller form factor.
    
    To be able to distinguish between the two models and use the correct USB
    PID, each model is assigned a different (artificial) model number.
    
    Reported-by: Nick Shore <support@mac-dive.com>

--

    Locate the most recent dive
    
    The Suunto Eon Steel seems to have a limit of maximum 400 dives. Once
    that limit is reached, the oldest dives get overwritten with newer
    dives. But the order in which the dive entries are downloaded isn't
    changed, and thus the most recent dive is no longer the last entry.
    
    For the first 400 dives, the order is always straightforward:
    
       D001 D002  ... D399 D400
    
    The most recent dive is always the last entry, and no special processing
    is necessary. But once the limit is reached, the next few dives will
    start to overwrite the oldest dives, but the order remains unchanged:
    
       D401 D402 ... D399 D400
    
    Thus in order to return the dives in the correct order (newest first),
    we can no longer assume the most recent dive is the last entry, and thus
    we need to locate it manually.
    
    The new algorithm is based on the assumption that the most recent dive
    will have the hightest timestamp. And to be able to walk backwards
    through all the entries, the list is assumed to be a circular list.

--

    Add EON Steel time sync capability
    
    The EON Steel can use the new 'timesync' interface to set the time
    automatically from the computer it is connected to.
    
    This also regularizes the EON Steel command names a bit, and adds a few
    new commands (you can also read the time etc, which this doesn't
    actually use).
    
    [Jef Driesen: Modified to follow the existing naming conventions, return
    the correct error code and avoid arithmetic operations with signed
    integers.]
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

--

    Improve the progress events
    
    At the moment the progress events are reported for each download
    operation separately. Combined with the fact that the size of the dives
    isn't known in advance, and thus the progress events are based on a
    worst case value, the user experience is far from optimal. In practice,
    the progress goes from 0 to 100% for every manifest, and it stays close
    to zero while downloading the dives.
    
    This is improved by combining the individual progress events into a
    single progress for the entire download. This global progress simply
    counts the number of individual download operations. Since each
    operation is now subdivided into a fixed number of steps, regardless of
    the size of the transfer, the perceived speed is no longer constant.

--

    Detect the model number using the hardware type
    
    The model number is stored in the final block of each dive. But for an
    efficient implementation of the fingerprint feature, the devinfo event
    should be emitted before downloading the manifests or the dives. Thus
    reporting the correct model number is problematic.
    
    Currently the model number is simply hardcoded to the value of the
    Petrel. This is sufficient for the parser, because there the model
    number is only used to distinguish the Predator from all the other
    models. Now, because the petrel backend doesn't support the Predator,
    and the predator backend (which supports both the Predator and Petrel)
    can obtain the correct model number from the final block, the hardcoded
    value works fine. Except of course for identifying the actual model!
    
    Allthough there doesn't seems to be a command to retrieve the model
    number directly, we can retrieve the hardware type and map that to the
    model number.

--

    Shearwater: add support for remaining gas time
    
    [Jef Driesen: Update to the latest documentation.]
    
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Shearwater: extract tank sensor data for log version 7
    
    The first dive computer to support this is the Perdix AI. Interestingly,
    this keeps track of two sensors at all times. I haven't seen data with
    two sensors active, yet.
    
    [Jef Driesen: Update to the latest documentation.]
    
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Shearwater: extract log version from header
    
    The earliest document I have references log version 6. There are
    apparently older versions, but I don't know what the differences
    are. Before version 7, the log version wasn't always reliably
    stored, so we assume 6 is the minimum and use 7 (or later) if we
    find it.
    
    [Jef Driesen: Initialize and reset the cache correctly.]
    
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Add support for Scubapro Aladin Square
    
    It works like the G2, but has a different model number, and different USB device ID.
    
    Lots-of-testing-by: Vincent <vavincavent@gmail.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

--

    Add support for the Scubapro Aladin Square
    
    The communication protocol is identical to the G2 protocol, but with a
    different USB VID/PID (c251:2006).
    
    Note that unlike the G2, the Aladin Square seems to support only 33 byte
    USB HID packets (1 byte report id and 32 bytes payload), even when the
    actual command is much smaller. Without padding the commands, the dive
    computer doesn't reply at all. Because the padding is already there, to
    support the Windows api, no further changes are necessary.

--

    Scubapro G2 usb: always use exactly 32-byte packets (plus report byte)
    
    It turns out that the Scubapro G2 itself does not care at all, but
    apparently some of the other dive computers that use the same protocol
    do).
    
    In particular, Vincent reports that his Scubapro Aladin Square downloads
    ok with the USB ID's switched to c251:2006, but only if we send 32-byte
    USB HID payload packets, even though the command itself is much smaller.
    Otherwise it will simply not reply at all.
    
    To actually download correctly, we'll still need to do some model-
    specific USB ID updates, and there will be some model changes for the
    Aladin Square, but this at least fixes the transport side.
    
    Jef had actually already done this because of the Windows behavior side,
    I just hadn't thought it could possibly matter. Mea Culpa.
    
    Reported-and-tested-by: Vincent <vavincavent@gmail.com>
    Cc: Berthold Stoeger <bstoeger@mail.tuwien.ac.at>
    Cc: Jef Driesen <jef@libdivecomputer.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

--

    OSTC: initialize initial CNS from header
    
    As the OSTC does not report a CNS value on the first sample, we need to
    initialize it differently. This can be solved by using the initial CNS
    value form the dive header, and storing that value in the first sample.
    The resulting patch is very similar to 44f629f03a91a3b3.
    
    Signed-off-by: Jan Mulder <jlmulder@xs4all.nl>

--

    Use an out-of-range value as undefined
    
    The main purpose of the magic value UNDEFINED, is to indicate that a
    value isn't present in the data. But since the value 0xFF can actually
    be stored in the data, we can't distinguish between those two cases.
    This ambiguity can be avoided by using a magic value that lies outside
    the valid range for 8 and 16 bit fields.
    
    Note that an initial gas mix value of 0xFF remains interpreted as
    UNDEFINED, but this is now made explicit.

--

    EON Steel: explicitly sort the dive directory listing
    
    The code relied on the dives being ordered by date in the directory
    listing, which is normally true.  But once the dive computer fills up
    (after 400 dives or so), it starts re-using entries in the dive list,
    and the dive directory is no longer ordered by date.
    
    This matters because we want to download the latest dives first, since
    subsurface will generally stop downloading once it finds an existing
    dive.
    
    NOTE! If you screw up the date on the dive computer, the old behavior
    was possibly more to your liking, since - as long as the dive list
    hadn't filled up - it wouldn't really order by date, but by dive
    creation.
    
    However, I don't see any way to get that information once the dive list
    has filled up, so "order by dive date" is as good as it gets.
    
    If you do screw up dates, and you want to download new dives that are
    "older" than the dives you already have, you will need to basically set
    the "download all dives" flag, and then select the new dives manually.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

--

    Support for the Scubapro Aladin Sport Matrix.
    
    The protocol is identical to the G2 protocol, with the exception of a
    missing handshake.
    
    Signed-off-by: Berthold Stoeger <bstoeger@mail.tuwien.ac.at>

--

    Fix model number of the Scubapro Aladin Sport Matrix.
    
    The model number was wrong. Mea culpa.
    
    Signed-off-by: Berthold Stoeger <bstoeger@mail.tuwien.ac.at>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

--

    Support for the Scubapro Aladin Sport Matrix.
    
    The protocol is identical to the G2 protocol, with the exception of a
    missing handshake.
    
    Signed-off-by: Berthold Stoeger <bstoeger@mail.tuwien.ac.at>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

--

    Replace the clock calibration with a fixed epoch
    
    Currently the date/time parsing assumes the reference time (epoch) of
    the device clock is unknown. Hence we retrieve the current time of the
    device (devtime) and the host system (systime) during the download.
    Since both timestamps represent the same instant in time, but with a
    different reference time, we can calibrate the device clock as follows:
    
        ticks = parser->systime - (parser->devtime - timestamp) / 2
    
    But this produces wrong results once the device clock has been adjusted
    manually. Adjusting the device clock will suddenly increase (or
    decrease) the devtime, while the systime continues ticking forwards
    normally. Hence all dives recorded before the time adjustment will get
    an incorrect date/time value.
    
    Fortunately all devices appear to use a fixed epoch (2000-01-01 00:00:00
    UTC) and we can simply replace the calibration with a hardcoded value.
    
    Reported-By: Linus Torvalds <torvalds@linux-foundation.org>

--

    Make the initialization thread-safe
    
    Perform the initialization inside a critical section.
    
    Unfortunately Windows critical sections, which are the simplest
    synchronization mechanism available on Windows, do not support static
    initialization. A call to InitializeCriticalSection is required.
    Therefore a simple spinlock, with an implementation based on atomic
    operations, is used as a workaround.

--

    Initialize the usb library only once
    
    Initializing the hidapi library more than once is tricky. The hid_init()
    function can be called multiple times, but the the hid_exit() function
    will free the resources unconditionally, regardless of how many times
    the hid_init() function has been called. The consequence is a premature
    termination of the library.
    
    To avoid this problem, the calls are reference counted. Note that this
    workaround can't protect against calls made outside the libdivecomputer
    code!
    
    The libusb library doesn't suffer from this problem, because each
    initialization returns a new context pointer. But for consistency, we
    now also use a single reference counted libusb context.

--

    Workaround for a Windows libusb issue
    
    When libusb uses the Windows HID api internally, it does automatically
    prepend a zero report ID to the data for devices which support only a
    single report. But apparently it also returns a size of one byte extra!
    As a workaround, the number of bytes is limited to the actual size.
    
    See commit c9ed92d3f55c259931527a27d018eb5791a176dd for a similar issue
    in the hidapi library.

--

    Use a fixed size packet for sending
    
    The Windows HID api always expects to receive a fixed size buffer
    (corresponding to the largest report supported by the device). But
    unlike the hidapi library, the libusb library doesn't automatically pad
    the buffer to the expected size when trying to send less bytes. Thus
    when trying to submit the transfer, the underlying Windows api call
    immediately fails with ERROR_INVALID_PARAMETER.
    
    To workaround this problem, pad the data packet with zeros manually and
    always send the entire packet (1 byte report ID and 32 bytes payload).

--

    Replace the size macro with the sizeof operator

--

    Use the correct printf format for the size_t type

--

    Move platform specific macros to a common header file

--

    Use the correct data type for the return value

--

    Rename the DiveSystem vendor to Ratio
    
    At the time support for the Orca and iDive series was implemented, they
    were being sold under the "DiveSystem" brand. But nowadays, the newer
    iDive and iX3M series are being sold under the "Ratio" brand. Since this
    frequently confuses end-users, let's rename the libdivecomputer vendor
    name as well.
    
    The Orca and the original iDive series remain under the DiveSystem
    brand.

--

    Fix the Sherwood Insight temperature

--

    Implement the ndl/deco sample

--

    Change communication parameter to work better with FTDI
    
    The parameters used with the FTDI USB serial port drivers didn't work
    well with directly with libftdi1. The new baud rate results in the same
    effective baud rates for both.
    
    The rbstream block size was reduced to help with the unreliability of
    the libftdi communications.

--

    Retry read operations on failure
    
    Using FTDI for custom I/O resulted in very unrealible reads. This patch
    allows more reliable use of FTDI custom I/O, like what might be needed
    when used on a mobile device like Android.
    
    [Jef Driesen: Modified to retry only for non-fatal errors. This simply
    restores the code from commit b3d2c603ddec9758fb36706bbde46ce23ca9f0ed,
    which was removed in commit 55e8f83eb5d934e65fbf587d427de267f174c651.]

--

    Add support for the Suunto D4f

--

    Implement the tank pressure
    
    With the new APOS4 firmware, the latest ix3m and idive models support a
    wireless tank sensor. For dives without a tank pressure sensor, the
    pressure field in the sample is zero. Thus the first non-zero value
    indicates the presence of a tank sensor.

--

    Flagged Cochran DCs for FTDI communications
    
    This with serial_ftdi.c changes and other libdivecomputer changes
    enables Cochran DCs to work with libftdi on android devices.
    
    Signed-off-by: John Van Ostrand <john@vanostrand.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

--

    Use more descriptive names
    
    Those two samples are no longer unknown. The first one contains some
    freedive related data, and the second one contains some additional data
    with several sub types. At the moment only the tank and gas mix info is
    used.

--

    Use two passes to parse the profile data
    
    In the trimix data format, the tank and gas mix information is no longer
    stored in the header, but in a special sample. Because this sample is
    usually located at the end of the profile, the info isn't available yet
    during the first pass. Hence the need for a second pass.
    
    Without this change, the tank and gas mix samples will be missing unless
    the caller calls the dc_parser_get_field() function before calling the
    dc_parser_samples_foreach() function.

--

    Fix the Uwatec trimix data format
    
    The trimix dive header is only 84 bytes large, instead of 0xB1 bytes.
    The difference is quite hard to notice, because compared to the normal
    Galileo data format, the majority of the fields are located at exactly
    the same offset. But there are also some subtle differences, like the
    settings field containing the freedive and gauge bits.
    
    To fix this bug, a new header table is added. The rest of the code is
    updated to use this new table instead of the old trimix flag. The only
    place where the old flag is still used is for the decoding of the tank
    and pressure sample.

--

    Implement the ndl/deco, rbt and bookmark samples

--

    Implement the setpoint sample for the iDive and iX3M

--

    Mark 3 more Shearwater dive computers as BLE
    
    Technically this is inaccurate because while some Perdix and Petrel 2
    models do in fact support dual stack, the Petrel only does BT. But
    the Petrel 2 identifies itself as Petrel via BT, so we need to flag
    them both here.
    
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Scubapro G2: add zero report type to USBHID packet write
    
    Jef reports that this is required for HIDAPI, and while I would really
    like to just make the report type part of the custom packet_io interface
    instead of making it visible here, this is the minimal fix for now.
    
    See commit d251b373becc ("Add a zero report ID to the commands"), which
    does the same thing, except for the fact that we now need to treat BLE
    and USB HID differently.
    
    I may still end up teaching the USB HID custom-IO layer to add the
    report ID byte, and just specify it at dc_usbhid_custom_io() time
    instead.  That would make the G2 code not have to care about the
    transfer protocol again.
    
    (But the other user of USB HID - the Suunto EON Steel - has much bigger
    protocol differences between USB HID and BLE, so the whole "try to be
    protocol-agnostic" hope may be just a pipe dream anyway, and it's just
    the Scubapro G2 that _could_ work that way).
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

--

    Implement the ndl/deco sample for the Aqualung i300

--

    Add EON Steel time sync capability
    
    The EON Steel can use the new 'timesync' interface to set the time
    automatically from the computer it is connected to.
    
    This also regularizes the EON Steel command names a bit, and adds a few
    new commands (you can also read the time etc, which this doesn't
    actually use).
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

--

    Update the msvc project file

--

    Add basic timezone support
    
    Allthough most dive computers always use local time and don't support
    timezones at all, there are a few exceptions. There are two different
    sources of timezone information:
    
     - Some of the newer Uwatec/Scubapro devices use UTC internally and also
       support a timezone setting. This UTC offset is currently taken into
       account to obtain the dive date/time, but the UTC offset itself is
       lost.
    
     - Uwatec/Scubapro and Reefnet devices rely on the clock of the host
       system to synchronize the internal device clock and calculate the
       dive date/time. The consequence is that the resulting date/time is
       always in the timezone of the host system.
    
    In order to preserve this timezone information, the dc_datetime_t
    structure is extended with a new "timezone" field, containing the UTC
    offset in seconds. Devices without timezone support will set the field
    to the special value DC_TIMEZONE_NONE.
    
    The dc_datetime_localtime() and dc_datetime_gmtime() functions will
    automatically populate the new field with respectively the local
    timezone offset and zero. The dc_datetime_mktime() function will take
    into account the new timezone field for the conversion to UTC. The
    special value DC_TIMEZONE_NONE is interpreted as zero.

--

    Add time synchronization to the example application

--

    Implement the new api for the HW devices
    
    The Heinrichs-Weikamp devices already supported clock synchronization by
    means of a device specific function. This is now replaced with the new
    api.

--

    Add support for synchronizing the device clock
    
    Being able to synchronize the dive computer clock with the host system
    is a very useful feature. Add the infrastructure to support this feature
    through the public api.

--

    Use hidapi as the default USB HID library
    
    On Windows, the hidapi library uses the standard Microsoft USB HID
    driver, while libusb requires the installation of a different driver
    (WinUSB or libusbK). But installing one of the libusb drivers breaks
    compatibility with other applications using hidapi (Scubapro LogTRAK and
    Suunto DM5) because only one driver can be active. Switching
    libdivecomputer to hidapi avoids this problem.
    
    On Linux, the hidapi library doesn't seem to offer any advantages over
    libusb. Most distributions don't even have the hidapi library installed
    by default. Because there are usually two variants of the hidapi library
    available on Linux (hidapi-libusb and hidapi-hidraw), the autotools
    build system won't be able to detect it out-of-the-box, and will
    automatically fallback to the libusb implementation.
    
    On Mac OS X, hidapi is already the default (and also the only option).

--

    Workaround for a Windows hidapi issue
    
    The Windows HID api always expects to receive a fixed size buffer
    (corresponding to the largest report supported by the device). Therefore
    the hidapi library internally pads the buffer with zeros to the expected
    size, but apparently it also returns the size of the padded buffer! As a
    workaround the number of bytes is limited to the actual size.

--

    Reset the number of bytes to zero on error
    
    The hidapi read and write functions return a negative value if an error
    occurs. Those negative values should not be returned to the caller as
    the actual number of bytes (or used in the logging). The value is reset
    to zero instead.

--

    Add a zero report ID to the commands
    
    The zero report ID byte is required when using the hidapi library. We
    just never noticed this problem before, because we use libusb by
    default, and libusb doesn't need the extra zero byte.

--

    Fix compatibility issue with hidapi
    
    The hidapi library requires that the first byte contains the report ID.
    For devices which support only a single report, the report ID byte
    should be zero. The remaining bytes contain the actual report data.
    
    Now, when hidapi uses libusb internally, it strips the zero report ID
    byte again before passing the data to libusb. Thus in order to remain
    compatible with the hidapi based implementation, our libusb based
    implementation should do the same.

--

    Implement the salinity field

--

    Fix the atmospheric pressure for the iX3M
    
    The iX3M appears to store the atmosperic pressure in units of 1/10
    millibar instead of 1 millibar.

--

    Rename the OSTC 3+ to OSTC Plus
    
    The correct name for the OSTC 3+ is OSTC Plus nowadays. Allthough the
    exact name doesn't really matter because all OSTC3 based models are
    compatible, using the correct name should reduce confusing for
    end-users.

--

    Locate the most recent dive using the logbook pointers
    
    I received a bug report from a device which failed to download new dives
    after a reset (probably caused by an empty battery). This reset appears
    to reset the internal dive counter back to zero, and also resets the
    write pointer back to the begin of the logbook ringbuffer, but leaves
    the existing logbook entries in place. The result is that the logic to
    find the most recent dive based on the highest internal dive counter,
    will be wrong because it finds those old entries.
    
    The discovery of the logbook (and profile) write pointers eliminates the
    need to search for the most recent logbook entry.

--

    Add support for the Aqualung i200

--

    Add event handling to TM model
    
    For some reason I had never added event processing to this model.

--

    Fix profile buffer size and address size
    
    I dived the model enough to wrap the profile buffer and I was wrong
    about where the end was. Also, the buffer starts 3 bytes after where it
    could. We were treating profile pointers as 4 bytes when they are two
    bytes. This worked most of the time when short tissues were clear
    (tissue load follows the pointer).

--

    Add three event codes
    
    I found three previously undiscovered event codes.

--

    Add support for the Commander TM
    
    The Cochran Commander TM appears to be a first generation Commander with
    limited storage and function compared to later models.
    
    The main differences are:
    
     - The TM doesn't support high-speed transfer so use the 0x05 read
       command and don't change to a higher baud rate. Still reset to 9600
       to wait for the heartbeat.
     - The TM has a different config command (one byte).
     - The TM has only one config page.

--

    Dump function no longer assumes reads begin at byte 0
    
    For previously supported Cochran computers high-speed read of log and
    profile data started at byte 0. Older models that lack the high-speed
    transfer function use the standard speed read commands and so the log
    and profile data are read at higher addresses.

--

    Remove unneeded function
    
    Since moving to per-dive download of profile data (and now rbstream
    download) the data->sample_data_offset and data->sample_size variables
    aren't used so calculating them doesn't make sense.

--

    Use only a single read operation
    
    The profile and throw-away data can be read all at once. This avoids the
    need for an extra memory allocation and fixes a memory leak.

--

    Make rbstream pagesize smaller and device specific
    
    The progress bar was taking 18 seconds between updates on a Commander II
    when using a 128K pagesize. Since devices differ in their baud rates, it
    makes sense to use smaller pages on slower devices. This change reduces
    it to 32K on a Commander II and to 64K on EMC devices.

--

    Use rbstream for reading profile data
    
    Per-dive reading of the DC takes too long because of latency on read
    commands. The rbstream solves this by reading ahead in large blocks.

--

    Remove non-existing function from header
    
    The dc_device_version() function has been removed from the public api
    long time ago.

--

    Use the correct type in the leonardo vtable

--

    Clean up Shearwater string handling
    
    And remove the nasty and disgusting transmitter data handling code that
    Dirk added to work around his misunderstanding of the parsing code.
    
    This code now collects the various states of the transmitter batteries
    throughout a dive and reports the most meaningful summary in the end. It
    also rewrites the rest of the string handling code to be architecturally
    cleaner.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Mark DC descriptors with supported transport
    
    The syntax is trivial.
    "// FTDI" for FTDI cable support
    "// BT"   for classic Bluetooth support
    "// BLE"  for Bluetooth LE support
    
    We can then parse this information during the Subsurface build process
    and create the (hopefully correct) support matrix for dive computer
    download from the mobile apps.
    
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Shearwater: correctly handle the different models
    
    That weird 'petrel' argument and member variable can easily be replaced
    by looking at the model.
    
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Shearwater: detect the hardware type
    
    Stop pretending that all the devices since the Petrel are the same. They
    actually aren't. So let's detect them and correctly identify them.
    
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Shearwater: add transmitter battery information
    
    This should be a STRING callback, but those come from the header and we
    don't have the information until after we have parsed all the samples.
    
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Shearwater: report battery type for logversion >= 7
    
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Shearwater: add support for remaining gas time
    
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Shearwater: extract tank sensor data for log version 7
    
    The first dive computer to support this is the Perdix AI. Interestingly,
    this keeps track of two sensors at all times. I haven't seen data with
    two sensors active, yet.
    
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Shearwater: extrac log version from header
    
    The earliest document I have references log version 6. There are
    apparently older versions, but I don't know what the differences
    are. Before version 7, the log version wasn't always reliably
    stored, so we assume 6 is the minimum and use 7 (or later) if we
    find it.
    
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Removed unused code

--

    Fixed duplicate gasmix event reports
    
    Newer cochran DCs record a gas change event at the begining of a
    dive. The code creates a gas change before processing samples so
    with newer DCs this resulted in duplicate events.

--

    Added decompression event handling for the Commander
    
    I finally found an example of decompression on a Commander II computer
    and it seems to be identical to the EMC.

--

    Fix bad profiles when profile ringbuffer wraps around
    
    The method used to calculate the data used by dives (to determine when
    we run out of ringbuffer) incorrectly didn't include surface sample
    data. Ten to twenty minute of sample data is recorded at the surface in
    case the diver re-descends, continuing the dive. The code then thought
    that older dive profiles were not yet overwritten. The improper data was
    returned to the user.

--

    Changed cochran_comander_profile_size function parameters
    
    This function is much more useful if it works like a
    ringbuffer_distance() function. It assumed the wrong values when
    calculating profile size and it didn't have easy access to values it
    needed to properly calculate profile sizes.
    
    It makes sense to keep since it validates pointers.

--

    Fixed location and encoding of Commander II pointers
    
    Commander II pointers to profile ringbuffer data was wrong. After seeing
    the Commander I encoding I realized the Commander II encoding of RB
    pointers was in a flipped word big endian format. It only appeared to be
    in normal big endian format because of an adjacent pointer that usually
    shared the same first two bytes.

--

    Use a local variable for the layout pointer

--

    Add new EMC device model string

--

    Add support for Pre-21000 s/n Commander dive computers
    
    This adds support for older Cochran Commander dive computers,
    specifically Commanders with serial numbers prior to 21000.
    
    This also renames "Commander" model to "Commander II" and
    adds "Commander I" to refer to pre-21000 models.

--

    Fix problems with wrapped logbook ringbuffer

--

    Retry read operations on failure
    
    [Jef Driesen: Modified to retry only for non-fatal errors.]

--

    Change profile download to be incremental
    
    It will result in a 30 minute download for full computers but it
    significantly reduces the time to download partial dives.

--

    Fix the id string offset
    
    Since commit 344bfab229a17c7227b9bec02f616505a8d9e998 only a subset of
    the id string is used to detect the model. But because the offset was
    never updated, the model detection always fails now.

--

    Fix the progress events
    
    I accidentally passed the address of the progress pointer to the
    device_event_emit() function, instead of the pointer itself. Oops.

--

    Fix incorrect placement of -lz (zlib) in autotools build
    
    When I added support for the new Suunto EON Steel bluetooth download, I
    needed crc32(), and instead of cooking my own (libdivecomputer does do
    its own versions of the simpler crc functions), I made libdivecomputer
    just depend on zlib instead, which provides a convenient crc32() function.
    
    But I didn't add the new linker flag (-lz) in the right place in the
    automake.  It worked fine for me on Linux, but apparently not so well on
    macos.
    
    This fixes it.
    
    Reported-and-tested-by: Benjamin <nystire@gmail.com>
    Tested-by: Axel Richter <Axel.Richter@freenet.de>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

--

    Use the trimix data format

--

    Use the correct model number
    
    The model number reported by the Scubapro G2 is 0x32.

--

    Enable more fine grained progress events
    
    At the moment, the progress reporting will jump straight from about 0%
    at the start of the download to 100% at the end of the download, without
    any updates in between. This is improved by updating after every packet.

--

    Abort with an error if the buffer is too small
    
    Silently truncating the data packet if the buffer is too small will
    result in a corrupt data stream.

--

    Use the standard libdivecomputer error codes
    
    The error code returned by the dc_usbhid_read() function should be
    returned as-is, instead of being replaced with some generic error, which
    gets translated again to DC_STATUS_IO in the caller.

--

    Scubapro G2: add missed command packet logging
    
    I did the packet logging for the received data side, but forgot to do
    the same thing on the command transfer side, which makes the debug logs
    a bit less useful.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

--

    Scubapro G2: add back the initial handshake code
    
    When doing the G2 downloader, I dropped the initial handshake as I tried
    to keep the code minimal, and the handshake didn't seem to make any
    difference what-so-ever to me.
    
    And it probably doesn't matter for anybody else either.  But the code
    isn't working for some people, and maybe it does actually matter.
    
    More importantly, Scubapro's own LogTRAK application does send those two
    initial commands, and it's probably a good idea to minimize the
    differences between the different downloaders anyway, so add the
    handshake sequence back in.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

--

    Scubapro G2: clean up unused field
    
    Jef Driesen correctly points out that the 'address' field is just
    leftover from the IrDA code, and is meaningless for the USB HID
    transport version of the Scubapro G2.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

--

    Add initial Scubapro G2 frontend
    
    The back-end parser seems to be the same as for the Uwatec Smart (aka
    Galileo Sol).  At least that's the assumption right now.
    
    The downloader just uses USB HID (very similar to EON Steel) rather than
    the horrible IrDA thing.
    
    There's also eventually a BLE thing, but that's for the future.
    
    This is an unholy mixture of the Uwatec Smart downloader logic and the
    EON Steel usbhid transfer code.  The back-end is pure Uwatec Smart
    (model 0x11, same as Galileo Sol).
    
    I'm not at all sure this gets everything right, but it downloads
    *something*.
    
    [Jef Driesen: Renamed the backend to uwatec, and made some smaller
                  cosmetic changes to match the existing coding style.]
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

--

    Update the operations in 'custom_io' to consistent calling conventions
    
    The serial ops used a legacy calling convention that passed in just the
    pointer to the userdata pointer (ie the first argument to the functions
    was "void **userdata").
    
    That's actually very inconvenient, because the custom IO data can not
    only contain other interesting information that was filled in by the
    custom IO provider, it also made it harder to chain these things
    together, as exemplified by the core to emulate serial over the packet
    interface in the subsurface bluetooth code.
    
    This also adds the 'dc_context_t' field that is passed to the packet
    routine open.  That can allow the open routine to override the
    'custom_io' details of the context at open time (to allow nested
    custom_io operation).
    
    Note that callers of the open function need to be aware that the
    'custom_io' can be changed by the act of opening a custom_io, and the
    value shouldn't be cached in some local variable.
    
    Finally, this adds a new user-supplied opaque pointer
    
            dc_user_device_t *user_device;
    
    to the custom_io descriptor.
    
    The 'user_device' data is filled in when registering the custom_io with
    data that the custom IO open() routines can use.  This is different from
    the existing 'userdata' in that the 'user_device' is filled in before
    dc_open_device() is called (and "open" can then use it to limit what
    kinds of devices it looks for, for example).
    
    In contrast, the existing 'userdata' field is filled in by the
    "xyz_open()" routines, and contains the data necessary for the IO
    itself.
    
    The SSRF_CUSTOM_IO define is updated to v2 to indicate the new
    interfaces.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

--

    Scubapro G2: update for BLE downloading
    
    The code actually almost worked as-is, but for a tiny detail: the USBHID
    packet reception code always receives a full 64-byte packet, while BLE
    GATT will return how much it actually received.
    
    The other difference is that USB HID is so fast that it didn't make any
    difference where the progress was updated, it took about a second to
    download everything.
    
    BLE GATT is not fast to begin with, and the G2 may be particularly slow.
    
    So with the BLE backend, you really do want progress updates for each
    packet received, because the dump is going to take a while...
    
    But with the trivial packet verification change, and with the progress
    report updates, everything "JustWorks(tm)" over BLE.
    
    Of course, I haven't committed the actual Subsurface BLE transfer parts
    yet, because they are some incredibly ugly stuff with fragile bits and
    pieces.  But the fact that I can now download from two different dive
    computers does mean that I think it's getting to the point where I will
    just submit even my ugly code to Dirk.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

--

    Complete the EON Steel HDLC encoding/decoding work
    
    The previous patch did the HDLC encoding on packet send, this does the
    HDLC decoding on the receive side.
    
    In order to properly check the data integrity, the HDLC-encoded packet
    needs to be fully received before it can be processed.  So while the HID
    downloading continues to work packet-by-packet, the HDLC encoded BLE
    GATT stream needs a temporary buffer for the data that gets filled as we
    ask for the reply header.
    
    Right now only the old USB HID path is actually tested, because I
    haven't flushed out the packet receiving side in subsurface yet.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

--

    Teach the EON Steel about HDLC encoding of the command packets
    
    The BLE GATT transport ends up using HDLC for the stream encoding,
    unlike the USB HID side.  The EON Steel BLE GATT protocol actually does
    that for both the commands and for the replies, but this converts only
    the command side, because that's the simpler one.
    
    The reply side code will need to be re-architected a bit, because right
    now it is very much oriented towards beign able to do everything one
    single packet at a time (which is true for USB HID) rather than treating
    the packets as a stream of data (as is necessary for the CRC32
    verification and to handle the escaping of the 0x7e/0x7d bytes in the
    stream).
    
    So with this change, you can't actually do a download over BLE, but I
    was able to verify that the first command transfers correctly, and the
    EON Steel replies to it over Bluetooth LE GATT.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

--

    Bump our private version
    
    Given that this is a fairly significant change, this seems
    justified.
    
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Convert Suunto EON Steel and Scubapro G2 to dc_usbhid_custom_io helper
    
    This means that they still default to their respective USB devices, but
    you can now set custom IO structure to pass in your own data.
    
    Not only will we hopefully have some kind of BLE support, you could also
    use this to simply emulate packets from a log-file by having a packet
    replay (or by actually emulating a device).  Of course, you can already
    do this by actually emulating the device in a virtual environment, but
    it might be useful for some kind of libdivecomputer testing environment.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

--

    usbhid: add helper function to create a usbhid 'custom_io_t'
    
    Basically, this alows us to hide the usbhid code behind the custom_io
    abstraction, so that a dive computer could either be given a supplied
    custom_io structure, of if none is given, would create one for a USBHID
    device.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

--

    Rename 'custom_serial' as 'custom_io' across the board
    
    The custom IO handlers will be extended to not just do serial line
    emulation (generally over Bluetooth rfcomm), but do BLE too.
    
    BLE does not look like a serial protocol at all, it's packet-based, and
    we may have to add specific routines to indicate which GATT endpoints to
    use etc.  But like the traditional custom serial code, we want to do the
    actual IO not from within libdivecomputer, but from the user of the
    library (because the BLE support will require things like the Qt
    Connectivity layer - and we do not want libdivecomputer to have to link
    against something like Qt).
    
    So this renames 'custom_serial' to 'custom_io', and instead names the
    individual member function pointers 'serial_*' to make it clear that
    those members are for serial communication.
    
    It also adds new placeholders for packet_open/close/read/write.  Note
    that while these may look similar to the serial counter-parts, they are
    not the same or even necessarily mutually exclusive.  It is possible the
    the caller fills in one or the other (or both), and they would be used
    independently.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

--

    Improve the handling of unreadable dives
    
    Dives that are reported by the dive computer as unreadable (for example
    due to a power loss during the dive) are now skipped instead of being
    reported as a fatal error. Those dives can't be retrieved, so there is
    no good reason to abort the download.

--

    Improve the handling of devices without any dives
    
    Don't return an error if the dive computer reports there are no dives
    available!

--

    Add extra NAK error codes

--

    Propagate the error code to the caller

--

    Scubapro G2: make the backend_table_t contain the right values for the G2
    
    Not that anybody should ever use that old-style family/model thing
    anyway, so I considered just removing the g2 entry instead.  But dctool
    still uses this deprecated interfsce to pick a dive computer.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

--

    Scubapro G2: add missed command packet logging
    
    I did the packet logging for the received data side, but forgot to do
    the same thing on the command transfer side, which makes the debug logs
    a bit less useful.
    
    Of course, it turns out that a bug in subsurface means that the logging
    never gets enabled anyway even when you ask for it, so right now this
    particular misfeature didn't matter.  I'm hoping Tomaz/Dirk can fix the
    UI widget problem.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

--

    Scubapro G2: add back the initial handshake code
    
    When doing the G2 downloader, I dropped the initial handshake as I tried
    to keep the code minimal, and the handshake didn't seem to make any
    difference what-so-ever to me.
    
    And it probably doesn't matter for anybody else either.  But the code
    isn't working for some people, and maybe it does actually matter.
    
    More importantly, Scubapro's own LogTRAK application does send those two
    initial commands, and it's probably a good idea to minimize the
    differences between the different downloaders anyway, so add the
    handshake sequence back in.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

--

    Scubapro G2: clean up unused field
    
    Jef Driesen correctly points out that the 'address' field is just
    leftover from the IrDA code, and is meaningless for the USB HID
    transport version of the Scubapro G2.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

--

    Automatically re-transmit corrupt data packets
    
    Originally packets are only retried when a valid NAK packet with the
    busy error code is received. The retrying is now enabled for other types
    of errors also, such as data packets with checksum errors.

--

    Add initial Scubapro G2 frontend
    
    The back-end parser seems to be the same as for the Uwatec Smart (aka
    Galileo Sol).  At least that's the assumption right now.
    
    The downloader just uses USB HID (very similar to EON Steel) rather than
    the horrible IrDA thing.
    
    There's also eventually a BLE thing, but that's for the future.
    
    This is an unholy mixture of the Uwatec Smart downloader logic and the
    EON Steel usbhid transfer code.  The back-end is pure Uwatec Smart
    (model 0x11, same as Galileo Sol).
    
    I'm not at all sure this gets everything right, but it downloads
    *something*.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

--

    Add a separate transport type for USB HID

--

    Add a bluetooth transport type

--

    Add support for native bluetooth communication
    
    For the time being, the bluetooth communication code is of very limited
    use. It's not used anywhere in the library, and as an internal api it's
    also not available to applications. It serves mainly as a reference
    implementation for future use.
    
    The implementation supports Windows and Linux.

--

    Move the dummy IrDA implementation
    
    The dummy IrDA implementation is integrated in the main file. The
    appropriate implementation is selected using conditional compilation
    based on the features detect by the autotools build system.

--

    Fix the Oceanic OCS freedive mode

--

    Report the average ppO2 in external O2 sensor mode only
    
    Just like the ppO2 values from the O2 sensors, the average ppO2 should
    be reported in external O2 sensor mode only.

--

    Altered model detection after seeing some bytes change after a firmware update.

--

    Add support for the new models

--

    Add support for the new iX3M APOS4 firmware
    
    The new APOS4 firmware changed the data format and communication
    protocol. The size of the samples changed from 54 to 64 bytes, and in
    order to speedup the download, a single data packet contains 3 samples
    at once. If the number of samples is not an exact multiple of three, the
    last packet appears to contain garbage data.
    
    For parsing, the firmware version is available in the dive header.
    Unfortunately it can't be used for dives that are downloaded from a
    device with the new firmware, but which have been recorded with an older
    firmware. Such dives store the old firmware version in the dive header,
    but they also use the new sample format. As a workaround, we inspect the
    size of the dive.

--

    Add the firmware version to the devinfo event

--

    Report the ppO2 in external O2 sensor mode only
    
    The O2 sensor millivolt values are only valid if external O2 sensor
    monitoring is enabled.
    
    Note that the interpretation of the PPO2 status bit appears to be
    reversed (0=external and 1=internal).
    
    Reviewed-by: Anton Lundin <glance@acc.umu.se>

--

    Replace the constant offset with a scaling factor
    
    Correcting the Predator calibration value with a scaling factor produces
    even more reasonable ppO2 values compared to using a constant offset.
    The scaling factor of 2.2 is based on a linear regression between the
    average ppO2 reported by the dive computer, and the average ppO2
    calculated over all (calibrated) sensors using the raw calibration
    value.
    
    Reviewed-by: Anton Lundin <glance@acc.umu.se>

--

    Apply the calibration correction only for the Predator
    
    The calibration values for the Petrel are typically in the range 1600 to
    2400, while for Predator they are much smaller, with values in the range
    800 to 1400. The consequence is that the calculated ppO2 values are too
    low for the Predator. Adding a constant offset of about 1000 changes the
    calibration value to be in approximately the same range as the Petrel,
    and hence more reasonable ppO2 values. But this correction should only
    be applied for the Predator, and not the Petrel.
    
    Reviewed-by: Anton Lundin <glance@acc.umu.se>

--

    shearwater: Report individual sensor values
    
    This reads the reported mV values from the sensors, and based on the
    calibration values converts it into a ppo2 value to report.
    
    Signed-off-by: Anton Lundin <glance@acc.umu.se>

--

    Predator: don't report PPO2 unless in CC mode
    
    Sending this in OC mode is redundant and might confuse applications that
    assume they only get PPO2 data in CC mode.
    
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Fix the Sherwood Wisdom 3 memory layout
    
    The logbook ringbuffer starts at 0x03D0 instead of 0x0240.

--

    Implement the read and write functions for the OSTC3
    
    The existing infrastructure for upgrading the firmware can also be used
    to support reading and writing directly to the internal flash memory.

--

    Don't ignore handshaking errors

--

    OSTC3: add battery percentage
    
    From firmware version 2.15, the battery percentage is shown on the
    unit (in the logbook that is, it was shown on the display for a very
    long time). The used byte in the OSTC3 seems to be populated since
    firmware version 2.10. The new percentage data is added to the
    "battery at end" voltage data, and a V is added to denote the unit
    of the voltage.
    
    In addition, reordered the DC_FIELD_STRINGs a little, so that the
    serial is on top.
    
    Further, changed BUFLEN to 32 (as in 84eb59c) due the the length
    of the new battery notation.
    
    Signed-off-by: Jan Mulder <jlmulder@xs4all.nl>

--

    Add support for the Mares Quad

--

    OSTC3: set initial setpoint in profile data
    
    In CCR fixed setpoint mode of the OSTC3, the initial setpoint at the start
    of the dive was not set. This fix adds the initial setpoint based on
    the data in the fixed setpoint table (ie, the first fixed setpoint is
    the initial one).
    
    Signed-off-by: Jan Mulder <jlmulder@xs4all.nl>

--

    Remove unused parameters

--

    Cleanup the extract dives functions
    
    After being removed from the public api, these functions can be changed
    into local, static functions. And in a few cases, they are no longer
    necessary and can be removed completely.

--

    Remove unnecessary helper functions
    
    The second variant of the open or create functions were introduced to
    maintain backwards compatibility. But after being removed from the
    public api, these functions serve no purpose anymore, and can be removed
    completely.

--

    Remove deprecated functions from the public api
    
    The vendor_product_parser_create() and vendor_product_device_open()
    functions should be called indirectly, through the generic
    dc_device_open() and dc_parser_new() functions. And the
    vendor_product_extract_dives() functions are internal functions that
    should never have been part of the public api in the first place.

--

    Remove unnecessary include statements

--

    Prevent buffer overrun
    
    When compiled with older Microsoft libraries, the unsafe implemention of
    snprintf results in non-null terminated strings, causing numerous subsequent
    issues. This fix just enlarges the used buffer to accommdate longer strings.
    A more complete solution would include the use more recent Microsoft libraries in
    the build process. The larger buffer is still need then, to prevent trucated
    (but proper null terminated) strings.
    
    ref: https://github.com/Subsurface-divelog/subsurface/issues/301
    
    Signed-off-by: Jan Mulder <jlmulder@xs4all.nl>

--

    Fix the firmware version and serial number
    
    When downloading a Shearwater Petrel using the predator backend, the
    firmware version and serial number are different compared to those
    reported by the petrel backend.
    
    This is caused by a difference in the encoding of the data. In the
    predator data format, the firmware version appears to be BCD encoded,
    and the serial number is stored as a big endian integer.

--

    Add support for the Uwatec Aladin Tec 3G

--

    Disable the deco events
    
    These deco events have already been converted to a deco sample.

--

    Replace the deco events with a deco sample

--

    Report errors from the close function

--

    Mark the private function as static

--

    Fix a bug in the tank pressure samples
    
    The number of tank pressure sensors is not necessary equal to the number
    of gas mixes. Take for example a dive with two gas mixes, but only a
    single tank pressure sensor attached to one of the two tanks. Because
    the tank index is shared with the gas mix index, it will refer to a
    non-existing sensor when switching to a tank without a pressure sensor
    attached.
    
    The invalid tank index should not be considered a fatal error. The tank
    pressure values should be ignored instead. The device appears to record
    zero values anyway, except for the first value immediately after the gas
    switch. I suspect that's caused by the fact that the pressure is only
    recorded every 4 samples, and therefore the last pressure value is
    reported with a small delay.

--

    Disable freedive mode for the Uwatec Aladin Tec 2G
    
    The Uwatec Aladin Tec 2G doesn't support freedive mode. This appears to
    be a bug in SmartTrak and LogTrak. They both report gauge and air/nitrox
    dives as apnea dives.

--

    Mark the private function as static

--

    Fix some compiler warnings

--

    Fix some more null pointer dereferences

--

    Use a more efficient download algorithm
    
    The current algorithm always downloads a full memory dump, and extracts
    the dives afterwards. For the typical scenario where only a few dives
    are being downloaded, this is inefficient because most of the data isn't
    needed. This can easily be avoided by downloading the data on the fly.

--

    Use the new ringbuffer stream
    
    All dive computer backends are updated to use the new ringbuffer stream.

--

    Add a common ringbuffer reading algorithm
    
    Reading a ringbuffer backwards in order to process the most recent data
    first, is a very common operation. Nearly every dive computer backend
    has its own implementation. Thus with a common implementation, the
    amount of code duplication and complexity in the dive computer backends
    can be greatly reduced.
    
    The common algorithm is implemented as a simple ringbuffer stream, which
    takes care of all the technical details like the ringbuffer boundaries,
    alignment to the page size, using the optimal packet size and caching
    the remaining data.

--

    Improve the robustness of the IrDA I/O code
    
    The select system call modifies the file descriptor set, and depending
    on the underlying implementation also the timeout. Therefore these
    parameters should be re-initialized before every call.
    
    The existing code also didn't handle EINTR and EAGAIN correct.

--

    Fix a few null pointer dereferences

--

    Fix the number of gas mixes
    
    The Tusa Zen supports a maximum of only 2 gas mixes.

--

    Always use the sample timestamp as the base value
    
    With a time based sample interval, the number of samples for a single
    timestamp should be constant. However in practice some devices
    occasionally store fewer samples. Since our sample time is based purely
    on the sample interval, it goes completely out of sync with the sample
    timestamp. To avoid this problem, the sample timestamp is used as the
    base value.
    
    For the Oceanic Pro Plus 2, this problem is very noticable. After about
    115 minutes into a dive, the sample interval appears to increase to 60
    seconds. Thus, without this fix, the resulting dive time for long dives
    is suddenly much shorter than it should be.

--

    Fix the name of the Aqualung i550
    
    The Aqualung i550 doesn't have a "T" (which probably stands for
    transmitter) in its name.

--

    Fix the ndl/deco and rbt samples
    
    The Air Time Remaining (ATR) and Dive Time Remaining (DTR) fields have
    been swapped.

--

    Parse the sample interval correctly
    
    The Cressi Drake supports a sample interval of 1, 2, 3 and 4 seconds.

--

    Fix the Aqualung i450T time samples
    
    The Aqualung i450T appears to ignore the fixed sample rate and instead
    store a timestamp in each sample.
    
    The presence of the surface samples in combination with this timestamp
    based format is odd. Even the official Diverlog software is confused:
    the Windows versions seems to ignore them, but the Mac version takes
    them into account.

--

    Split the raw data into multiple vendor samples
    
    After the previous commit, the raw data is now reported with one large
    vendor sample. Because that makes the data more difficult to interpret
    (for example during debugging), a small helper function is added to
    split the data again in multiple vendor samples.

--

    Output samples only once all raw data is available
    
    Originally, the time and vendor sample values are emitted immediately
    after the previous sample is complete. This is now postponed until all
    raw samples are available.
    
    This will be required for the Aqualung i450t. That model appears to
    ignore the fixed sample rate and instead store a timestamp in each
    sample. That means the timestamp is only available once the last raw
    sample data has been reached.

--

    Fix the length check

--

    Skip the extra samples one by one
    
    Skipping the extra samples by increasing the length is not always
    reliable. If there are empty samples present, they will get skipped
    instead of the real samples. And if the number of samples isn't an exact
    multiple of the samplerate, we're accessing data beyond the end of the
    dive profile.

--

    Fix the memory layout for the Hollis DG03
    
    The profile ringbuffer ends at 0xFE00 instead of 0x10000.

--

    Implement ndl/deco for the Hollis DG03

--

    Document the date/time functions

--

    Fix bug in ostc deco info string parsing
    
    The code was just if instead of else if by accident.
    
    Signed-off-by: Anton Lundin <glance@acc.umu.se>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

--

    Teach ostc deco model info strings about OSTC4 VPM
    
    Signed-off-by: Anton Lundin <glance@acc.umu.se>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

--

    Correct shearwater Deco model info string
    
    The literal % where in the wrong place.
    
    Signed-off-by: Anton Lundin <glance@acc.umu.se>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

--

    Correct firmware string for OSTC4
    
    OSTC4 stores firmware in another format than OSTC3's.
    
    Signed-off-by: Anton Lundin <glance@acc.umu.se>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

--

    Fix logging of Custom Write
    
    This way we actually trace print the written buffer, even if the caller
    doesn't care about how much data he/she actually wrote.
    
    Signed-off-by: Anton Lundin <glance@acc.umu.se>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

--

    Document the public api with man pages

--

    Add support for the Cressi Drake
    
    The Cressi Drake is a mainly a freedive computer. The data format is
    almost identical to the Leonardo. The main difference is that a single
    dive now contains an entire freedive session. Each freedive in the
    session is delimited with a 4 byte header containing the surface
    interval and a special marker.

--

    Detect overwritten dive profiles
    
    The logbook entries are stored separately from the profile data. If the
    profile ringbuffer is filled faster than the logbook ringbuffer, then
    the oldest logbook entries can still point to profile data that has
    already been overwritten with newer data.
    
    To detect such overwritten profile data, we keep track of the remaining
    space in the profile ringbuffer.

--

    Ignore tank pressure if no sensor is attached
    
    If no tank pressure sensor is attached, the extra 8 bytes with the tank
    info are still present, but the recorded tank pressure value is always
    zero.

--

    Add support for the tank field

--

    Add support for the salinity field

--

    Use the sample interval from the settings
    
    The sample interval is stored in the settings, and thus there is no need
    to use a hardcoded value. In practice all dives appear to be using the
    default value (5 seconds), so this is more about being future proof.

--

    Update the Aqualung i750TC parser
    
    The Aqualung i750TC data format appears identical to the Oceanic VTX
    format. Therefore the i750TC parser is updated to match with the VTX
    parser.

--

    Toggle the DTR line during setup
    
    On linux, several users are reporting download problems, while on
    windows everything works fine. Simply toggling the DTR line appears to
    fix the problem.
    
    A possible explanation is that on windows, the SetCommState() function
    not only configures the serial protocol parameters, but also initializes
    the DTR and RTS lines. In the libdivecomputer implementation the default
    state is enabled (DTR_CONTROL_ENABLE and RTS_CONTROL_ENABLE). The result
    is that the DTR line gets automatically initialized to enabled, and then
    manually disabled again.
    
    On linux, the DTR and RTS lines are not automatically initialized during
    configuration, and need to be controlled explicitely. The result is that
    the DTR line ends up disabled without being toggled.

--

    Implement the read function
    
    The read command appears to be limited to the range 0x1000-0x1100. That
    range seems to correspond with the first 256 bytes of the full memory
    dump. The packet size of 32 bytes is an arbitrary choice.

--

    Add doxygen documentation to the build system

--

    Add support for the Aqualung i750TC

--

    Fix the Windows version resource build
    
    When building the Windows version resource, the -DHAVE_CONFIG_H option
    isn't passed to resource compiler automatically. The result is that
    development builds don't have their git revision embedded in the DLL.

--

    Force the dive mode to gauge
    
    The Citizen Hyper Aqualand supports gauge mode only.

--

    Add support for the dive mode
    
    The dive mode is stored in each sample, and can change during the dive.
    In order to report a single value for the entire dive, we assume the
    value of the first sample is representive for the entire dive. For
    example a dive started as a CC dive but with a bailout to OC during the
    dive, is still considered to be a CC dive.
    
    A warning is generated if the dive mode changes.

--

    Report the initial gas mix on the first sample
    
    For dives with multiple gas mixes, an application doesn't have enough
    info to figure out which one is the initial gas mix. Usually it's the
    first gas mix, but that's not guaranteed. Reporting the intial gas mix
    on the first sample avoids this problem.

--

    Remove the deprecated gas change events
    
    The new gas mix sample has been around for a while now, and we're not
    going to maintain the deprecated events forever.

--

    Add support for the Hollis DG02.

--

    Add support for the Oceanic F10.
    
    This appears to be an Oceanic branded version of the Aeris F10.

--

    Post release version bump to 0.6.0.

--

    Release version 0.5.0.

--

    Include the public header in the implementation file.
    
    In the public header files, all symbols are marked extern C. When using
    a C compiler, there is usually no problem if the header isn't included
    in the C file. But the msvc build system uses the C++ compiler (due to
    the use of some C99 features not supported by the msvc C compiler).

--

    Add explicit casts for the msvc C++ compiler.

--

    Add some workarounds for the msvc compiler.

--

    Update the msvc project file.

--

    Add missing header files to the Makefiles.
    
    To be able to generate a distribution tarball, all files need to be
    listed explicitely.

--

    Add support for the Subgear XP-Air

--

    Fix the firmware version for the HW Frog.
    
    The firmware version in the dive header is stored at byte offset 32
    instead of 34.

--

    Use the new USB HID backend for the Eon Steel.

--

    Add a dummy backend for systems without USB HID support.
    
    This dummy implemantion is used when building without libusb and hidapi.

--

    Use the hidapi library on Mac OS X.
    
    On Mac OS X, libusb doesn't work for USB HID devices. We can use the
    hidapi library instead. Although the hidapi library supports Linux and
    Windows too, we keep using libusb there to avoid the extra dependency.

--

    Add a new USB HID communication backend.

--

    Add a configure option to build without libusb.

--

    fix compile error
    
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    export new symbol, needed by subsurface
    
    Signed-off-by: Gaetan Bisson <bisson@archlinux.org>
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Fix the gas mix parsing for the Aladin Tec 2G.
    
    Unlike the other models, the Aladin Tec 2G uses only a single byte to
    store the oxygen percentage, and there is no need to manually re-map the
    deco mix.
    
    Normally, the oxygen percentage is stored using two bytes (little endian
    byte order). Thus for a device supporting two gas mixes, four bytes will
    be used, and the corresponding gas mix id for each byte is as follows:
    
      ID: 0 0 1 1
    
    After re-mapping the id of the deco mix, this becomes:
    
      ID: 0 0 2 2
    
    Since oxygen percentages are limited to the range 0-100%, the highest
    byte (marked with an X) should always be zero and can thus be ignored:
    
      ID: 0 X 2 X
    
    Now, because an oxygen percentage of zero indicates a disabled gas mix,
    this is equivalent to a device supporting three (or even four) gas
    mixes, each stored using only a single byte:
    
      ID: 0 1 2 3
    
    We can take advantage of this knowledge to avoid having to re-map the
    deco mix id.

--

    Fix merge error of AQUAI300 memory layout
    
    This removes the additional entry for AQUAI300, as it was done in "Fix
    the memory layout for the Aqualung i300." (1e22760f9102ac).
    
    Signed-off-by: Anton Lundin <glance@acc.umu.se>
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Build example applications by default again
    
    A while back, the example applications where broken in our
    Subsurface-branch, and got disabled by default. This re-enables them to
    sync better with upstream.
    
    Signed-off-by: Anton Lundin <glance@acc.umu.se>
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Set error status if transfer fails in close
    
    This fixes whats probably was a merge error. This is a resync with
    upstream.
    
    Signed-off-by: Anton Lundin <glance@acc.umu.se>
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Don't overwrite status
    
    This removes whats probably a merge error, that overwrites the return
    status.
    
    Signed-off-by: Anton Lundin <glance@acc.umu.se>
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Add blank row to match upstream
    
    Signed-off-by: Anton Lundin <glance@acc.umu.se>
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Remove last traces of our old custom serial code
    
    This is just to make future merges easier.
    
    There were nothing left of Claudiu's code in those files, so thats why i
    removed the copyright lines.
    
    Signed-off-by: Anton Lundin <glance@acc.umu.se>
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Restore the sample events.
    
    In commit 864b46603963ea2f70f5166bb7a738a12fc280fc, the sample events
    have been removed because we need to parse the enum string descriptor
    instead of the numeric value.

--

    Re-implement custom serial in a new way
    
    This re-implements the custom serial concept in a new way. This way
    doesn't touch any of the backend code, it just introduces a optional
    redirection layer in the existing serial backends.
    
    This implementation supports more serial operations to, so we can
    support more backends this way.
    
    Hooking into the existing serial backends might look ugly but its
    probably the best way to make sure this patch conflicts as little as
    possible with upstream.
    
    Signed-off-by: Anton Lundin <glance@acc.umu.se>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

--

    Remove the old custom serial code
    
    Signed-off-by: Anton Lundin <glance@acc.umu.se>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

--

    Suunto EON Steel: initialize the tank 'gasmix' index
    
    The gasmix query interface considers cylinders and gas mixes independent
    things, so the tank data structure has a pointer to the gasmix index.
    
    But the EON Steel treats cylinders as just having a gasmix (and so does
    subsurface, for that matter), so the gasmix index for the tank is just
    the same as the tank index.
    
    But we never filled it in, so you'd always see a "gas index" of zero,
    and subsurface would end up warning each time about how the gasmix index
    doesn't match the cylinder index (but because subsurface actually agreed
    with EON Steel, it worked despite the warning).
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Suunto EON Steel: do the proper enum lookup for a few more cases
    
    Instead of hardcoding the enum values for setpoint type and gas type,
    use "lookup_enum()" to actually parse the enum data and use that.
    
    I don't think this matters right now, since the numeric translations
    haven't changed, but it is the RigthThing(tm) to do.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Suunto EON Steel: fix the event begin/end flag
    
    This fixes a bug where the begin/end marker was mistakenly added as the
    value instead of as flag.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Suunto EON Steel: split out gas info parsing
    
    The dive gas parsing cases can be split out into a helper function to
    keep things more manageable.  Especially since there will be a couple
    more cases coming up.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    EON Steel: look up enum descriptor strings
    
    It turns out you can't hardcode the enum numbers either, since they
    change from dive to dive (or possibly firmware version to firmware
    version).
    
    So do it right, and actually parse the string descriptor for the enum.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    EON Steel: pass in the type descriptor to samples that need it
    
    The samples that take 'enum' types need the type descriptor to parse
    what the enum type means.
    
    This doesn't actually use the data yet, I need to add parsing of the
    enum descriptor string.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    EON Steel: mark tank cache initialized when filling it in
    
    The previous commit fixed the cache initialization testing, and
    uncovered the fact that the tank size cache initialization didn't set
    the initialized bit correctly.  That oversight had been hidden by the
    fact that we then tested the bit wrongly, so not setting it right didn't
    use to matter as long as there were other higher cache bits that were
    set.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    EON Steel: fix uninitialized field cache entries
    
    The check for whether we had initialized a field in the EON Steel cache
    data structure was wrong, causing some entries to be returned
    successfully even if their field had never been initialized.
    
    In most cases, it didn't matter, since the cache data was initialized to
    zero (which is a fine default for uninitialized data), so most of the
    time it didn't matter.
    
    But for the recently added dive mode field, this caused OC dives to be
    returned as freedives, for example.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Initial Suunto EON Steel CCR support
    
    This does the basic divemode and setpoint parsing for the EON Steel, and
    gets the CCR download right in the big picture.
    
    The cylinder information is still confusing and incorrect, but this is a
    big step in the right direction.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Suunto EON Steel: add descriptor debugging output
    
    .. every time I look for a new feature I add debug code to print out all
    the descriptors.  So let's just do it once and for all.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Add tank size reporting for Suunto EON Steel
    
    Sadly the data we get from the EON Steel is a bit of a mess.
    It doesn't really tell us if the data is metric or imperial (it always sends
    both wet volume and working pressure). And in imperial mode the Suunto
    engineers seem a bit confused. The pressure given (entered on the dive computer
    in psi) is sent to us not in bar, not in atm... it's "something". As far as I
    can tell it's a constant factor of 1.00069182389937 different from bar.
    And the wet sizes are a bit to small to get the cuft size the user entered.
    But instead of trying to guess and fix the mess, we just pass it through...
    
    So this is somewhat useful, but not really what most users will want.
    
    Linus started this commit with a few lines that parsed the right values out of
    the data stream from the Suunto EON Steel. I then added the implementation of
    the infrastructure to convert the raw data and report it back to the caller.
    
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Fix the gas mix parsing for the Aladin Tec 2G.
    
    Unlike the other models, the Aladin Tec 2G uses only a single byte to
    store the oxygen percentage, and there is no need to manually re-map the
    deco mix.
    
    Normally, the oxygen percentage is stored using two bytes (little endian
    byte order). Thus for a device supporting two gas mixes, four bytes will
    be used, and the corresponding gas mix id for each byte is as follows:
    
      ID: 0 0 1 1
    
    After re-mapping the id of the deco mix, this becomes:
    
      ID: 0 0 2 2
    
    Since oxygen percentages are limited to the range 0-100%, the highest
    byte (marked with an X) should always be zero and can thus be ignored:
    
      ID: 0 X 2 X
    
    Now, because an oxygen percentage of zero indicates a disabled gas mix,
    this is equivalent to a device supporting three (or even four) gas
    mixes, each stored using only a single byte:
    
      ID: 0 1 2 3
    
    We can take advantage of this knowledge to avoid having to re-map the
    deco mix id.

--

    Suunto EON Steel: extend our string space
    
    We only used to save 16 extended strings per dive from the EON Steel
    download, which is _plenty_: it's not like we actually generate that
    many strings.  Firmware version, battery status, transmitter info -
    there's just not that many strings.
    
    Oops.
    
    Except if you have lots of transmitters.  Then each wireless transmitter
    will have three strings each, for transmitter ID and beginning/ending
    battery status.
    
    I only have one, but Andreas Klein has four.  And it took me
    embarrassingly long to realize that he really did have them on the
    dives, because after the first two transmitter IDs got recorded, the
    string space filled up and we silently dropped the rest.
    
    But I have learnt my lesson.  Future generations will talk about how I
    said "32 strings will be enough for anybody".
    
    But at least it should be enough for a few more transmitters.  Somebody
    should extend this some better way, but I'm still chasing other issues.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Suunto EON Steel: initialize the tank 'gasmix' index
    
    The gasmix query interface considers cylinders and gas mixes independent
    things, so the tank data structure has a pointer to the gasmix index.
    
    But the EON Steel treats cylinders as just having a gasmix (and so does
    subsurface, for that matter), so the gasmix index for the tank is just
    the same as the tank index.
    
    But we never filled it in, so you'd always see a "gas index" of zero,
    and subsurface would end up warning each time about how the gasmix index
    doesn't match the cylinder index (but because subsurface actually agreed
    with EON Steel, it worked despite the warning).
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Suunto EON Steel: do the proper enum lookup for a few more cases
    
    Instead of hardcoding the enum values for setpoint type and gas type,
    use "lookup_enum()" to actually parse the enum data and use that.
    
    I don't think this matters right now, since the numeric translations
    haven't changed, but it is the RigthThing(tm) to do.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Add support for the Sherwood Vision.

--

    Fix the decoding of the maximum depth.
    
    Several devices (e.g. Oceanic Geo, Oceanic Veo 2.0 and Tusa Zen) report
    a maximum depth that is clearly too large. The problem is easily fixed
    by ignoring the higher bits. The exact bit mask is an educated guess. A
    12 bit value is plausible because it's also used for the sample depths.

--

    Improve the default layout detection.
    
    Select the default memory layout for unsupported devices based on the
    amount of memory indicated in the version string. This allows to
    download a full memory dump.

--

    Add a warning for unsupported devices.

--

    Fix the temperature for the Tusa Zen Air.

--

    Add support for the Aqualung i550T.

--

    Fix deco model strings in hw parser
    
    The new version of the log book format broke the string handling.
    
    Signed-off-by: Anton Lundin <glance@acc.umu.se>
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Add strings as extradata in xml
    
    This teaches the dctool about the subsurface special field strings, and
    saves them in the xml output in a way which is compatible with
    subsurface.
    
    Signed-off-by: Anton Lundin <glance@acc.umu.se>
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Use the new settings field for the salinity.
    
    Since the salinity bit is stored in the settings, there is no need for a
    separate salinity entry in the header tables.

--

    Fix the parsing of freedives.
    
    In freedive mode the sample rate is only 1 second instead of 4 seconds.
    The tank pressure fields appear to be re-used for some other (unknown)
    purposes, and should be ignored.

--

    Detect the gauge and freedive mode correctly.
    
    The gauge and freedive mode bits are stored in the settings field. The
    location of the gauge bit appears to be the same for all models. For the
    freedive bit it depends on the model, and also not all models support
    it.

--

    Add the salinity field for the Aladin Tec.

--

    Add support for the Scubapro Mantis 2.

--

    Fix the decoding of the dive time.
    
    The dive time is stored in two separate bytes: one for the number of
    minutes, and another one for the hours. Since we only took into account
    the first byte containing the minutes, the divetime for dives longer
    than one hour was always too short.

--

    Add support for the Scubapro Mantis.
    
    The Scubapro Mantis uses the same model number as the Meridian, and
    works out of the box.

--

    Fix the Aeris 500AI serial number.
    
    The Aeris 500AI serial number appears to be located at a slightly
    different offset, and with an unusual encoding. It's a BCD encoded
    number, but with the digits of each byte swapped.

--

    Add the serial number encoding to the layout.
    
    At the moment, the encoding of the serial number is tied to the global
    pointer mode. To support devices where this is no longer the case, a new
    entry for the serial number encoding is added.

--

    Add salinity and timezone fields to Aladin Tec 2G

--

    Add NDL and RBT for the ATOM31 and I450T

--

    Add support for the new extended hardware descriptor.
    
    The latest v2.09 (hwOS) and v1.1.0 (hwOS4) firmware introduced a new
    variant of the hardware descriptor command. This extended command
    returns:
    
     - a 16 bit hardware descriptor
     - a 16 bit feature descriptor
     - an 8 bit model descriptor
    
    The hardware descriptor is backwards compatible with the existing one
    (upper bits are all zero for now). For the OSTC4, the feature descriptor
    is currently used to indicated the Bonex scooter version (0x01), and the
    model descriptor is 0x43. For all other models, the feature and model
    descriptors are always zero for now.
    
    For older firmware versions, which do not support the new extended
    descriptor yet, there is an automatic fallback to the previous
    descriptor.

--

    Update the OSTC device descriptors.
    
    There are a few new hardware variants since the last update.

--

    Add a workaround for an OSTC4 firmware bug.
    
    Due to a firmware bug, the deco/ndl info is incorrect for all OSTC4
    dives with a firmware older than version 1.0.8. Since it's not possible
    to correct the info again, it's ignored and not returned to the
    application.

--

    Fix the decoding of the OSTC4 firmware version.
    
    The OSTC4 firmware version uses four digits for the firmware version
    (X.Y.Z.Beta), while all other hwOS models use two digits (X.Y). To
    preserve backwards compatibility with the existing two byte data format,
    the OSTC4 firmware version is packed into a 16 bit integer as follows:
    
       XXXX XYYY YYZZ ZZZB
    
    and stored with little endian byte order.

--

    Add an ostc3 specific function with the model number.
    
    To be able to pass the OSTC 3 model number to the parser, and preserve
    backwards compatibility, we need a new function. The new function should
    also be used for the Frog, by passing zero as the model number.
    
    Using the hw_ostc_parser_create() function with the hwos parameter set
    to one, is now deprecated but will remain supported for backwards
    compatibility.

--

    Rename the frog parameter and field to hwos.
    
    The frog parameter and field are not only used for the Frog, but also
    for all hwOS based models. Therefore, using the more generic hwos as the
    name is more meaningful.

--

    Add severity indication to the event flags for the Suunto EON Steel
    
    This way Subsurface can show different icons depending on what kind of
    event we report.
    
    This also fixes a bug where the begin/end marker was mistakenly added as
    the value instead of as flag.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Add a new dc_parser_new2 convenience function.
    
    For applications supporting offline parsing (like libdivecomputer's own
    dctool application), some device specific knowledge is still required in
    order to map a particular model to the corresponding backend. The new
    convenience function will take care of that internally.
    
    The already existing dc_parser_new() function does the same, but
    requires an open device handle, which makes it unsuitable for offline
    parsing.

--

    Suunto EON Steel: add transmitter battery state reporting
    
    I'm not sure how reliable it is, and older wireless tank pods had a bug
    in the reporting (looks like the battery voltage range calibration was
    done incorrectly, and it reports 0% battery for new batteries).
    
    But depending on how well it actually works when the batteries start
    getting weak, the transmitter battery reporting is potentially *very*
    useful.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Suunto EON Steel: add surface time reporting
    
    For some reason I hadn't reported surface time.  It's trivial to do
    especially now that we have the varargs string adding function.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Suunto EON Steel: split out gas info parsing
    
    The dive gas parsing cases can be split out into a helper function to
    keep things more manageable.  Especially since there will be a couple
    more cases coming up.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Suunto EON Steel: add 'varargs' version of 'add_string()' function
    
    .. and use it for the cases that used to do this by hand (Personal
    Adjustment and Desaturation Time).
    
    There will be more users coming up.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Suunto EON Steel: add desaturation time reporting
    
    The EON Steel reports it in seconds remaining after the dive.  That's a
    bit excessive, but I guess SI units is where it's at.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Suunto EON Steel: add dive state event reporting
    
    Now that we support string events and don't need to try to figure out
    some libdivecomputer event number that doesn't exist, it's easy to add
    the proper support for the dive state reporting that the EON Steel has.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    EON Steel: look up enum descriptor strings
    
    It turns out you can't hardcode the enum numbers either, since they
    change from dive to dive (or possibly firmware version to firmware
    version).
    
    So do it right, and actually parse the string descriptor for the enum.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    EON Steel: pass in the type descriptor to samples that need it
    
    The samples that take 'enum' types need the type descriptor to parse
    what the enum type means.
    
    This doesn't actually use the data yet, I need to add parsing of the
    enum descriptor string.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Add 'string' event type
    
    The event numbers are an indecipherable mess, and Suunto EON Steel has
    notifications, events and warnings that just don't fit.  Plus they
    really come as strings from the EON Steel anyway.
    
    So add a "SAMPLE_EVENT_STRING" type, and for that type the event has a
    "const char *name" instead of the odd and meaningless flags/value pair.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Make the tank "type" field more useful
    
    Right now it only has an indication of whether the cylinder size is
    imperial or metric, which is frankly quite useless.
    
    Turn it into a bitmask instead, where we keep the imperial/metric data
    for compatibility, but add another two bits that say that it's a CC
    cylinder, and whether it's the oxygen or diluent cylinder.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    EON Steel: mark tank cache initialized when filling it in
    
    The previous commit fixed the cache initialization testing, and
    uncovered the fact that the tank size cache initialization didn't set
    the initialized bit correctly.  That oversight had been hidden by the
    fact that we then tested the bit wrongly, so not setting it right didn't
    use to matter as long as there were other higher cache bits that were
    set.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    EON Steel: fix uninitialized field cache entries
    
    The check for whether we had initialized a field in the EON Steel cache
    data structure was wrong, causing some entries to be returned
    successfully even if their field had never been initialized.
    
    In most cases, it didn't matter, since the cache data was initialized to
    zero (which is a fine default for uninitialized data), so most of the
    time it didn't matter.
    
    But for the recently added dive mode field, this caused OC dives to be
    returned as freedives, for example.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Set the default model number.
    
    When the device family is provided without an explicit model number, we
    simply choose the first available model. But since new models are being
    added all the time, this default model is not guaranteed to remain the
    same. That's not desirable because it can alter the behaviour of the
    application.
    
    The introduction of the Aeris 500AI is an example of this problem. The
    default model in the vtpro family used to be the Oceanic Versa Pro. But
    because the Aeris 500AI has a lower model number, it automatically
    became the new default model. Since both use a different protocol
    variant (MOD vs INTR) they are not interchangable.
    
    The default model is now hardcoded. The best option is of course to
    provide the model number explicitly!

--

    Refactor the oceanic download function.
    
    The large and complex oceanic_common_device_foreach() function is
    refactored into two independent helper functions. One for reading the
    entries in the logbook ringbuffer, and another for reading the profile
    data.

--

    Add support for the Aeris 500AI.
    
    The Aeris 500AI is quite different from the other vtpro compatible
    models. First, it uses the INTR protocol variant. Next, it doesn't
    appear to have a logbook ringbuffer. Instead it supports a new read
    logbook index command (0x52) that returns the logbook entries. This
    requires a custom implementation of the logbook function.

--

    Ignore samples with all 0xFF bytes.

--

    Add support for the INTR protocol variant.
    
    There are two variants of the vtpro communication protocol: the existing
    MOD variant and the new INTR variant. The main difference is in the
    initialization sequence, with two completely different response packets:
    
       MOD--OK_V2.00
       INTR-OK_V1.11
    
    The INTR variant does not appear to return useful information in the
    version packet.

--

    Add a parameter with the model number.

--

    Allow custom logbook and profile functions.
    
    By adding the logbook and profile functions to the vtable, a dive
    computer backend can now easily replace the default implementation with
    a custom one, without having to duplicate the common code.

--

    Fix a crash when no dives are present.
    
    To guard applications from divisions by zero, the progress event code
    asserts the maximum value should always be non-zero. The eonsteel does
    trigger this assert when there are no dives present.

--

    Fix the memory layout for the Aqualung i300.
    
    The profile ringbuffer ends at 0xFE00 instead of 0x10000.

--

    Initial Suunto EON Steel CCR support
    
    This does the basic divemode and setpoint parsing for the EON Steel, and
    gets the CCR download right in the big picture.
    
    The cylinder information is still confusing and incorrect, but this is a
    big step in the right direction.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Suunto EON Steel: add descriptor debugging output
    
    .. every time I look for a new feature I add debug code to print out all
    the descriptors.  So let's just do it once and for all.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Fix the sample rate for the Aqualung i450t.

--

    Fix the nitrox gas mix parsing.
    
    Mares Darwin compatible devices support a nitrox mode. The nitrogen
    percentage should only be taken into account when the dive mode is set
    to nitrox, because the last used value remains in place for air dives.

--

    Add support for the dive mode field.

--

    Fix the length of the Vyper Novo gas change event.
    
    Just like the Suunto DX, the Vyper Novo uses 5 bytes for the 0x06 gas
    change event.

--

    Add support for the Aqualung i300.

--

    Fix the nitrox gas mix parsing.
    
    Mares Darwin compatible devices support a nitrox mode. The nitrogen
    percentage should only be taken into account when the dive mode is set
    to nitrox, because the last used value remains in place for air dives.

--

    Add support for the dive mode field.

--

    Fix the length of the Vyper Novo gas change event.
    
    Just like the Suunto DX, the Vyper Novo uses 5 bytes for the 0x06 gas
    change event.

--

    Add support for the Aqualung i300.

--

    Convert operating system errors.
    
    Errors reported by system calls are now converted to the corresponding
    libdivecomputer status code. This results in a more descriptive and
    meaningfull return value.

--

    Add support for 1.5 stopbits.

--

    Add support for space and mark parity.

--

    Refactor the internal serial and IrDA api.
    
    The low level serial and IrDA functions are modified to:
    
     - Use the libdivecomputer namespace prefix.
    
     - Return a more detailed status code instead of the zero on success and
       negative on error return value. This will allow to return more
       fine-grained error codes.
    
     - The read and write functions have an additional output parameter to
       return the actual number of bytes transferred. Since these functions
       are not atomic, some data might still be transferred successfully if
       an error occurs.
    
    The dive computer backends are updated to use the new api.

--

    Fix the date for the Sherwood Insight 2.

--

    Add support for the Beuchat Mundial 2 and 3.
    
    These two models use the same memory layout and data format as the
    Oceanic F10.
    
    Reported-By: Nick Shore <support@mac-dive.com>

--

    Add the devinfo event.
    
    The devinfo event with the device serial number is required for the
    fingerprint feature. Without this event, applications won't be able to
    load (or save) the correct fingerprint. All necessary information is
    already available in the initial handshake packet.

--

    Add support for the fingerprint feature.

--

    Fix a memory leak.
    
    A new buffer is allocated for each dive, but only the last one is freed.
    Since the code is already prepared to simply re-use the same buffer,
    there is no need to allocate those extra buffers.

--

    Fix OSTC3 merge errors
    
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Add support for the new DX data format.
    
    Just like the D4i and D6i, the new header is a few bytes larger. The
    correct variant can again be detected by means of the logbook id tag at
    the start of the header.

--

    Fix Shearwater breakage caused by bad merging
    
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Add dummy serial number usage to dctool
    
    After adding support for serial number on dc parsers on
    libdivecomputer's Subsurface branch, we need to add the serial parameter
    to parser calls as well. Just using 0...
    
    Signed-off-by: Miika Turkia <miika.turkia@gmail.com>
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Add support for the Aqualung i450T.

--

    Fix merge error that causes double free when downloading from EON Steel
    
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Add support for the Cressi Newton.
    
    The Cressi Newton appears to be compatible with the Leonardo and Giotto.

--

    Add support for imperial units in the xml output.
    
    Libdivecomputer always uses metric units internally. But when reverse
    engineering a device that stores everything using imperial units, it's
    very convenient to be able to switch the output to imperial units too.

--

    Always close the xml tags.
    
    The dive and sample xml tags were not closed properly if an error
    occurred during parsing.

--

    Get the gas mixes from the sample data.
    
    The Shearwater devices support adding, removing or editing gas mixes
    during the dive. The pre-defined gas mixes available in the opening and
    closing block are only a snapshot of the configuration at the start and
    at the end of the dive. Thus by editing the gas mixes during the dive
    it's possible to switch to a gas mix that is not present in the opening
    (or even the closing block). The parser doesn't support that.
    
    To avoid this problem, we now collect the available gas mixes from the
    sample data. As a side effect we only return those gas mixes that are
    effectively used during the dive.

--

    Cache the dive mode internally.
    
    This simply moves the code to the get the dive mode from its own
    function into the existing caching function.

--

    Add support for the Shearwater Perdix.

--

    Add support for the Cochran Commander and EMC.

--

    Don't build examples by default
    
    They are broken in this branch.
    
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Add support for the Uwatec Aladin Sport.
    
    The Aladin Sport appears to be compatible with the Aladin 2G.

--

    Add support for the Suunto Zoop/Vyper Novo.
    
    The Zoop Novo and Vyper Novo are compatible with respectively the D4i
    and D6i.

--

    The new D6i data format support 3 gas mixes.

--

    Add support for the new D4i and D6i data format.
    
    One of the newer D4i and D6i firmware versions (for example v1.5.9),
    introduces a new variant of the data format. The new dive header is 8
    bytes larger. The correct variant can be detected by means of the
    logbook id tag at the start of the header.

--

    Add support for the HW OSTC 4.
    
    Except for the firmware update and a few other minor differences, the
    new OSTC4 is backwards compatible with the OSTC3.

--

    Read and cache the hardware descriptor.
    
    By reading the hardware descriptor immediately after entering download
    or service mode, we can identify the specific model and adapt to minor
    differences in the communication protocol.

--

    Pass an array to the checksum function.

--

    Get the gas mixes from the sample data.
    
    The Shearwater devices support adding, removing or editing gas mixes
    during the dive. The pre-defined gas mixes available in the opening and
    closing block are only a snapshot of the configuration at the start and
    at the end of the dive. Thus by editing the gas mixes during the dive
    it's possible to switch to a gas mix that is not present in the opening
    (or even the closing block). The parser doesn't support that.
    
    To avoid this problem, we now collect the available gas mixes from the
    sample data. As a side effect we only return those gas mixes that are
    effectively used during the dive.

--

    Cache the dive mode internally.
    
    This simply moves the code to the get the dive mode from its own
    function into the existing caching function.

--

    Add support for the Shearwater Perdix.

--

    Add support for the Cochran Commander and EMC.

--

    Add support for the Uwatec Aladin Sport.
    
    The Aladin Sport appears to be compatible with the Aladin 2G.

--

    Add support for the Suunto Zoop/Vyper Novo.
    
    The Zoop Novo and Vyper Novo are compatible with respectively the D4i
    and D6i.

--

    The new D6i data format support 3 gas mixes.

--

    Add support for the new D4i and D6i data format.
    
    One of the newer D4i and D6i firmware versions (for example v1.5.9),
    introduces a new variant of the data format. The new dive header is 8
    bytes larger. The correct variant can be detected by means of the
    logbook id tag at the start of the header.

--

    Add configure option to disable checking for libusb and hidapi
    
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Add support for the HW OSTC 4.
    
    Except for the firmware update and a few other minor differences, the
    new OSTC4 is backwards compatible with the OSTC3.

--

    Read and cache the hardware descriptor.
    
    By reading the hardware descriptor immediately after entering download
    or service mode, we can identify the specific model and adapt to minor
    differences in the communication protocol.

--

    Pass an array to the checksum function.

--

    One more merge fix
    
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Fix the OSTC3 missing initial gas mix detection.
    
    For the OSTC3 compatible devices, a missing initial gas mix (e.g. no gas
    marked as the first gas) leaves the initial gas mix index at its default
    value of zero. This is different from the OSTC2 compatible devices,
    where a missing initial gas is stored as the value 0xFF.
    
    By initializing the index with the value 0xFF, the existing detection
    works for both variants.

--

    Add support for the parse command.

--

    Integrate the new output formats.
    
    The existing output code is removed and replaced with the new XML and
    RAW output formats. The desired output format can be selected with a new
    command-line option. The XML format remains the default output format.

--

    Add support for the raw output format.
    
    The RAW output format exports each dive to a raw (binary) file. To
    output multiple files, the filename is interpreted as a template and
    should contain one or more placeholders.

--

    Add support for the xml output format.
    
    The XML output format exports all dives to a single xml file.

--

    Add a new abstract output interface.
    
    The new output interface provides the necessary infrastructure to add
    support for multiple output formats. Due to the abstract interface, each
    new format will require only minimal changes in the application itself.

--

    Fix year decoding for Sherwood Amphos Air

--

    Fix the date for the Oceanic Datamask.

--

    Fix the decoding of negative temperatures.
    
    Due to a firmware bug, negative temperatures are stored incorrectly and
    a workaround is necessary to recover the correct value.

--

    Disable the getopt argument permutation on BSD systems.
    
    On BSD based operating systems (which includes Mac OS X), the getopt()
    function is posix compliant and thus the option processing stops when
    the first non-option is found. But the getopt_long() function permutes
    the argument vector, just like the GNU implementation.
    
    Using a leading '+' character in the option string disables the
    permutation again.

--

    Use the optreset variable on BSD systems.
    
    On BSD based operating systems the optreset variable should be used to
    reset the internal getopt state. Setting optind to zero is a GNU
    extension.

--

    Don't assume malloc sets errno to ENOMEM.
    
    Although many implementations (including glibc) set errno on failure,
    this is not required by the C standard.

--

    Reduce the conditional compilation for Windows.
    
    With a few compatibility macros and helper variables, the amount of
    conditional compilation can be greatly reduced.

--

    Use the error code returned by the WSAStartup function.
    
    Unlike the other socket functions, the WSAStartup() function returns the
    extended error code directly. A call to the WSAGetLastError() function
    is not needed and should not be used.

--

    Don't ignore zero depth samples in freedive mode.
    
    In freedive mode, samples are only 2 or 4 bytes large, thus a sample
    containing all 0x00 bytes represents a zero depth value and not some
    invalid data that should be ignored.

--

    Remove the footer sample for the F10 and F11.
    
    The F10 and F11 don't seem to have a special footer sample after the
    profile data. Those 8 bytes appear to be valid sample data.

--

    Fix the decoding of the dive time.
    
    I originally assumed the second byte contains the hour, but that turns
    out to be wrong. At least some of the bits have a different meaning.
    With only seconds and minutes, the maximum divetime is limited to at
    most 99 minutes and 59 seconds. That shouldn't be a problem for
    freedives.

--

    Use the correct sample rate from the header.
    
    The Oceanic and Aeris F11 have a configurable sample rate. The possible
    sample intervals are 2, 1, 0.5 and 0.25 seconds. Since our smallest unit
    of time is one second, we can't represent the last two, and the extra
    samples will get dropped for now.

--

    Fix the memory layout for the Oceanic F11.

--

    Add support for the Oceanic F11.
    
    This appears to be an Oceanic branded version of the Aeris F11.

--

    Return a more appropriate error code.
    
    The DC_STATUS_IO code is intended for reporting low-level I/O errors.
    That's not the case here, and there are more appropriate error codes
    available.

--

    Use helper functions to allocate and free objects.
    
    Both the allocation and initialization of the object data structure is
    now moved to a single function. The corresponding deallocation function
    is intended to free objects that have been allocated, but are not fully
    initialized yet. The public cleanup function shouldn't be used in such
    case, because it may try to release resources that haven't been
    initialized yet.

--

    Remove some boilerplate code from the cleanup functions.
    
    Instead of freeing the object data structure in the backend specific
    cleanup function, the memory is now freed automatically in the base
    class function. This reduces the amount of boilerplate code in the
    backends. Backends that don't allocate any additional resources, do no
    longer require a cleanup function at all.

--

    Simplify the error handling in the close function.
    
    When the close function returns, all resources should be freed,
    regardless of whether an error has occured or not. The error code is
    purely informative.
    
    However, in order to return the first error code, which is usually the
    most interesting one, the current implementation is unnecessary
    complicated. If an error occurs, there is no need to exit immediately.
    Simply store the error code unless there is already a previous one, and
    then continue.

--

    Switch to goto style error handling.
    
    With the goto error handling, all cleanup code can be moved to a central
    location and no longer needs to be duplicated multiple times.

--

    Add the fwupdate command.

--

    Add the read and write commands.

--

    Add the download command.

--

    Add the dump command.

--

    Add the list command.

--

    Add the version command.

--

    Add the help command.

--

    Add helper functions for converting hexadecimal data.

--

    Add helper functions for reading/writing binary files.

--

    Add a helper function for translating status codes.

--

    Add a default event handler.

--

    Setup the cancel signal handler.

--

    Setup the device descriptor.

--

    Setup the library context.

--

    Change the format for error and warning messages.
    
    Use the same format as used for printing the error and warning messages
    from libdivecomputer itself.

--

    Add a more modular example application.
    
    The universal application works well, but is quite difficult to extend
    with more functionality. Therefore a new and more modular application is
    needed. The new dctool application will support multiple sub-commands,
    to carry out specific actions. Extending the application will be as easy
    as adding new commands.

--

    Fix the date parsing for several models.
    
    To store the day (range 1 to 31) as a binary encoded value, only 5 bits
    are required. The extra 6th bit is part of the year. The year is also
    not BCD encoded. This happened to work by accident, because for a single
    nibble, the current implementation of the bcd2dec() function returns the
    binary value.

--

    Add a new sample with the active gas mix.
    
    The new gasmix sample contains the index of the active gas mix.
    
    This new sample is intended as a replacement for the existing gas change
    events (SAMPLE_EVENT_GASCHANGE and SAMPLE_EVENT_GASCHANGE2). To maintain
    backwards compatibility, the legacy events are marked as deprecated but
    not removed yet.

--

    Parse the profile to retrieve the bailout gas mixes.
    
    In CC mode, only the diluents are stored in the header. The list with
    the OC gas mixes, which are used for bailout, are not stored in the
    header. In order to retrieve the bailout mixes too, we need to parse the
    profile and add them to the manual gas mixes.

--

    Add support for the DiveSystem iX3M series.
    
    The protocol of the iX3M series is almost identical to the protocol of
    the iDive series. The main difference is that the command bytes and the
    size of the response packets have been changed. In order to be able to
    communicate with the correct set of commands, the user needs to supply
    the correct number now. To maintain backwards compatibility, a new
    variant of the open function is added.

--

    Improve the support for pseudo terminals.
    
    Apparantly Fedora applies a custom patch to glibc's tcsetattr()
    function, which adds an extra check to verify the PARENB/CREAD/CSIZE
    bits in the termios c_cflag field.
    
    However, in commit 197b9f09421111e03588c94d55a72aa6ec624c63 we already
    discovered that for pty's, some of the termios settings make no sense at
    all, and therefore the Linux kernel always does:
    
        tty->termios.c_cflag &= ~(CSIZE | PARENB);
        tty->termios.c_cflag |= (CS8 | CREAD);
    
    Thus, instead of ignoring such nonsense termios settings, the kernel
    changes the termios structure to reflect what pty's actually do. The
    consequence is that these settings will not stick, and cause the extra
    check in the Fedora specific patch to fail.
    
    To workaround this problem, we ignore the error when building
    libdivecomputer with pty support enabled.

--

    Correctly detect a device without any dives.
    
    If the dive computer has not recorded any dives yet, the profile pointer
    isn't valid and contains the default value 0xFFFFFFFF. There is no need
    to return an error in this case.

--

    Fix the layout for the Oceanic Atom 1.0.
    
    The profile ringbuffer starts already at address 0x0440 instead of
    0x0A40. The logbook ringbuffer is therefore a bit smaller too.

--

    Add extra debug information to the error messages.
    
    With the extra debug information it's easier to investigate the
    underlying problem, without needing a debugger.

--

    Add a workaround for a missing initial gas mix.
    
    In some rare cases, the initial gas mix contains the value 0xFF. This
    value is obviously outside the expected range (1-5), and therefore
    causes the parsing to fail. It's not really clear how this can happen.
    
    As a workaround for the fatal error, we now ignore the invalid value and
    simply proceed without a gas mix.

--

    Fix the salt water conversion.
    
    The dive computer records the raw absolute pressure. To convert this
    pressure value into a depth, we need to divide by the salinity factor,
    not multiply!

--

    Use an output parameter for the number of bytes.
    
    With the number of bytes returned separately from the error code, we can
    immediately return the correct error code.

--

    Use the GCC printf format attribute.
    
    This enables the compiler to check the arguments against a printf style
    format string in all calls to the logging functions.

--

    Prefer the C99 identifier for the function name.
    
    The GCC 5 compiler with -Wpedantic enabled generates warnings for the
    non-standard predefined identifier __FUNCTION___. These warnings can be
    avoided by using the C99 identifier __func__ instead.

--

    Add support for the new OSTC logbook format.
    
    With the new logbook format version 0x24, the OSTC no longer stores the
    date/time at the end of the dive, but at the start of the dive.

--

    Fix the dive mode for the Galileo Trimix.
    
    Parsing the gas mixes has been implemented a while ago, so this check is
    no longer neccessary.

--

    Implement gas switches for the Hollis TX1.

--

    Implement ndl/deco support for the Hollis TX1.

--

    Implement ndl/deco support for the Tusa Zen.

--

    Fix the temperature for the Tusa Zen.

--

    Cache the parser data internally.

--

    Convert the internal tank id to an index.
    
    The internal Uwatec tank id should be converted to the libdivecomputer
    tank index. If there is no corresponding tank, the tank pressure samples
    are dropped for the following reasons:
    
    Some models appear to record an absolute tank pressure sample, even if
    there is no pressure sensor attached to the corresponding tank. In this
    case only the tank index changes. The sample value simply retains the
    last pressure of the previous tank. Since we don't have any real
    pressure data, dropping those samples is fine.

--

    Handle a libusb timeout as a non fatal error.
    
    Dives are downloaded using bulk transfers with an 8K buffer. Normally
    the 2 second timeout is more than sufficient, and the timeout should
    never expire, unless there is some serious communcation problem. But
    nevertheless, users are reporting timeouts for dives having a length
    that is an exact multiple of the USB packet size (64 bytes). In that
    case, libusb reports a timeout with an non-zero amount of bytes
    received. Despite the timeout, the received data contains a complete
    dive.
    
    I suspect libusb is somehow unable to determine whether the transfer is
    complete and therefore waits until the timeout expires. For transfers
    that are not a multiple of the USB packet size, the end of the transfer
    is indicated by the last incomplete packet. This is not the case if the
    length is an exact multiple of the USB packet size. This problem is
    usually solved by sending a zero-length packet. Maybe the USB stack of
    the Cobalt is not sending such a zero-length packet?
    
    Atomics will address the problem with a Coblat 2 firmware upgrade, that
    will simply append two zero bytes if the length is a multiple of 64
    bytes. As a workaround for older firmware versions, we ignore the
    timeout and process all received data. This shouldn't have any
    disadvantages. An incomplete dive, for example due to a real timeout,
    will now be detected by means of the minimum length and/or the checksum.

--

    Mention Shearwater Nerd alongside with Petrel 2
    
    Signed-off-by: Robert C. Helling <helling@atdotde.de>
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Add tank size reporting for Suunto EON Steel
    
    Sadly the data we get from the EON Steel is a bit of a mess.
    It doesn't really tell us if the data is metric or imperial (it always sends
    both wet volume and working pressure). And in imperial mode the Suunto
    engineers seem a bit confused. The pressure given (entered on the dive computer
    in psi) is sent to us not in bar, not in atm... it's "something". As far as I
    can tell it's a constant factor of 1.00069182389937 different from bar.
    And the wet sizes are a bit to small to get the cuft size the user entered.
    But instead of trying to guess and fix the mess, we just pass it through...
    
    So this is somewhat useful, but not really what most users will want.
    
    Linus started this commit with a few lines that parsed the right values out of
    the data stream from the Suunto EON Steel. I then added the implementation of
    the infrastructure to convert the raw data and report it back to the caller.
    
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Cleanup and correct CCR detection
    
    == has precedence over & and would have needed some parenthesis.
    
    Instead of that, this moves that code into the block below which
    already contains a correct CCR check.
    
    Signed-off-by: Anton Lundin <glance@acc.umu.se>
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Use hidapi for Suunto EON Steel on Mac
    
    libusb on Mac doesn't support HID devices.
    
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Mention Shearwater Nerd alongside with Petrel 2
    
    Signed-off-by: Robert C. Helling <helling@atdotde.de>

--

    Add deco model info strings to shearwater parser
    
    This adds two strings describing the deco model information of the dive.
    
    Signed-off-by: Anton Lundin <glance@acc.umu.se>
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Convert ndl/deco time to seconds.

--

    Use the correct memory layout and packet size.

--

    Add support for the Mares Smart Apnea.
    
    The Mares Smart Apnea uses a different data format than the regular
    Smart, because it records not only a summary of each freedive in the
    session, but also a full depth profile.
    
    Because both the regular Smart and the Smart Apnea have the same model
    number (0x10), another way to distinguish the two variants is needed.
    Therefore, the Smart Apnea gets a modified model number, with one of the
    higher bit set. The actual type is detected from the contents of the
    version packet.
    
    The new Smart Apnea is also capable of recording multiple samples per
    second (e.g. 2, 4 or 8). But since our smallest unit of time is one
    second, we can't represent this, and the extra samples will get dropped
    for now.

--

    Fix the gas switches for Galileo Trimix.
    
    The Galileo Trimix supports up to 10 tanks and gas mixes. However, the
    existing alarm based gas switch events have only 2 bits available, and
    can support at most 4 gas mixes. Therefore, the trimix variant stores
    another 4 bit value in the second alarm byte.
    
    For the first three gas mixes (and possibly also the fourth), both alarm
    bytes appear to be always set to the same value. For the higher mixes,
    the value in the first alarm byte is always zero. This doesn't cause any
    problems, because in the data stream the second alarm byte is stored
    after the first one, and our final value is always the last one.
    
    The non-trimix variant also has the second alarm byte, but the gas mix
    bits appear to be always zero. In order to avoid taking this zero as the
    final value, a separate table is used for the trimix variant.

--

    Add support for the tank field.
    
    The air integrated uwatec aladin models do record the total consumption,
    and not the begin/end pressure. Returning the total consumption as the
    begin pressure, combined with a zero end pressure is strictly speaking
    not correct, but it still provides useful information.

--

    Ignore disconnected O2 sensors.
    
    Even if there are no O2 sensors connected (for example in auto or fixed
    setpoint mode), the device records a ppO2 sample with all three values
    set to zero. Such samples are now ignored, as if there was no ppO2
    sample present.
    
    Reported-by: Anton Lundin <glance@acc.umu.se>

--

    Add support for logging I/O operations.
    
    The Atomics Cobalt backend uses libusb directly, without going through
    an internal I/O layer that support logging. Therefore the logging needs
    to be done in the backend itself.

--

    Fix dc_serial_native_open return check for Shearwater family
    
    The dc_serial_native_open method doesn't return -1 on failures.
    The failure errors can be DC_STATUS_INVALIDARGS, DC_STATUS_NOMEMORY,
    DC_STATUS_IO.
    
    Therefore we should check if the returned value is equal to
    DC_STATUS_SUCCESS and pass it further.
    
    Signed-off-by: Claudiu Olteanu <olteanu.claudiu@ymail.com>
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Fix compile errors on Mac
    
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Fix the layout for the Oceanic Pro Plus 3.
    
    The logbook ringbuffer starts at address 0x03E0 instead of 0x240. Since
    none of the other models uses the same address, a completely new layout
    structure is necessary.

--

    Improve the detection of unused tanks.
    
    The begin/end pressure for unused tanks is normally zero. But I noticed
    that in some cases both pressure values are stored as 0xFFFF. Since that
    corresponds to a pressure of 511.99 bar, this is most likely some
    special magic value, and not a valid pressure.
    
    Tanks where either the begin or end pressure is 0xFFFF are now ignored
    too.

--

    Use custom set_timeout callback for Shearwater family
    
    Signed-off-by: Claudiu Olteanu <olteanu.claudiu@ymail.com>
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Use the custom set_timeout callback for HW_OSTC 3 family
    
    Signed-off-by: Claudiu Olteanu <olteanu.claudiu@ymail.com>
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Add set_timeout callback for serial custom implementation
    
    The new callback will be usefull when we will implement the support
    for Windows. The implementation of native serial set_timeout method
    uses a HANDLER on Windows and we will use the WinSock2 API which has
    a socket descriptor.
    
    Signed-off-by: Claudiu Olteanu <olteanu.claudiu@ymail.com>
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Add new functions to list of exported symbols
    
    This is required in order to build those new public functions into the
    shared library.
    
    Signed-off-by: Gaetan Bisson <bisson@archlinux.org>
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    EON Steel: expose the gas switch cylinder in the "flags" field
    
    This seems to be the simplest extension to the SAMPLE_EVENT_GASCHANGE2
    format: the "value" remains the oddly encoded gas mix, but the "flags"
    value (if non-zero) now contains the actual cylinder number we switch
    to.
    
    This will need a trivial patch to subsurface to take advantage of the
    new data too.  But then we can actually distinguish between cylinders
    that have the same gas mix.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Add EON Steel personal adjustment parsing
    
    Suunto calls it "Conservatism" in the dump, but "Personal adjustment" in
    at least some of the documentation. That's what we expose it as.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Add EON Steel dive mode and transmitter ID information
    
    This adds the divemode name (Nitrox, Trimix, Gauge, or whatever custon
    name) and the transmitter ID as extra string information when
    downloading from the EON Steel.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Suunto EON Steel: populate various string data
    
    The EON Steel saves the dive computer firmware versions etc per dive,
    which is really nice for upgrades: old dives done with older firmware
    still show the firmware at the time of the dive.  That, in turn, is nice
    because we can use it for a reliable dive ID - dive time with serial
    number etc.
    
    This uses the new DC_FIELD_STRING model to feed the hw/sw information to
    the application, since we need the parser to access it.  It also returns
    battery state and deco model information.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Implement custom open device method for SHEARWATER family
    
    Create a custom open method for SHEARWATER family.
    This method can be used to pass a reference to a dc_serial_t
    structure. In this way the applications can implement their
    own implementation for a serial communication and set their
    callbacks for the basic serial functions.
    
    Signed-off-by: Claudiu Olteanu <olteanu.claudiu@ymail.com>
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Use the dc_serial_t structure in SHEARWATER family
    
    Use the new structure in the SHEARWATER family implementation.
    This patch opens a native serial device and use it
    for the serial communication.
    
    Also the patch uses the set of callback functions saved in the
    dc_serial_t structure.
    
    Signed-off-by: Claudiu Olteanu <olteanu.claudiu@ymail.com>
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Implement custom device open method
    
    This method can be used by external applications to open a
    device and to pass their custom implementation for the
    serial communication.
    
    Signed-off-by: Claudiu Olteanu <olteanu.claudiu@ymail.com>
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Implement custom open method for HW OSTC 3 family
    
    Create a custom open method for HW OSTC3 family.
    This method can be used to pass a reference to a dc_serial_t
    structure. In this way the applications can implement their
    own implementation for a serial communication and set their
    callbacks for the basic serial functions.
    
    Signed-off-by: Claudiu Olteanu <olteanu.claudiu@ymail.com>
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Use the dc_serial_t structure in HW OSTC family 3
    
    Open a native serial device and use it in the HW OSTC3
    implementation.
    
    This patch replaces the old serial structure with the
    new one, which can be used for custom serial implementations.
    
    Signed-off-by: Claudiu Olteanu <olteanu.claudiu@ymail.com>
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Create a generic way to represent any type of serial communication
    
    Add a structure which holds references to basic operations
    on a serial communication. This can be used to pass a set
    of function pointer callbacks in order to create a custom
    implementation for serial communication.
    
    Add a generic structure to represent the needed information
    for a serial communication.
    
    Implement the initialization method where the user can
    pass a set of function pointer callbacks and set some
    custom data for the serial device.
    
    Create open method for the native serial implementation.
    
    Signed-off-by: Claudiu Olteanu <olteanu.claudiu@ymail.com>
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Extend the transport enum descriptor for serial communication
    
    Add a new transport type which can be used to identify
    Bluetooth serial communication.
    
    Signed-off-by Claudiu Oleanu <olteanu.claudiu@ymail.com>
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Correct firmware version string from OSTC's
    
    The format string was incorrect, producing firmware numbers as 3.2
    instead of 3.02 as is the current OSTC firmware version.
    
    This was reported via hw's forum:
    http://forum.heinrichsweikamp.com/read.php?2,14550,14552
    
    Signed-off-by: Anton Lundin <glance@acc.umu.se>
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Predator: don't report PPO2 unless in CC mode
    
    Sending this in OC mode is redundant and might confuse applications that
    assume they only get PPO2 data in CC mode.
    
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Don't report errors if we can't set serial mode
    
    That's just silly and breaks using the simulator.
    
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Add deco model info strings to hw parser
    
    Signed-off-by: Anton Lundin <glance@acc.umu.se>
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Make it easier to detect our branch of libdivecomputer
    
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Mark a library built from our branch as such
    
    This way it will be obvious when people report their libdivecomputer
    version that they are using our branch
    
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Fix suunto serial numbers
    
    libdivecomputer has already done the "byte to decimal" conversion.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Support serial number for Suuntu Vyper2 family of devices
    
    We have the correct firmware in the devinfo, but that's the firmware the
    dive computer is on NOW, not necessarily the firmware it was using when
    recording the dive.
    
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Support firmware and serial number for Shearwater Petrel
    
    This should work with the Predator as well.
    
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Support serial number as DC_FIELD_STRING on atom2 backend
    
    This has been verified with a few of the models, it needs much more
    testing to make sure this is generally correct.
    
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Add support to return serial number to OSTC devices
    
    This data isn't per dive, but it makes sense to return it here as a
    string (we already return it as unsigned int in the devinfo event after
    opening the device).
    
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Pass the serial number from the devinfo to the OSTC parsers
    
    This way we can analyze the data in the parser and return it to the
    application.
    
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Support FW Version on OSTC devices
    
    And add battery voltage and desat for the Frog.
    
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Add DC_FIELD_STRING support to OSTC parser
    
    Just support a few of the most useful values. There are several more we
    could and should add.
    
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Add DC_FIELD_STRING support to Shearwater Petrel parser
    
    Just support a few of the most useful values. There are several more we
    could and should add.
    
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Add DC_FIELD_STRING support to Atomics Aquatics Cobalt parser
    
    Just support a few of the most useful values. There are several more we
    could and should add.
    
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    parser: add DC_FIELD_STRING field type for parse-time information
    
    This can be used to return almost arbitrary information to the dive log
    application at dive parse time, by returning a number of strings (with a
    descriptor) for dive state.
    
    NOTE! The strings are supposed to be human-readable, so that the dive
    log application can just show them unedited - and without understanding
    them - to the user, together with the description.  So if your dive
    computer supports returning a battery voltage, for example, you can
    return it as a
    
      { "Voltage", "4.449V" }
    
    descriptor/value string pair, and the application could then put these
    string pairs together and show (somewhere) an informational line like
    "Voltage: 4.449V" along with the other information you return.
    
    Some dive log applications migth recognize particular descriptor strings
    and use them specially to fill in other information (ie serial numbers,
    weight and suit information etc), but in general the interface is very
    much meant to be informational free-form for a human user.
    
    So do *not* use this interface to encode things that are not human-
    readable.  Serial numbers or version information that is meaningful to
    humans are fine. But random encoded data structures are not.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Fix a bug in the tank id.
    
    Due to a bitshift with the wrong number of bits, the tank id was always
    zero for the Uwatec trimix firmware.

--

    Add support for the tank field.

--

    Disable all gas mixes in gauge/freedive mode.

--

    Add support for ppO2 samples.
    
    When the PPO2 sample was introduced, we didn't take into account the
    fact that rebreathers usually support multiple O2 sensors. The HW OSTC
    supports for example three sensors. In order to support multiple values,
    without having to introduce a new data structure with an additional
    sensor id field, we simply relax the assumption of allowing only one
    DC_SAMPLE_PPO2 value per sample. Applications that are not prepared for
    multiple values, will automatically use only one of them (probably the
    last one).

--

    Add support for the new compact logbook headers.
    
    With firmware version 1.84 (beta), a more compact logbook header is
    introduced. Due to their smaller size (16 vs 256 bytes), the total
    amount of data that needs to be transferred is much smaller (4K vs 64K).
    Therefore, downloading these compact headers is roughly 16 times faster
    then downloading the full headers.
    
    For backwards compatibility with older firmware versions, there is an
    automatic fallback to the full logbook headers.

--

    Add support for setpoint samples.
    
    The setpoint samples are only enabled for closed circuit dives.

--

    Add support for the dive mode.
    
    The Shearwaters store the current dive mode for each sample, and not one
    single value for each dive. Therfore we need to process all samples. If
    there is at least one sample marked as closed circuit, we classify the
    dive as a closed circuit dive. Otherwise we default to open circuit.

--

    Cache the sample and header/footer size.

--

    Prevent a zero length memory allocation.
    
    In theory this shouldn't be possible, but it doesn't hurt to check the
    length explicitely.

--

    Add an exception for devices without a logbook ringbuffer.
    
    For devices without a logbook ringbuffer, such as the Oceanic Veo 1.0
    and the Aeris XR-1 NX, the ringbuffer begin and end are identical. In
    this case, the changes in the previous commit will always result in a
    fatal error due to an invalid ringbuffer pointer. To avoid the error, we
    exit before trying to use the pointers.

--

    Handle invalid logbook pointers as a fatal error.
    
    Until now, an invalid logbook pointer was silently ignored and handled
    as an empty ringbuffer. But this hides real errors, which is worse than
    failing if no dives are present. Trying to download dives from an empty
    device should be a rather uncommon scenario anyway.

--

    Remove the event bytes from the vendor sample.
    
    Now that we are able to parse the event bytes properly, there is no need
    to pass the raw event bytes to the application.
    
    In the current implementation, the vendor event was broken for devices
    with multiple event bytes anyway. Because we deliver all event bytes at
    once, the application doesn't know which bytes contain a valid value
    (originating from the profile data) or just a dummy zero value.

--

    Add support for parsing the event bytes.
    
    Right now only gas switch and bookmark events are supported, because
    none of the other uwatec events can easily be mapped onto the existing
    libdivecomputer events. But the basic infrastructure for supporting more
    events is in place now.

--

    Use the static libgcc option only for Windows.
    
    For obvious reasons, the -static-libgcc linker option is not supported
    by non gcc compilers, like clang. Since we only need this option when
    building Windows DLL's, we can easily avoid the problem with a
    conditional on the mingw compiler.

--

    Fix the temperature for the Aeris Manta.
    
    The Aeris Manta does not store the temperature as a delta value, but as
    an absolute value (at offset 6).

--

    Add support for the Shearwater Petrel 2.
    
    The Shearwater Petrel 2 uses exactly the same communication protocol as
    the original Petrel. Therefore the new model has always been supported
    out, and we only need to add the new model to the list of supported
    devices.

--

    Add support for the Galileo Trimix.
    
    For the trimix version, the gasmix and tank information is no longer
    stored in the header. It's now stored in a special sample at the end of
    the dive.

--

    Use a fixed id for the uwatec deco mix.
    
    The id of the uwatec deco mix is always 2, even for devices which
    support maximum two gas mixes. Strictly speaking, this change is more
    correct than commit 4fd825cdac341a2d4a1366c6deb7d4a71bbdf94d, allthough
    in practice they are equivalent.

--

    Fix the gas switches for galileo devices.
    
    The bitmask for the gas mix bits was wrong. With the new mask we also no
    longer have to disable the alarm based gas switches for the Meridian and
    Chromis.

--

    Fix the logic to skip disabled gas mixes.
    
    Originally I assumed it's not possible to enable a gas mix if the
    previous gas mix has already been disabled. However, this assumption
    turns out to be wrong.  For devices with support for 3 gas mixes, it's
    possible to enable only the first and the third gas mix, and leave the
    second gas mix disabled.
    
    This is fixed by checking all gas mixes, instead of aborting once the
    first disabled gas mix has been found. Due to this change the uwatec gas
    mix id's are no longer sequential and need to remapped to the
    corresponding internal array index.

--

    EON Steel: don't report airtime remaining as a libdivecomputer event
    
    It looks like the SAMPLE_EVENT_AIRTIME is actually meant for just
    airtime warnings (as in the dive computer warning about low air).
    
    If we ever care, I think we'd need to add a new interface for this.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    EON Steel: fix up missing gastime/ventilation parsing
    
    Now that I actually have dives with the new format and with air
    integration, I could test it all out and noticed some missing pieces.
    
    This adds parsing for gastime and ventilation events (although we don't
    *do* anything with the ventilation data, I have no idea what the number
    means).
    
    Also, this fixes an annoying warning message problem, which caused these
    missing events to cause a SIGSEGV rather than just a bening warning.
    Stupid bug, and only went unnoticed because libdivecomputer isn't built
    with format string warnings.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    EON Steel: convert to dynamic sample parsing
    
    This gets rid of the fixed sample indexes and the hardcoded grouping
    code, and replaces them with proper parsing of the type descriptions.
    
    This should mean that the new Suunto firmware v1.1.15 is now fully
    supported by libdivecomputer.
    
    There are still parts of the event description that we should really
    parse better, notably the 'enum' descriptions of what the different
    enumerated types mean, because it looks like those will change too.  But
    that is not nearly as important as getting the basic infrastructure done
    for the core sample types.
    
    Almost accidentally, this also ends up now parsing the compass heading
    event.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

--

    EON Steel: start moving away from "fixed" fields
    
    I was initially fooled into thinking that the field type numbers have
    some meaning: the types didn't change if the upper byte of the type
    number was zero.  So I assumed that meant "fixed".
    
    But the most recent firmware update made clear that no, they aren't
    fixed, and the upper byte of the type must be some other thing.
    
    This moves some more of the parsing over to comparing the strings,
    rather than looking at the type index.  It still leaves the sample data
    alone, and I really want to do something more efficient than comparing
    the type descriptor string for that, but at least the dive header fields
    are now just comparing strings.
    
    The actual marshalling that Suunto uses also describes the encoding, and
    it's all ignoring that for now.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

--

    EON Steel: empty descriptor lines are ok
    
    Suunto's new v1.1.15 firmware ends up terminating some final descriptor
    lines with a newline, rather than just using newlines as separators.  So
    the last newline may not be followed by further data, but simple be the
    end of the string.  Accept that case.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

--

    Suunto EON Steel: populate dive surface pressure
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    suunto eon steel: clean up size limits and error reporting
    
    This is some small cleanup after the whole reply size rewrite.  It
    further improves on the error log reporting a bit, and it undoes the
    "read exact size" thing introduced in "suunto eon steel: fix file
    reading special case", because it is no longer necessary.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    suunto eon steel: be more explicit about transfer sizes
    
    When reading data from the EON Steel, we'd generally continue reading
    until we saw that a response was done by seeing a packet that wasn't
    full.
    
    That broke for the case of the data boundary matching the packet
    boundary, fixed by the commit "suunto eon steel: fix file reading
    special case".
    
    However, that commit only fixed it for the case of reading a file, where
    the result has a size that is known up-front.  And most other situations
    really don't matter, because the result size is fixed and fits in a
    single packet, so it all works.
    
    However, there are still a few cases that could trigger the problem,
    notably reading the directory contents.
    
    So change the send_receive() logic to actually read the expected size
    from the receive header in the first packet of the reply.  This means
    that we need to re-organize the packet reception code a bit, but the end
    result is that we are much more careful about data sizes,
    
    This also changes the packet logging to be much more readable, by
    logging just the actual data, and not the (uninteresting) per-packet
    header, or the stale data at the end of the packet.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    suunto eon steel: fix file reading special case
    
    The "receive_data()" function would continue to try to read packets as
    long as the previous packet was full-sized, but with just the right size
    of file and the right chunking, the file might end at a packet boundary.
    Then receive_data() would try to read more data, which fails - there are
    no more packets, despite the last packet being full.
    
    This never triggered for me, but Robert Helling forwarded a data dump of
    a filure to read a dive due to this.
    
    Since I don't trigger this case, I can't really test it, but I did check
    that the new "stop early" logic works for me (ie never triggers ;).
    
    Reported-by: Robert C. Helling <helling@atdotde.de>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Update the symbols file.

--

    Update the msvc project file.

--

    Avoid a run-time dependency on the libgcc dlls.
    
    When compiling a 32bit dll with the mingw-w64 compiler, some 64bit
    integer arithmetic operations are implemented using functions from
    libgcc (e.g. __divdi3 and __moddi3 from libgcc_s_sjlj-1.dll). This
    unexpected dependency is inconvenient for applications.
    
    The run-time dependency can be avoid by linking statically.

--

    Remove removed function from public header
    
    reefnet_sensusultra_device_set_maxretries was killed off back in v0.3,
    but was still lying around in the public header.
    
    Signed-off-by: Anton Lundin <glance@acc.umu.se>

--

    Use the correct layout for the Oceanic Geo.
    
    At least one Oceanic Geo is unable to download the last memory page.
    However, another device with an older firmware version (version 1D
    instead of 2B), does not have this problem. So in theory the correct
    layout depends on the firmware version.
    
    But since the profile ringbuffer also appears to end at the address
    0xFE00 instead of 0x10000, we'll never need to download that last page
    in practice. Thus we can be lazy and simply use a single layout for all
    firmware versions. The only drawback is that the last page might be
    missing when downloading a full memory dump.

--

    Fix the ringbuffer start address for the Aeris F10.

--

    Implement tank pressure samples for the Nemo Air.
    
    The tank pressure is stored every third sample as a delta value.

--

    Implement the tank field for the Nemo and Puck Air.

--

    Emit the devinfo event before using the fingerprint.
    
    Applications are supposed to lookup the fingerprint when the devinfo
    event is emitted. For the Uwatec Smart devices, the fingerprint is the
    raw device timestamp. But because this timestamp was already used to
    initialize the command before emitting the event, an outdated value
    (typically the default value of zero) was used instead of the correct
    one set by the application.

--

    Use the UTC offset of the device.
    
    For devices with timezone support, use the UTC offset stored by the
    device, instead of the current timezone of the host system.

--

    Add support for the salinity field.

--

    Adjust the depth for salt water dives.
    
    The Uwatec dive computers report the depth based on fresh water. Salt
    water dives need a correction to take into account the salinity. There
    is only a fresh/salt water flag present in the data, but Uwatec appears
    to assume a salinity factor of 1.025.

--

    Add support for the new tank fields.

--

    Fix the size of the dive header.
    
    The size of the dive header is one byte smaller: 0x32 instead of 0x33
    bytes. Because we were expecting a larger packet, this bug caused the
    downloading of the dive headers to fail. I'm surprised no one noticed
    this mistake before.

--

    Fix the CNS sample value.
    
    The CNS value in the public api is reported as a fraction, and not a
    percentage.

--

    Add support for CNS samples.

--

    Convert the CNS value to a percentage.

--

    Remove the temperature and pressure samples.
    
    With the new temperature and pressure field, artificially injecting the
    temperature and pressure info from the header into the samples is no
    longer necessary. Applications will typically expect a real temperature
    or pressure profile, and not a few discrete points.
    
    The two surface samples (with zero depth) at the begin and end of the
    dive are kept for now, to support events that occur at the surface.

--

    Implement the tank and temperature fields.

--

    Use a variable for gauge mode.
    
    This makes the code a little bit more readable, without needing any
    comments.

--

    Move all caching code to a common function.

--

    Apply the ghost event fix for the Suunto Solution.
    
    I forgot to include the Suunto Solution part in the previous commit.
    
    In theory the Suunto Solution (and Eon) can't be affected by the ghost
    event bug. All possible events bytes are already exhausted, and
    therefore unknown events are impossible. But applying the fix anyway
    doesn't hurt and keeps the code consistent with the other backends.

--

    Eliminate ghost events caused by unknown events.
    
    The newest Suunto models (e.g. D4i, D6i, D9tx and DX) support a few
    additional events (type 0x15 and higher), which are not supported yet
    because their interpretation isn't known.
    
    Due to a nasty bug, these unkown events result in "ghost" events. When
    such an unknown event is encountered, the sample type field isn't set
    explicitely. Therefore it simply retains the value from the previous
    sample, whatever that might be. If the previous sample happens to be an
    event as well, then the unknown event will show up as a duplicate event.
    But if the previous sample is not an event, then the resulting event
    type is undefined.
    
    This is fixed by always resetting the event type explicitely. Those
    unknown events are also suppressed now and no longer delivered to the
    application.
    
    Allthough I haven't observed this bug with the Suunto Eon and Vyper,
    they could be affected too.

--

    Parse the profile to retrieve the manual gas mixes.
    
    The DC_FIELD_GASMIX api doesn't support the 6th manual gas very well.
    Manual gas mixes are either not taken into account at all (OSTC3), or
    only the last value is returned (OSTC2).
    
    We now parse the profile data in order to retrieve all the manual gas
    mixes too. Note that manual gas mixes are only included when they are
    actively used during the dive. This is a small change in behaviour for
    the OSTC2.
    
    To simplify the implementation, there is an upper limit of 10 manual gas
    mixes (or 15 gas mixes in total). This is an arbitrary choice, which
    should be more than sufficient in practice. If it turns out to be too
    small, we can always increase the number, or even make it truely
    unlimited.

--

    Cache the fixed gas mixes too.

--

    Cache the header data internally.

--

    Cache the header and footer size internally.

--

    Cache the gas mixes internally.

--

    Dump function for the OSTC3
    
    This adds a dump function for the ostc3 series computers. This function
    dumps the whole external eprom, that contains the dive-headers and the
    dive data.
    
    Signed-off-by: Anton Lundin <glance@acc.umu.se>

--

    Add support for the temperature field.

--

    Disable gas change events except for the intial mix.
    
    For the IQ-700, the existing code for the active gas mix always results
    in an out-of-range gas mix index. The index of the active gas mix is
    probably stored in another bit. As a temporary workaround, we simply
    assume the active gas mix is always the first gas mix. This should
    already produce correct results for dives with only single gas mix.

--

    Add support for the Tusa IQ-700.
    
    The Tusa IQ-700 is very similar to the other Seiko based models. The
    most important change is that due the smaller amount of memory (8K vs
    32K), the logbook entries are only 1 byte large instead of two bytes.

--

    Replace hardcoded constants with a layout descriptor.

--

    Fix the ringbuffer start address.
    
    Currently the profile ringbuffer starts at the base address 0x4000, but
    I believe the real start is one 0x20 byte page earlier, at 0x3FE0. I
    have two reasons for this:
    
    1. To locate the start of a dive, we always have to substract one page
    from the pointers in the logbook ringbuffer. With the new base address,
    they would point directly to the start of the dive, which makes a lot
    more sense.
    
    2. When comparing the divetime as stored in the header with the one
    obtained by counting the number of samples, they always match except for
    dives that span the ringbuffer wrap point. If those extra 0x20 bytes are
    included, the counts do match again.
    
    Unfortunately, this change breaks the assumption that the ringbuffer is
    aligned to packet boundaries. As a workaround, we define a virtual
    ringbuffer that is slightly larger than the actual ringbuffer, but
    properly aligned. Data outside the real ringbuffer is downloaded and
    then immediately dropped.

--

    Align all read operations to packet boundaries.
    
    Packets have a fixed size of 0x80 bytes, while a single page is only
    0x20 bytes long. Thus each read operation always returns 4 pages at
    once. Now, if the end-of-profile pointer is not nicely aligned on a
    packet boundary, then the download algorithm won't arrive exactly at the
    start address of the ringbuffer, because the ringbuffer is properly
    aligned. The consequence is that we won't even notice we reached the
    ringbuffer boundary and happily continue reading outside the ringbuffer.
    Oops!
    
    This is fixed by aligning the end-of-profile pointer, which guarantees
    that all read operations are now nicely aligned to packet boundaries.

--

    Send the command and read the echo byte by byte.
    
    When trying to send a command, the first attempt always fails. We
    receive the echo, but no data packet. A second attempt usually works,
    but we always get back the same data packet. That's cleary wrong.
    
    Now, when comparing the data packets with those of the Tusa application,
    I noticed something very interesting. When we request the first packet
    (page 0x0000), we get:
    
      W: 520000
      R: 520000
      R: 00880124056202000250002890470824...19202720002000200020002000204145
    
    The Tusa application also request this page, but the response is
    completely different:
    
      W: 520000
      R: 520000
      R: 22182224222322092203220522112210...0000000000f021fc0000000000000045
    
    The response we get is identical to the response that the Tusa
    application gets for page 0x0052:
    
      W: 520052
      R: 520052
      R: 00880124056202000250002890470824...19202720002000200020002000204145
    
    The only difference here is the echo of the command. But the echo should
    be ignored, because it's generated by the pc interface, and not send by
    the dive computer. This is easily verified by the fact that we always
    receive an echo, even without a dive computer connected (e.g. only the
    pc interface).
    
    Notice how the command type (first byte) and page number (last byte) are
    identical (0x52) for this request! I suspect that somehow the command
    type ends up being interpreted as the page number. That would explain
    why we're always getting the same response: as far as the device is
    concerned we're always requesting page 0x52. This is probably also
    related to the fact that the device doesn't respond after the first
    request. It's not impossible that if the first command wasn't received
    correctly and we resend the command, the device receives something that
    contains parts of both attempts.
    
    By sending the command and reading the echo byte by byte instead of all
    at once, the above problem disappears.

--

    Wait after changing the serial line settings.
    
    Without the delay, the communication immediately fails. We receive the
    command echo, but not the actual data packet. I suspect the device is
    still be busy with the initialization and needs a bit more time before
    it's ready to accept a request.

--

    Resend the command on failures.

--

    Relax the detection of the last dive.
    
    We received data from a Mares Smart where the existing heuristics to
    detect the last dive are not sufficient. The very last check, where the
    calculated and stored are compared results in a fatal error.

--

    Add support for the Mares Smart.
    
    The Mares Smart supports not only scuba diving, but also freediving.
    Because the freedive data format is fundamentally different from the
    regular dives, being able to detect the type of dive in advance is very
    important. For that reason, Mares moved the 4 bytes containing the dive
    mode and number of samples from the beginning of the header to the end.
    Except for this 4 byte shift, there are no changes for regular dives.
    
    For the freedives, there is no real profile available, only a summary of
    the entire freedive session. In an attempt to workaround this
    limitation, we generate a pseudo profile in exactly the same (but ugly)
    way as is done in the Mares Nemo backend.

--

    Add some additional DiveSystem iDive models.
    
    These are all the models listed in the official documentation from
    DiveSystem. They all share the same communication protocol and data
    format.

--

    Add support for two new OSTC3 variants.
    
    The new OSTC3 (model 0x1A) is identical to the existing OSTC3, except
    that the usb interface has been replaced with a bluetooth interface.
    
    The new OSTC2 (model 0x1A) will retain the look and feel of the OSTC 2C
    (e.g. plastic housing, piezo buttons and rechargable battery), but under
    the hood it will use the same firmware as the OSTC3. It will also have a
    bluetooth interface.

--

    Disable alarm based gas switches for the Meridian.
    
    The gas mix index stored in the alarm bytes is occasionally out of range
    (larger than the number of available gas mixes). The index refers to one
    of the disabled gas mixes. Since those are excluded now, this results in
    a fatal error instead of a switch to a nonsense gas mix.
    
    To workaround this problem, the alarm based gas switches are disabled
    until we figure out how to parse them correctly.
    
    The Chromis is almost identical to the Meridian, and will probably need
    the same workaround. Although I don't have any data to confirm this,
    let's just keep the two in sync.

--

    Implement the dive mode field.
    
    Dives with all gas mixes disabled are flagged as gauge dives in the
    Uwatec application.

--

    Ignore disabled gas mixes.
    
    Gas mixes are disabled by setting their oxygen percentage byte to 0x00.
    This is clearly an invalid gas mix, and it makes no sense to return it
    back to the application.
    
    It seems the device doesn't allow you to enable a gas mix if the
    previous gas mix has already been disabled. Therefore we can simply stop
    parsing the gas mixes once the first disabled gas mix has been found.

--

    Uwatec Aladin Tec 2G supports maximum 2 gas mixes.
    
    According to the technical specifications, the Uwatec Aladin Tec 2G
    supports maximum two gas mixes. The data appears to confirm this,
    because the extra third gas mix always contains unrealistic oxygen
    percentages.
    
    However, I came across some data containing gas switches to the third
    gas mix. The interesting part is that according to the Uwatec
    application, this is actually a switch to the second gas mix in the
    header. One possible explanation is that for models with up to 3 gas
    mixes, they are labelled respectively "bottom", "travel" and "deco" mix.
    But the documentation for the Aladin Tec 2G only refers to the bottom
    and deco mix. So it might be that internally the index of the deco mix
    is always the 3th mix, regardless of whether a travel mix is supported
    or not.
    
    If the only allowed values for the gas mix index are 0 (for the bottom
    mix) or 2 (for the deco mix), then manually remapping the deco mix is
    equivalent with ignoring the lowest bit. This has the advantage that the
    required bitmasks and shifts are no longer different from those for the
    other models.

--

    Cache the parser data internally.

--

    No gas mix support for the Galileo Trimix yet.
    
    For the Galileo Trimix we don't know yet where and how the gas mixes are
    stored. Right now, we just pretend there are no gas mixes available,
    which is misleading.

--

    Fix the Galileo trimix detection.
    
    Originally, I assumed that the trimix firmware update changed the model
    number from 0x11 (Galileo) to 0x19 (Galileo Trimix). But that assumption
    appears to be wrong because I received data from a Galileo with model
    number 0x11, but with the trimix data format. Another explanation might
    be that the trimix data format is not specific to the trimix firmware.
    
    Anyway, this is easily fixed by treating both models identically.

--

    Disable tank pressure samples for the Aeris Manta.
    
    The Aeris Manta is yet another non-air integrated model that doesn't set
    the initial tank pressure to the magic value 10000.

--

    Add support for the new hardware descriptor.
    
    The latest firmware v1.75 introduced a new hardware descriptor byte to
    identify the different models based on their hardware features. This new
    hardware descriptor is now used as the libdivecomputer model number. For
    older firmware versions, which do not support the descriptor yet, there
    is an automatic fallback to the previous method based on the serial
    number.

--

    Detect and report unsupported commands.
    
    When trying to send an unsupported command, the ostc will simply ignore
    the command. Instead of echoing the command byte back, the ostc will
    immediately send the ready byte, to indicate it's ready to receive the
    next command. We can use this to detect unsupported commands, because
    the ready byte is a reserved value and guaranteed to never be a valid
    command byte.
    
    Normally we don't send invalid commands. But newer firmware version can
    always introduce new commands to support new features. To maintain
    backwards compatibility with older firmware versions, it's important to
    be able to detect unsupported commands and provide a fallback.

--

    Add support for the Sherwood Amphos Air.

--

    Fix the freedive mode for the DG03 and VT3.
    
    The freedive/gauge bits for the Hollis DG03 and Oceanic VT3 are stored
    at another location than our initial assumption.

--

    Fix the freedive mode for the Oceanic Veo 2 and 3.
    
    In freedive mode, the Oceanic Veo 2.0 and 3.0 have samples that are only
    4 bytes long, instead of the normal 8 bytes.
    
    The Oceanic VT3 and Hollis DG03 use the same logbook layout, and
    although I haven't been able to confirm this with real data, it's very
    likely they need the same fix.

--

    Fix the hour for the Oceanic Veo 2 and 3.
    
    For BCD encoding the hour in a 12 hour clock system, only 5 bits are
    required. The extra two bits are used for storing the freedive/gauge
    mode.

--

    Add support for the Oceanic VTX.
    
    The Oceanic VTX is very similar to the Aeris A300 CS. The main
    difference is the higher baudrate (115200 vs 38400). This is annoying
    because without the correct baudrate, no communication is possible and
    thus the existing autodetection based on the version packet doesn't
    work. As a workaround, we now rely on the model number from the device
    descriptor. The consequence is that the user must select the correct
    model now (or at least a model with the same baudrate).

--

    Pass the model number to the open function.
    
    This change will be necessary for the Oceanic VTX, because it uses a
    higher baudrate.
    
    To maintain backwards compatibility, the existing function remains
    unchanged and a new function is introduced instead.

--

    Extend the retry logic to corrupt data packets.
    
    At the moment, there is only retry logic for the ACK/NAK byte. Corrupt
    data packets (e.g. wrong checksum, unexpected length, etc) are treated
    as a fatal error. By reading the entire packet inside the retry loop,
    all non-fatal errors are automatically taken care off.
    
    This change is necessary for the Oceanic VTX. For some unknown reason,
    the device always responds with an invalid data packet when sending the
    version command for the first time:
    
      W: 84 00
      R: 5A 4F ?? 45 41 4E 56 54 58 20 31 42 20 32 30 34 38 E9
    
    There is always one byte missing (marked with question marks), resulting
    in a timeout. However, when re-sending the command again, we receive a
    valid data packet:
    
      W: 84 00
      R: 5A 4F 43 45 41 4E 56 54 58 20 31 42 20 32 30 34 38 E9
    
    This might be a firmware bug, because we're observing the exact same
    behaviour with the official Oceanlog application.

--

    Use symbolic constants for the commands.

--

    Disable gas mixes in freedive mode.

--

    Implement the dive mode field.

--

    Fix the freedive mode for the Aeris Elite T3.
    
    In freedive mode, the Aeris Elite T3 has samples that are only 2 bytes
    long, instead of the normal 8 bytes.
    
    Since there are many other models which support a freedive mode, the new
    implemention provides the necessary infrastructure to easily integrate
    those other models too.

--

    Fix the depth for the Aeris F11.
    
    Since the size of a sample is only 2 bytes, we were actually reading the
    depth value from the next sample.

--

    Add support for the HW OSTC cR.
    
    The OSTC cR is new model for closed circuit (CCR) diving. Under the hood
    it's identical to the OSTC 3, but with an S8 connector to interface with
    an external oxygen sensor. Since the data format already supports oxygen
    sensors, the OSTC cR can be added to the list of supported devices
    without any further changes.

--

    Add average depth from OSTC/OSTC3 logbook
    
    Signed-off-by: Anton Lundin <glance@acc.umu.se>

--

    Add support for the Scubapro Chromis.

--

    Disable tank pressure samples for the Oceanic Geo 2.0.
    
    The Oceanic Geo 2.0 is a non-air integrated model that doesn't seem to
    set the initial tank pressure to the magic value 10000.

--

    Have make be more silent by default
    
    Signed-off-by: Anton Lundin <glance@acc.umu.se>

--

    Add EON Steel bookmarks, warnings and alarm events
    
    I'd missed these because I'm blind. But mostly because they aren't as
    common.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

--

    Parse EON Steel notification and state changes
    
    The EON Steel notifications and states match the libdivecomputer ones
    very badly, but this tries to make sense of the ones that match.  And
    puts the infrastructure in to do others in the future.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-fouindation.org>

--

    Add EON Steel gas change event parsing
    
    The really sad part is that the EON Steel handles gas change events
    correctly, by actually saying which cylinder it switches to.  But the
    libdivecomputer interfaces are broken, and only contain the gas *mix*
    you switch to, which is ambiguous since you could have the same mix in
    multiple cylinders.
    
    Maybe we could put the one-based cylinder index into the "flags" field?
    With zero meaning "unknown". That would be a straightforward extension.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

--

    Add support for the DiveSystem iDive and Orca.

--

    Reserve one byte extra for the null character.
    
    The OSTC3 can display a status message of up to 16 characters large.
    Since this does not include the terminating null character, the buffer
    needs to be one byte larger.

--

    Replace the code for handling line endings.
    
    The new implementation is similar to the already existing code for
    reading Intel HEX files. It can handle arbitrary line endings, and not
    just CRLF or LF.

--

    Simplify state switching and checking for OSTC3
    
    This simplifies the code to check and handle state switching for the
    OSTC3.
    
    Suggested-by: Jef Driesen <jef@libdivecomputer.org>
    Signed-off-by: Anton Lundin <glance@acc.umu.se>

--

    Remove unused imports
    
    Signed-off-by: Anton Lundin <glance@acc.umu.se>

--

    Add Anton to copyright notice.
    
    Signed-off-by: Anton Lundin <glance@acc.umu.se>

--

    Teach examples/ostc-fwupdate about OSTC3
    
    This teaches the example firmware upgrader about how to upgrade the
    OSTC3's.
    
    Signed-off-by: Anton Lundin <glance@acc.umu.se>

--

    Firmware upgrade for OSTC3
    
    This connects the bits and implements firmware upgrade for the OSTC3.
    
    This code is inspired by JeanDo ostc-companion.
    
    Reviewed-by: Jef Driesen <jef@libdivecomputer.org>
    Signed-off-by: Anton Lundin <glance@acc.umu.se>

--

    Add code to send upgrade firmware command to OSTC3
    
    This function triggers a reboot into the bootloader which flashes the
    new firmware to Prom.
    
    This code is inspired by JeanDo ostc-companion.
    
    Reviewed-by: Jef Driesen <jef@libdivecomputer.org>
    Signed-off-by: Anton Lundin <glance@acc.umu.se>

--

    Add code to write rom of the OSTC3
    
    This is how you transfer a new firmware to the OSTC3.
    
    This code is inspired by JeanDo ostc-companion.
    
    Reviewed-by: Jef Driesen <jef@libdivecomputer.org>
    Signed-off-by: Anton Lundin <glance@acc.umu.se>

--

    Add function to read the rom from the OSTC3
    
    This is necessary to verify that the memory written got transfered
    correctly.
    
    This code is inspired by JeanDo ostc-companion.
    
    Reviewed-by: Jef Driesen <jef@libdivecomputer.org>
    Signed-off-by: Anton Lundin <glance@acc.umu.se>

--

    Add a function to erase the memory of the OSTC3
    
    This is the fist step in the firmware upgrade process.
    
    This code is inspired by JeanDo ostc-companion.
    
    Reviewed-by: Jef Driesen <jef@libdivecomputer.org>
    Signed-off-by: Anton Lundin <glance@acc.umu.se>

--

    Add utility functions to convert uints to bytes
    
    Reviewed-by: Jef Driesen <jef@libdivecomputer.org>
    Signed-off-by: Anton Lundin <glance@acc.umu.se>

--

    Add a helper to put the OSTC3 into servicemode
    
    This code is inspired by JeanDo ostc-companion.
    
    Reviewed-by: Jef Driesen <jef@libdivecomputer.org>
    Signed-off-by: Anton Lundin <glance@acc.umu.se>

--

    Lift the OSTC3 INIT out of open
    
    This lifts the OSTC3 INIT command out from the open function and does
    that separately. This is refactoring to be able to enter service mode so
    we can access service mode commands.
    
    Reviewed-by: Jef Driesen <jef@libdivecomputer.org>
    Signed-off-by: Anton Lundin <glance@acc.umu.se>

--

    Add code to read and decrypt OSTC3 firmware files
    
    This code is inspired by JeanDo ostc-companion.
    
    Reviewed-by: Jef Driesen <jef@libdivecomputer.org>
    Signed-off-by: Anton Lundin <glance@acc.umu.se>

--

    Workaround msvc lack of a stdint.h
    
    Suggested-by: Jef Driesen <jef@libdivecomputer.org>
    Signed-off-by: Anton Lundin <glance@acc.umu.se>

--

    Port TinyAES-128 to be thread safe.
    
    Signed-off-by: Anton Lundin <glance@acc.umu.se>

--

    Import Tiny AES128
    
    This imports Tiny AES128 from https://github.com/kokke/tiny-AES128-C for
    use in the decoding of OSTC3 firmwares.
    
    This aes-code is released into the public domain.
    
    Signed-off-by: Anton Lundin <glance@acc.umu.se>

--

    Also cache the number of mixes and the mix values
    
    At least one dive computer in the Suunto Vyper family, the Vytec DS, is
    capable of recording gas mix switches, and therefore supports more than
    one mix. When going through the dive profile caching process, also look
    for gas changes and record how many mixes were used in the dive. Mix 1
    is always the main tank and it’s O2 value can be found in the dive
    header, but the other tank O2 values are not available ahead of time. By
    reviewing the dive profile ahead of time, the entire list of mixes can
    be returned to the application at the beginning of the dive as per
    usual.

--

    Cache the parser data internally.
    
    The code to calculate parameters like maximum depth and divetime is
    duplicated in multiple places. Move this code to a single place, and
    cache the data in the parser instead.

--

    Fix the temperature for the Sherwood Amphos.
    
    The sign bit is stored at a different offset.

--

    Add support for the Citizen Hyper Aqualand.

--

    Add a default case to the switch statement.
    
    This is only the silence the "enumeration value not handled in switch"
    compiler warning. There is already a check earlier on to take care of
    unsupported fields, but the default case is a good practice anyway.

--

    Fix another memory leak.
    
    The array with type descriptors is populated with dynamically allocated
    strings, but they are never freed anywhere. To be able to free those
    strings easily, they are now initialized with NULL pointers instead of
    zero length strings.

--

    Fix a few memory leaks.

--

    Fix a NULL pointer dereference.

--

    Use the non-standard _snprintf() function for msvc.

--

    Add explicit casts for the msvc C++ compiler.

--

    Replace string literals with arrays.
    
    This avoids some more compiler warnings regarding incompatible pointer
    types (e.g. signed vs unsigned char pointers). Arrays have the
    additional advantage of the sizeof operator. This eliminates an
    unnecessary strlen() call, and the strcpy() call can be replaced with
    memcpy().

--

    Replace zero length strings with NULL pointers.
    
    This avoids some compiler warnings. The type of the string literal is a
    const char pointer, while the send_cmd() function expects an unsigned
    char pointer.

--

    Replace void pointers with unsigned char pointers.
    
    Since we're dealing with byte arrays, there's no need to use void
    pointers. Using unsigned char pointers also eliminates some compiler
    warnings for pointer arithmetic on void pointers.

--

    Remove the custom logging functions.
    
    There is no need for custom logging functions, because libdivecomputer
    already has an extensive logging infrastructure, featuring conditional
    compilation, multiple loglevels, customization by the application, etc.

--

    Don't terminate the application on error.
    
    Terminating the application on error, by calling exit, is not
    appropriate in a library. An error code should be returned instead.

--

    Use the libusb autodetach functionality only if available.
    
    The libusb autodetach kernel driver functionality is only available in
    recent versions.

--

    Fix a redefinition warning for the ERROR macro.
    
    See commit 113d2e4706698f7086e5499282ec958aa2de044f for more details.

--

    Follow the libdivecomputer naming conventions.
    
    All entry point functions (e.g. public functions or functions called
    through the vtable) use the backend name as the prefix. The same applies
    to the main device and parser structures.

--

    Suunto EON Steel: support downloading of core dive profile data
    
    Basic Suunto EON Steel downloading copied from my test application.
    This parses all the core dive data, including sample data (time, depth,
    cylinder pressure, deco information etc).
    
    The deco information returns ceiling and TTS rather than ceiling and
    "time at ceiling", because that's what the dive computer has, and I
    don't see any other way to return the information.
    
    We don't report any events yet, though.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

--

    Convert imperial tank volume to the metric system.
    
    There are two different ways to specify the volume of a tank. In the
    metric system, the tank volume is specified as the water capacity, while
    in the imperial system the tank volume is specified as the air capacity
    at the surface (1 ATM) when the tank is filled at its working pressure.
    
    To avoid mistakes, the tank volume is now always returned as the metric
    volume. For imperial tanks, the tank volume is converted to the metric
    representation.

--

    Don't look for tank pressure information from a GEO

--

    Add missing break in Cobalt support for divemode
    
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Fix the tank working pressure for the Cobalt.
    
    The difference between CUFT@PSI and CUFT@BAR is only for the Cobalt user
    interface, to allow the user to enter the tank volume independent of the
    units configured in the main preferences. Internally the working
    pressure is always stored in psi.

--

    Add support for the Mares Airlab.
    
    The Mares Airlab is actually the same device as the Darwin Air.

--

    Implement the dive mode for several devices.
    
    The new dive mode field is now supported by devices from these
    manufacturers:
    
     * Atomic Aquatics
     * Heinrichs Weikamp
     * Mares
     * Reefnet
     * Suunto

--

    Use symbolic constants for the dive mode.

--

    Add support for parsing the dive mode.

--

    Implement tank support for the Mares Darwin Air.

--

    Implement tank support for the Atomic Cobalt.

--

    Add support for parsing tank data in the dive header.

--

    Implement the temperature support for several devices.
    
    The new temperature fields are now supported by devices from these
    manufacturers:
    
     * Atomic Aquatics
     * Heinrichs Weikamp
     * Mares
     * Suunto
     * Uwatec

--

    Extend temperature with surface, min and max values.

--

    Cressi Leonardo now reports temperature from dive header
    
    Signed-off-by: Calle Gunnarsson <calle.gunnarsson@gmail.com>

--

    Added support for parsing temperature in the dive header
    
    Devices that only reports a single temperature in the header
    will now be able to report it as well when they implement this.
    
    Signed-off-by: Calle Gunnarsson <calle.gunnarsson@gmail.com>

--

    Disable exclusive access mode during close.
    
    When closing the slave side of a pseudo terminal, the exclusive access
    mode will persists on the master side. The result is that re-opening the
    slave side will fail with EBUSY, unless the process has root priviliges.
    To workaround this problem, we already introduced an option that enables
    better compatibility with pseudo terminals. See commmit
    fab606b00a44ea2114a4029ad09b70c66c3049f7 for details.
    
    In my development environment, I always have this option enabled. But
    occasionally I also need to test release builds. And then I usually end
    up with inaccessible pty's again, because the pty support is disabled by
    default for release build.
    
    This problem can easily be avoided by disabling the exclusive access
    mode, just before closing the file descriptor.

--

    Fix temperature parsing for Sherwood Wisdom 3
    
    Adds the new model and treats it like a Wisdom 2 (and many other, similar
    versions of the Oceanic Atom2 style dive computers).
    
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Fix the gas mixes for the Aeris A300AI.
    
    The Aeris A300AI supports 4 instead of 3 gas mixes. The offset where the
    gas mixes are stored was wrong too.

--

    Fix the header size for the Oceanic VT4 and VT4.1.
    
    This change was already present in the oceanic_atom2_parser_get_field()
    function, but not in the oceanic_atom2_parser_samples_foreach()
    function. These two should always be kept in sync.
    
    This fixes a bug in the tank pressure detection.

--

    Add support for the Aeris F11.
    
    Most of the changes needed for the F11 are the standard model specific
    tweaks. But the F11 also has another interesting "feature". If you try
    to download a full memory dump using the standard B1 read command, then
    the data starts to repeat after the first 64K. It seems that somehow,
    the B1 command can only address the first 64K of the memory. To avoid
    this problem, the newer B4 read command needs to be used instead.
    
    This might be a firmware bug, or maybe internally they store the address
    in a 12bit variable, which causes the upper bits to get lost? That would
    explain the repeating data.

--

    Cache the last page to reduce the number of I/O operations.
    
    In bigpage mode, we always read large pages, regardless of the amount of
    bytes requested by the caller. Excess bytes are simply discarded. This
    is inefficient because the same large page will be downloaded multiple
    times, when requesting more than one 16 byte page from the same large
    page. By caching the pages internally, we can greatly reduce the amount
    of I/O operations.
    
    In practice, applications and also libdivecomputer's internal algorithm
    for downloading the dives will typically request contiguous pages, so we
    only need to cache the last page.
    
    This implementation is based on ideas and code contributed by Dirk
    Hohndel.

--

    Aeris A300CS: detect the number of cylinders used
    
    The A300CS actually tells us how many of the cylinders it considers "in
    use".
    
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Aeris A300CS: add reporting of water type (fresh/salt)
    
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Aeris A300CS: add support for NDL / deco data
    
    Encoded in every sample. The depth is in multiples of 10 feet which gives
    somewhat odd metric stop depth - but rounding to full meters would take
    care of that.
    
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Add initial support for the Aeris A300CS
    
    This is ignoring a ton of data that the dive computer provides. But it
    gives profile, tank pressure and temperatures - so it's a start.
    
    This patch adds a set_dtr and set_rts call to the serial interface prior
    to interacting with the device. This change is required for the A300CS to
    talk to the computer.
    
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Prepare Oceanic infrastructure for multi page reads
    
    Some new Oceanic dive computers like the Aeris A300CS support a new read
    command that always reads 256 byte pages instead of 16 byte pages, other
    versions support reading 128 byte pages.
    
    This patch adds a field to the oceanic_atom2_device_t structure to
    indicate which type of device this is. If bigpage mode is enabled, the
    algorithm will always request larger, aligned reads and fall back to
    standard 16 byte reads otherwise.
    
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Fix the date/time for the Oceanic Pro Plus 3.
    
    The day is stored as a binary value, not a BCD encoded value.

--

    Associate the pressure samples with the primary tank.
    
    The primary tank, which is the tank connected to the hose and thus the
    tank pressure sensor, it not necessary the first tank. The correct tank
    index can be found by searching the array for a gas mix with a sensor id
    equal to one.

--

    Convert the gasmix id into an array index.
    
    The gasmix value in the sample data is the id of the gasmix. Depending
    how the user manipulated the gasmix settings, this id is not necessary
    identical to the index into the gasmix array.  The array index can be
    found by searching the array for a mix with the correct id.

--

    Add some more error messages.

--

    Fix the Tusa Zen header size and pressure.
    
    For the Tusa Zen, the header is 16 bytes smaller. With this change, the
    gasmixes and the intial temperature are now parsed correctly.
    
    The tank pressure samples have also been disabled manually, because this
    is a non-air integrated model that doesn't seem to set the initial tank
    pressure to the magic value 10000.

--

    Add support for the Subgear XP-3G.

--

    Fix a buffer overflow.
    
    The 6 byte logbook entry gets prepended to the profile data. We need to
    take this into account when allocating the memory buffer. Under normal
    circumstances this shouldn't be a problem, because a single dive is
    usually much smaller than the profile ringbuffer. But it's better to be
    on the safe side.

--

    Initialize the fingerprint before use.
    
    The fingerprint is used unconditionally, regardless of whether it's
    explicitly set by the application or not. Therefore it needs to be
    initialized properly.

--

    Fix the Mares Puck 2 memory layout descriptor.
    
    The Mares Puck 2 uses the same memory layout as the Nemo Wide 2. See
    commit 322227df7f65da8b4a962f3513e0a10b89cbe29d for more details.

--

    Fix a build error.
    
    Commit 7a851ccb1b9ed9b8906721cb1872b96b35185883 accidentally broke the
    build due to a missing line.

--

    Add suport for the OSTC Sport variant.
    
    Although the OSTC Sport uses bluetooth communication, the new model
    remains fully compatible with the OSTC3, because it provides a virtual
    serial port interface. As usual, the new model can be detected based on
    the serial number.

--

    Add some extra error messages.

--

    Disable gas mixes and events in gauge mode.
    
    For a dive in gauge mode, the gas mixes defined in the header should be
    ignored, and no gas change event should be emitted. This is done by
    hardcoding the number of gas mixes to zero.

--

    Cache the parser data internally.
    
    The code to find the offset to the footer and parse the gas mix data is
    duplicated in multiple places. Move this code to a single place, and
    cache the data in the parser instead.

--

    Ignore disabled gas mixes.
    
    Gas mixes that have been disabled are stored as a mix with 0% oxygen and
    0% helium. This is clearly an invalid gas mix, and it makes no sense to
    return it back to the application.

--

    Fix the dive mode detection for the Mares Nemo Air.
    
    For the Nemo Air, a dive mode with the value 2 indicates gauge mode
    instead of freedive mode. With this change, all models from the puck
    family now use the same values.

--

    Use symbolic constants for the model numbers.

--

    Ignore excess samples with the same timestamp.
    
    With a time based sample interval, the maximum number of samples for a
    single timestamp should be constant. However in practice some devices
    occasionally store one or more additional samples with the same
    timestamp.
    
    Ignoring those excess samples, allows the parser to proceed, while still
    preserving the strict time based interval for the application.

--

    Remove the device specific example applications.
    
    These device specific applications became obsolete long time ago with
    the introduction of the universal application.

--

    Add an option to disable the example applications.
    
    The example applications may not always be needed. An option to disable
    them might be useful.
    
    Signed-off-by: Venkatesh Shukla <venkatesh.shukla.eee11@iitbhu.ac.in>

--

    Fix the date/time for the Aeris Elite T3.
    
    Commit d414da70a42afca0096e0402a426c4ac8d2a2881 added support for a
    second Aeris Elite T3 variant. But the parser wasn't updated to take
    into account this second model number.

--

    Fix the gas mixes for a few models.
    
    For the Aeris Manta and Sherwood Insight, the header size should be 16
    bytes smaller. Due to this mistake not only two samples were missing,
    but also the byte offset for the gas mixes were wrong. This resulted in
    invalid gas mixes, with oxygen percentages exceeding 100%.

--

    Fix the temperature for the Sherwood Wisdom 2.
    
    The sign bit should be reversed for this model.

--

    Ignore disabled gas mixes.
    
    For the older models, gas mixes are disabled by setting their oxygen
    percentage byte to 0x00 or 0xFF. Trying to parse such a byte as a valid
    percentage results in an invalid gas mix.
    
    Because the device doesn't allow you to enable a gas mix if the previous
    gas mix has already been disabled, we can simply stop parsing the gas
    mixes once the first disabled gas mix has been found.

--

    Cache the initial gas mix.
    
    The gas mode should not only be taken into account for parsing the gas
    mix definitions, but also for the initial gas mix. Because the logic
    needs to be kept in sync, it's convenient to have all related code in a
    single place, and cache the value.

--

    Apply the gas mode immediately.
    
    Because the gas mode takes precedence over the individual gas mix
    definitions, we can simplify the code by taking the gas mode into
    account immediately when parsing the gas mixes.

--

    Fix the length of the Suunto DX gas change event.
    
    The Suunto DX uses 5 bytes for the 0x06 gas change event.

--

    Remove the percentage variable.
    
    There is already another variable for the O2 percentage, so re-use that
    one instead.

--

    Improve the warning and error messages.

--

    Disable the gas mixes in gauge mode.

--

    Another gitignore update.
    
    Signed-off-by: Cristian Ionescu-Idbohrn <cristian.ionescu-idbohrn@axis.com>

--

    Add support for the Beuchat Voyager 2G.

--

    Use higher resolution timestamps on Windows.
    
    In commit 886884ab606def1183d99eca7dec8affefee635e, the custom log
    function in the example applications has already been modified to use
    high resolution timestamps. But I forgot about the built-in default log
    function. So this is basically the same change, but now applied to the
    built-in log function.

--

    Remove the extra check of the termios structure.
    
    The extra memcmp check after the tcsetattr call is intended to verify
    whether all the changes to the termios structure have been applied
    correctly.
    
    But for pty's, some of the termios settings make no sense at all, and
    therefore the Linux kernel always does:
    
        tty->termios.c_cflag &= ~(CSIZE | PARENB);
        tty->termios.c_cflag |= (CS8 | CREAD);
    
    Thus, instead of ignoring such nonsense termios settings, the kernel
    changes the termios structure to reflect what pty's actually do. The
    consequence is that these settings will not stick, and cause the memcmp
    check to fail.
    
    An example where this affects libdivecomputer, are the two backends that
    require odd or even parity (e.g. vyper and iconhd). Here, the kernel
    will clear the PARENB flag, and thus cause the memcmp check to fail.
    
    Since this check appears to causes more trouble than it solves, let's
    just remove it completely!

--

    Initialize the termios structure.
    
    The previous commit exposed another issue. The termios structure may
    contain padding bytes. Because the content of those padding bytes is
    unspecified, they may contain some random data, which causes the memcmp
    to fail.
    
    Explicitly initializing the termios structure with memset, will also set
    the padding bytes to zero.

--

    Minor error in serial_configure
    
    Due to a minor mistake, only the first byte was being checked for
    equality. Fixed it by changing position of parenthesis.
    
    Signed-off-by: Venkatesh Shukla <venkatesh.shukla.eee11@iitbhu.ac.in>

--

    Fix a typo in the profile ringbuffer start address.
    
    The profile ringbuffer is supposed to be located after the logbook
    ringbuffer, but due a silly typo they did overlap with 256 bytes.

--

    Fix the Mares Puck Pro memory layout descriptor.
    
    The Mares Puck Pro uses the same memory layout as the Nemo Wide 2. See
    commit 322227df7f65da8b4a962f3513e0a10b89cbe29d for more details.

--

    Add support for ascent rate warnings.
    
    The Cressi Leonardo does store an indicator for the ascent rate (e.g.
    the number of arrows) in the upper two bits. This results in 4 possible
    values, ranging from 0 to 3, with the following interpretation:
    
        0.0 -  3.9 m/min  No signal
        4.0 -  7.9 m/min  1 Arrow
        8.0 - 11.9 m/min  2 Arrows
       12.0+       m/min  3 Arrows (with STOP icon)
    
    Reported-By: Nick Shore <support@mac-dive.com>

--

    Add support for the new OSTC3 bailout event.
    
    With the exception of the different event mask (single byte 0x80 vs two
    byte 0x0100), the OSTC3 bailout event is identical to the OSTC2 variant.
    Just as before, the new bailout event is reported to the application as
    a normal gas change event.

--

    Use the extended sample length stored in the data.
    
    Currently, the buffer overflow checks take into account the size of the
    entire dive. But since the length of the extended sample is stored in
    the data, we can actually check for overflows in each sample. The main
    benefit is that errors will be caught much earlier now.
    
    An additional advantage is that we can now easily skip any remaining
    sample bytes. Normally such bytes are not present, unless a firmware
    update introduces a new feature which our parser doesn't support yet.

--

    Add more error messages.
    
    This makes debugging easier, because the error messages immediately
    reveal where the problem is located, without needing a debugger.

--

    Add more buffer overflow checks.
    
    There are a few places left, where the contents of the buffer is
    accessed without first inspecting the available length.

--

    Fix the Mares Nemo Wide 2 memory layout descriptor.
    
    The Mares Nemo Wide 2 appears to have a slightly larger profile
    ringbuffer, which extends to the end of the internal memory. It remains
    to be seen whether this is also true for some of the other models. The
    Mares Matrix is currently the only model where this is definitely not
    the case.

--

    Add support for the Aeris A300.

--

    Add support for the Hollis TX1.
    
    The Hollis TX1 has several new features compared to the other models. It
    supports trimix and up to 6 different gas mixes can be configured. It
    also has twice the amount of memory, which requires an extra bit for the
    ringbuffer pointers.

--

    Add support for trimix gas mixes.

--

    Fix the initial gas mix for the D4i, D6i and D9tx.
    
    The initial gas mix index has been confirmed for the D6i only. For the
    other two models, it's an educated guess that the byte offset will be
    identical.

--

    Fix the detection of the last valid dive.
    
    Normally, the last valid dive is followed by an empty entry with all
    0xFF bytes. However, we received data from a device where a few of those
    bytes are not equal to 0xFF. This causes the entry to be processed
    incorrectly as a valid dive.
    
    As a workaround, we now check the internal dive number for 0xFFFF.

--

    Remove an infinite loop.
    
    If an unknown type byte is encountered, the offset isn't incremented,
    resulting in an infinite loop. We now return an error instead.

--

    Add support for the Atomic Aquatics Cobalt 2.

--

    Fix building for Android
    
    This makes libdivecomputer build via Android NDK. Its currently unusable
    due to the fact that Android usually doesn't provide any kernel serial
    drivers.
    
    Signed-off-by: Anton Lundin <glance@acc.umu.se>

--

    Reduce the timeout to one second.
    
    A packet usually takes only a few milliseconds to transfer, so one
    second is still plenty of margin.

--

    Introduce an adaptive inter packet delay.
    
    On some systems a small delay is required between receiving the response
    of a packet and sending the request for the next packet. Without this
    delay, almost every request fails with either a NAK or a timeout.
    Retrying usually works, but also causes the download to slow down
    considerable.
    
    The root of the problem appears to be related to the FTDI low latency
    setting. On Windows and Mac OS X systems, the default setting for the
    latency is 16ms, while Linux defaults to a low latency setting of only
    1ms. This higher latency on Windows and Mac automatically introduces a
    small delay while reading the packet, and that probably happens to be
    just enough to make the transfer succeed without any problems. But on
    Linux, due to the low latency setting, the next request is send almost
    immediately, and that causes the transfer to fail. I suspect the dive
    computer may still be busy with the previous request and needs a bit
    more time before it's ready to accept a new request.
    
    To mitigate this problem, we introduce a adaptive inter packet delay.
    Initially this adaptive delay is set to zero. This is to make sure we
    don't affect those systems that don't need a delay at all. Now, every
    time a packet fails, that's an indication the inter packet delay is too
    small, and we slightly increase the value. After a few attempts we'll
    automatically reach the minimal required value. To avoid that the delay
    grows out of control in the case of serious trouble, it's limited at
    16ms.
    
    Note that the fixed 100ms delay before retrying a failed packet remains
    in place. That's on purpose, to make sure the next attempt will always
    be successful, regardless of whether the adaptive delay has already
    reached its minimal value or not.

--

    Add support for modifying the receive latency.
    
    Currently this isn't used or needed anywhere, but the research has been
    done, and it would be silly to drop the knowledge. We may need it in the
    future.

--

    Report the initial gas mix.
    
    The Suunto dive computers record gas change events in the profile data.
    But because there is no gas change event stored on the first sample, the
    application doesn't know which gas mix is in use, until the very first
    gas change event occurs.
    
    For the Suunto HelO2, the index of the initial gas mix is stored in the
    dive header. This is most likely also the case for the other models, but
    I haven't found yet where exactly it is stored. As a temporary solution,
    we simply assume the initial gas mix is the first gas in the list with
    available gas mixes. This should be a reasonable assumption for most
    dives.
    
    Fixes ticket #2

--

    Cache the gas mix data internally.
    
    The gas mix data is used from multiple functions, and the code to parse
    that data is duplicated in each function. Because this is error prone,
    the code is moved to a single place, and the data cached in the parser.

--

    Remove trailing whitespaces
    
    Most of them appear in the disclaimers, but some are in the code as
    well.

--

    Fix the gas mixes for the Oceanic OCi.
    
    The Oceanic OCi supports 4 gas mixes instead of just 3, and they are
    stored at a different offset.

--

    Fix a typo in the format string.

--

    Use higher resolution timestamps on Windows.
    
    The resolution of the GetTickCount function is limited to the resolution
    of the system timer, which is typically in the range of 10 to 16
    milliseconds. This is unsufficient for measuring very short time
    intervals in the milliseconds range. The QueryPerformanceCounter
    function provides much higher resolution timestamps. We already use it
    for the half-duplex workaround.

--

    Add support for parsing gas changes.
    
    Parsing the gas switch events is somewhat complicated, because depending
    on the actual model, they can be stored in different ways.
    
    The table below lists the number of gas mixes (G), tanks (T) and alarm
    bytes (A) supported by each model. Note that only the representative
    model in each group is listed.
    
      Model         | G | T | A
      ==============|===|===|===
      Pro           | 1 | 0 | 1
      Com           | 1 | 1 | 1
      Tec           | 3 | 3 | 1
      Aladin Tec    | 1 | 0 | 2
      Aladin Tec 2G | 3 | 0 | 2
      Galileo       | 3 | 3 | 3
    
    Models without support for multiple gasmixes only need to set the
    initial gas mix correctly. Models with support for one or more tank
    pressure sensors can link the gas switches to the tank switches. Models
    with at least two alarm bytes can store a gas switch event in the second
    alarm byte.
    
    As can be observed from the table, some models can use several different
    methods to store the gas switches. The current implementation supports
    all of them. In the case of a conflict, the last used method always
    takes precedence. That's simply due to the fact that each method just
    sets the gasmix index, and only the final value is used. If this
    approach turns out to produce wrong results, it can always be fixed
    later.
    
    The initial gasmix is always assumed to be the first configured gasmix.

--

    Use only one byte for the oxygen percentage.
    
    One byte is already more than sufficient to store an oxygen percentage.
    Using two bytes doesn't cause any problems for some models, because the
    upper byte is always zero, but for other models that's not the case.
    Most likely this upper byte is used to store something else.

--

    Fix the gasmix offset for the Aladin Tec 2G.

--

    Use the same tables for the Uwatec Smart Tec and Z.
    
    Internal, these two models use exactly the same data format. For those
    features which are only available on one of the models, the
    corresponding data fields are set to their unused values. For example,
    the Smart Tec supports up to three gasmixes, while the Smart Z supports
    only one gasmix. But although the Smart Z has storage reserved for up to
    three gas mixes, only the first one is ever used.

--

    Check the buffer size before using the data.
    
    For the Galileo Trimix, the header length isn't fixed. The actual length
    depends on whether the dive has the trimix setting enabled or not.
    Because at this point we're still trying to determine the length of the
    header, it hasn't been checked yet and an extra check is necessary.

--

    Store the pointers to the tables in the device handle.
    
    Because for selecting the correct header and sample tables (and
    associated data) only the model number is necessary, they can easily be
    stored inside the device handle. The main benefit is less duplicated
    code.

--

    Ignore ostc-fwupdate binary
    
    Signed-off-by: Anton Lundin <glance@acc.umu.se>

--

    Fix the decoding of the serial number.
    
    The serial number is stored as a plain 32bit integer, and the device
    shows the hexadecimal representation. Because a BCD encoding can only
    represent the lower digits (0-9) of a hexadecimal number, the upper
    digits (A-F) got mangled.
    
    Reported-By: Nick Shore <support@mac-dive.com>

--

    Use relative instead of absolute offests.
    
    Although the settings sample will most likely always be located at the
    start, it's better to be on the safe side and use an offset relative to
    the start of the settings sample.
    
    Reported-By: Nick Shore <support@mac-dive.com>

--

    Add support for configuring the OSTC3 settings.
    
    Starting with firmware v1.23, the OSTC3 settings can be configured
    through the USB interface. There are new commands for reading, writing
    and restoring the settings to their default values.

--

    Fix a subtle bug in the previous commit.
    
    The workaround in the previous commit has a bug. If after a reset, the
    first entry happens to be located near the end of the TOC, then after a
    few dives, the TOC will overflow and new entries will be written at the
    start of the TOC. But the current algorithm starts scanning the TOC from
    the start and abort the scan as soon as an empty entry is found. Thus if
    there are less than 256 dives present, those entries near the end will
    never be reached.
    
    We now ignore all uninitialized entries, when searching for the most
    recent dive. An explicit safety check is added in case dives are
    unexpectedly interleaved with empty entries.

--

    Ignore uninitialized header entries
    
    Normally, the OSTC3 will always start writing dives at the first entry
    in the TOC (Table of Contents). Therefore, uninitialized entries can
    only be present after the last dive. However due to a minor firmware
    bug, resetting the logbook erases the TOC but leaves the internal dive
    counter unchanged. The consequence is that the next dive will still be
    stored at the corresponding next TOC entry, while all previous TOC
    entries have been erased.
    
    As a workaround, we simply ignore uninitialized entries, unless we have
    already found at least one dive.

--

    Increase the internal log buffer.
    
    With the switch to 4K data packets in the Icon HD backend, the internal
    log buffer is no longer large enough for hexdumps of these data packets.
    A hexdump needs twice the size of the binary data, plus some extra bytes
    for the header and the terminating null byte.

--

    Increase the packet size again for the Icon HD.
    
    The switch from downloading the entire data with a single large packet
    to multiple smaller 256 byte packets, resulted in a considerable
    performance regression. In one particular case, the difference was a
    factor 6.7 slower!
    
    I performed a small tests (using an Icon HD Net Ready) with 256, 1024
    and 4096 byte packets, and the total time was respectively 21.0, 11.3
    and 6.5 seconds. For a single large packet, the total time is only 5.9
    seconds. Thus the difference with a 4096 byte packet is negligible.

--

    Autodetect the model using the version packet.
    
    The model number stored in the main memory isn't always the most
    reliable source of information, because there are devices where the
    model number has not been filled in properly. Instead, we check the
    product name in the version packet against the list with valid names,
    and return the corresponding model number.
    
    As an additional advantage, we no longer depend on the model number
    supplied by the application for selecting the correct memory layout.
    Nevertheless, the model parameter is kept for backwards compatibility.

--

    Remove an unnecessary function.

--

    Use the same packet size for all models.
    
    The recommended packet size is 256 bytes, which matches the maximal
    amount of data that can be read back from the internal memory chip.
    Larger requests are split by the firmware into multiple blocks of
    maximum 256 bytes.
    
    Note that initially, we already used 256 byte packets for the newer
    models, but it seems this was accidentally changed to only 64 bytes in
    commit ad0e187c0c932121efa50763afc02771633cbd61.
    
    The main benefit of this change is a simplification of the code, because
    now there is no longer a difference between the Icon HD and Matrix
    variant of the protocol.

--

    Use the same standard baudrate for all models.
    
    The Mares Icon HD use a processor with integrated USB circuit, which
    presents itself to the host system as a CDC-ACM device. Since there is
    no external usb-serial chip involved, the baudrate and other serial
    line parameters are irrelevant. By choosing the same settings as the
    later models, which do use an usb-serial chip, we can completely avoid
    the problem of unresponsive devices due to using the wrong baudrate.

--

    Fix the parsing of the serial number.
    
    The serial number appears to be either a 24 or a 16 bit number, but
    certainly not a 32bit number. Whether it's 24 or 16 bit is hard to
    tell because the data we have available always contains a zero value
    in the third byte.

--

    Add support for the Cressi Giotto.
    
    The communication protocol and memory layout of the Cressi Giotto
    appears to be identical to that of the Leonardo. The first byte seems
    to be the model number, with 0x01 for the Leonardo and 0x04 for the
    Giotto.

--

    Add support for gas switches.

--

    Ignore invalid gas mixes.
    
    Gas mixes that have been marked as disabled are stored as the value 0xF0.
    When interpreted as an oxygen percentage, this results in an out of range
    value. Therefore, these gas mixes should simply be ignored.

--

    Release version 0.4.2.

--

    Fix a small spelling mistake.

--

    Add support for the Dive Rite NiTek Q.

--

    Add support for the OSTC 2C variant.

--

    Improve the progress events.
    
    Reading the data packet in multiple smaller chunks greatly improves the
    progress events. Instead of just two events, before and after the
    download, there are now many intermediate events. This change also
    allows to significantly reduce the timeout, from 30 seconds to just one
    second, which avoids blocking for too long in case the device doesn't
    respond at all.

--

    Remove the infinite timeout.
    
    An infinite timeout causes major problems, because if the device doesn't
    respond at all, the read call will block forever. With the eon serial
    line settings (1200 8N2), the total time to read the 2305 byte packet is
    about 21.129 seconds. A timeout of 30 seconds should be plenty of time.

--

    Update the msvc project file.

--

    Always use the ANSI variant of the Windows functions.

--

    Add explicit casts for the msvc C++ compiler.

--

    Fix the memory layout for the VT4.x.
    
    The VT4.x memory layout appears to be slightly different from the Atom
    3.x memory layout. The logbook ringbuffer does start at offset 0x420
    instead of 0x400.

--

    Add iconhd gas change event
    
    Signed-off-by: Tim Wootton <tim@tee-jay.demon.co.uk>

--

    Use only 11 bits for the depth.
    
    When using up to 14 bits for the depth, the resulting values are too
    large in some cases. Most likely the upper bits are used to store
    something else. Even with only 11 bits, the resulting depth range
    (0-204.7m) should still be more than sufficient.

--

    Add support for the Scubapro/Uwatec Meridian.
    
    The Uwatec Meridian protocol is identical to the Uwatec Smart/Galileo
    protocol, except for some additional framing around each data packet,
    and the switch from IrDA to usb-serial communication. For parsing, the
    data format appears to be identical to the Galileo data format.

--

    Add support for the Scubapro XTender 5.
    
    The XTender 5 is identical to the other models in the Zeagle N2iTiON3
    family, and can be added to the list of supported devices without any
    further changes.

--

    Fix units for atmospheric pressure for iconhd type
    
    Was returning mbar, should have been bar.
    
    Signed-off-by: Tim Wootton <tim@tee-jay.demon.co.uk>

--

    Adds support for DC_FIELD_ATMOSPHERIC to the iconhd parser
    
    Signed-off-by: Tim Wootton <tim@tee-jay.demon.co.uk>

--

    Use the correct vtable for the Shearwater Petrel.
    
    That was an harmless copy&paste error.
    
    Signed-off-by: Patrick Valsecchi <patrick@thus.ch>

--

    Buffer the slip packet before sending.
    
    On Mac OS X, sending the slip packet byte by byte results in an abysmal
    performance. The first byte takes up to 160ms to send, and each next
    byte approximately 250ms. The packet to request a data block is
    typically 7 bytes large, and therefore takes about 1660ms to send.
    Because a dive is transmitted as multiple smaller packets (typically
    144 bytes without protocol overhead), downloading a single dive can
    easily take several seconds.
    
    However, when sending the entire slip packet at once, the time remains
    roughly identical to sending just the first byte. The result is that
    the time for sending a packet reduces significantly, proportional to
    the length of the packet.
    
    Under the hood, the slip packet is now internally buffered, and the
    buffer is send only when the entire packet is complete, or whenever the
    buffer gets full. But in practice, the buffer is large enough to always
    store an entire packet.
    
    In the original bug report, downloading 57 dives took about 40 minutes.
    After applying the patch, that time reduced to only 5 minutes!

--

    Add support for a new Uwatec Aladin 2G variant.
    
    This new variant has a different model number and has switched to the
    Uwatec Galileo data format.

--

    Add support for the Oceanic OCi.
    
    The new Oceanic OCi appears to be almost identical to the already
    supported Oceanic OC1. The most important change is the different
    location for the logbook ringbuffer.

--

    Add support for the Sherwood Amphos.

--

    Fix the memory layout descriptors.
    
    The profile ringbuffer appears to be slightly smaller than expected for
    some models. For the Mares Matrix (and all compatible devices) it ends
    earlier, while for the Icon HD Net Ready it starts later.
    
    This bug resulted in missing dives, because all remaining dives were
    getting dropped once a dive that crossed the ringbuffer boundary was
    reached.

--

    Mark the Oceanic Veo 2.0 as a non air integrated model.

--

    Fix the memory layout for the Atom 3.x and VT4.x.
    
    The logbook ringbuffer appears to start at offset 0x400 instead of
    0x240. Since these ringbuffer boundaries have to be taken taken into
    account only once the ringbuffer has been filled completely, this bug
    affects users with more than 200 dives only. Thus, no surprise it didn't
    get noticed earlier.

--

    Add cancellation support to several backends.
    
    Some backends are technically capable of supporting cancellation, but
    still lacked the necessary code to enable it.

--

    Disable the cancellation callback during shutdown.
    
    Several backends require a shutdown command to be send before closing
    the connection. If such a command gets cancelled, that might result in
    an unclean shutdown. Backends where this is problematic can always
    ignore cancellation requests internally, but it's less error-prone (and
    much easier) to simply disable the cancellation callback for all
    backends, before closing the connection.

--

    Add a warning to the firmware update code.

--

    Add a small example application.

--

    Autodetect the bootloader protocol variant.
    
    When updating the firmware while the OSTC is running in normal mode, the
    V2 protocol should be used. However, the OSTC can also be rebooted from
    the menu or reset using the magnetic switch, and then the V1 protocol
    should be used. The only difference with the V2 protocol is the slower
    baudrate (19200 vs 115200).
    
    True autodetection of the protocol variant is difficult, because the
    bootloader will abort the firmware update when not receiving a 0xC1
    byte. But we can still take advantage of the fact that the normal
    firmware does ignore any 0xC1 bytes sent at the wrong baudrate, and
    probe with the V1 protocol first. If the bootloader is already running,
    it will respond immediately and we're done. If the normal firmware is
    still running, it won't respond and the probing with the V1 protocol
    will fail. If we then switch to the V2 protocol, the firmware update
    will continue as before.
    
    The result is a firmware updater which supports both bootloader
    protocols without requiring any manual configuration.

--

    Add support for updating the HW OSTC firmware.
    
    Only the bootloader V2 protocol is supported for now.

--

    Add a parser for Intel HEX files.

--

    Add Mares Puck 2 dive computer
    
    This dive computer has the same enclosure as the Mares Puck, but the
    wire protocol is that of the Puck Pro. The original software identifies
    it as a "Mares Puck 2", and the handshake string also contains the
    sequence "PUCK 2", so this string is used to identify the device.

--

    Identify event 0x07 on Suunto d9-style computers as Below Floor.
    
    This event is on when accumulating deco time. Once you reach the floor
    deco time will start decreasing and the event will stop. Going below the
    floor again will re-activate the event.
    
    Signed-off-by: Michael Andreen <harv@ruin.nu>

--

    Decode the IrDA device address as little endian.
    
    This is only a cosmetic change, to make the IrDA device address on
    Windows consistent with the address Linux. There is no functional
    difference because the address is always serialized and deserialized
    internally, and applications shouldn't care about the actual number.
    
    Anyway, the difference in endianness is easy to notice because the
    Uwatec Smart family of devices use the serial number as the IrDA device
    address. On Linux, the address was identical to the serial number, while
    on Windows the byte order was reversed.

--

    Add logging to the IrDA communication.

--

    Log the device name of the serial port.

--

    Add internal support for enumerating serial ports.
    
    For the time being, the serial port enumeration code is of very limited
    use. It's not used anywhere in the library, and as an internal api it's
    also not available to applications. It serves mainly as a reference
    implementation for future use.

--

    Add partial support for the Aeris XR-1 NX.
    
    The Aeris XR-1 NX has very limited memory and doesn't have a
    logbook and profile ringbuffer. Hence downloading dives isn't
    really supported, but even this limited amount of data might be
    useful for someone.

--

    Use only 12 bits for the temperature.
    
    When using all 16 bits for the temperature, the resulting values are
    clearly wrong in some cases. Most likely the upper 4 bits are used to
    store something else. Even with only 12 bits, the resulting temperature
    range (0-409.5°C) should still be more than sufficient.

--

    Post release version bump to 0.4.2.

--

    Release version 0.4.1.

--

    Add support for the new bailout event.
    
    The new bailout event is reported to the application as a normal gas
    change event.

--

    Interpret the 7th bit of the event byte correctly.
    
    In the OSTC3 data format, the 7th bit of the event byte is used to
    indicate whether another event byte is present or not. For the OSTC2,
    this 7th bit remained unused, and I assumed it would eventually get used
    in the same way as the OSTC3 does. But that assumption turns out to be
    wrong. Starting with firmware v2.66 the 7th bit is used for a new
    bailout event.
    
    This patch leaves the existing logic intact, but except for the OSTC3
    format (version 0x23), the maximum number of events bytes is now limited
    to just one byte.

--

    Fix the date/time for the Oceanic Geo 2.0.

--

    Adjust the length based on the firmware version.
    
    The OSTC 3 dataformat does contain the profile length twice: once in the
    main 256 byte header, and again in the small profile header. However due
    to a firmware bug, both values are not identical. The value in the main
    header is wrong and 3 bytes larger than the value in the small profile
    header. This bug was fixed in firmware version 0.93.
    
    Unfortunately we rely on the length in the main header to calculate the
    number of bytes to read when downloading the dive. The consequence is
    that for all dives recorded with firmware 0.93 or later, the length is
    calculated incorrectly, and the download fails. Luckily the firmware
    version is stored in the main header too, and we can adjust the length
    calculation accordingly.

--

    Mark the dc_datetime_mktime parameter as const.
    
    Unlike the corresponding mktime C library function, the libdivecomputer
    function will never modify its argument. By marking the parameter as
    const this is made more explicit.

--

    Fix the temperature for the Aeris Atmos AI 2.
    
    The temperature sign bit is reversed for this model.

--

    Post release version bump to 0.4.1.

--

    Post release version bump to 0.5.0.

--

    Release version 0.4.0.

--

    Add a devinfo event.
    
    The firmware version and serial number are stored in the final block
    of each dive. That makes it very tricky to support the devinfo event
    correctly. For an efficient implementation of the fingerprint feature,
    the devinfo event should be emitted before downloading the manifests
    or the dives. Fortunately it turns out it is actually possible to
    retrieve the firmware version and serial number independently, using
    the special identifier command.

--

    Shutdown the connection cleanly.
    
    A shutdown command should be send to the device, before the connection
    is actually closed. In the absence of this command, the device will
    display an error, even if the data transfer itself was successful!

--

    Fix temperature and tank pressure for the Tusa Element II.
    
    The Tusa Element II is a non air integrated model, and the temperature
    is stored at a different location.

--

    Add support for yet another Oceanic OC1 variant.
    
    The only difference with the two other Oceanic OC1 variants is the new
    model number. I have absolutely no idea what's the purpose of such a
    silly change.

--

    Limit the memory capacity to 256K.
    
    The Mares Matrix, Puck Pro and Nemo Wide 2 have only 256K of memory,
    which is 4 times less compared to the Icon HD. However for some unknown
    reason, trying to download 1024K succeeds, and these devices just
    repeat the same data 4 times. That's why we never noticed the
    difference in memory capacity before.

--

    Add support for the Suunto DX.
    
    The Suunto DX has support for 8 gas mixes (OC) and 3 diluents (CC).
    Because it's still unknown how rebreather dives are stored, we simply
    return all 11 gas mixes. For the rest, the DX data format is very
    similar to that of the existing Suunto models, with only a few
    different offsets here and there.

--

    Prevent an infinite loop.
    
    When the number of parameters is zero, there are no sample values, and
    the offset variable is never increased. The result is an infinite loop.
    In practice this shouldn't happen because there should always be at
    least one sample value (e.g. depth). But if a new data format is
    available, which is not yet supported by the parser, we might be trying
    to interpret the wrong byte.

--

    Replace the hardcoded constants with a layout descriptor.
    
    A side effect is that the mares_iconhd_extract_dives function now
    requires a valid device handle. This shouldn't cause any real problems
    because this function will likely become private some day.

--

    Use a new xml element for the gaschange events.
    
    The new xml element makes the the gaschange events stand out more
    against the other less important events. At the same time it also
    demonstrates the decoding of the packed oxygen and helium percentages.

--

    Add a root element to the xml output.
    
    Without the root element the output isn't valid xml. Although the
    output is supposed to provide a human readable representation for
    internal use only, and thus never really intended for processing by
    third-party applications, it doesn't hurt to turn it into valid xml
    either.

--

    Update the msvc project file.

--

    Include the public header in the implementation file.
    
    In the public header files, all symbols are marked extern C. When using
    a C compiler, there is usually no problem if the header isn't included
    in the C file. But the msvc build system uses the C++ compiler (due to
    the use of some C99 features not supported by the msvc C compiler).

--

    Exclude device descriptors for unsupported devices.
    
    Currently all device descriptors are included, regardless of whether
    the device is actually supported by the library. If IrDA or USB support
    is unavailable, a dummy backend is build which will always fail with
    DC_STATUS_UNSUPPORTED. Thus there is no point in listing those devices
    as being supported. Doing so will only confuse end-users.

--

    Update the README with the new domain name.

--

    Add support for the Heinrichs Weikamp OSTC3.
    
    Although the communication protocol of the OSTC3 is nearly identical to
    that of the Frog, the different size parameters make it hard to share
    the code easily. On top of that, if we ever implement native bluetooth
    communication support, we'll need a completely separate backend anyway.
    Therefore the Frog backend is simply duplicated, with a few OSTC3
    specific changes applied here and there.
    
    The existing ostc parser is upgraded to support the new OSTC3 data
    format.

--

    Fix the gas change events for the Heinrichs Weikamp Frog.
    
    The Frog stores the index of the initial gas mix at the same location
    as the OSTC, but the gas mix percentages are at a different offset, and
    the number of gas mixes is different too. Parsing all the gas mixes in
    advance makes the code easier to read and more future proof.

--

    Replace hardcoded constants with a layout descriptor.
    
    With the layout descriptors, most hardcoded constants are now in a
    central place, which will make it easier to add support for new data
    format variants.

--

    Move duplicated code to a common function.

--

    Fix the parsing of the gas mixes.
    
    If the gas model flag is set to air, the individual gas mix definitions
    are ignored, and a single mix with air is returned instead. For non-air
    dives, only the gas mixes marked as active are returned.

--

    Add a devinfo event containing the serial number.

--

    Flush the serial buffers after opening the port.
    
    Sometimes there are garbage bytes present after opening the serial
    port, which causes the communication to fail. Flushing the buffers
    after a small delay is all it takes to get rid of those bytes.

--

    Fix a potential NULL pointer dereference.

--

    Add support for the Genesis React Pro White
    
    The React Pro White appears to be a newer variant of the React Pro. For
    the communication it uses the newer atom2 protocol, but the data format
    remains (almost) the same as the older React Pro.

--

    Fix the temperature and year for the Genesis React Pro.

--

    Fix the sample rate for the Genesis React Pro.
    
    This model doesn't support a 2 second sample rate. It appears the
    possible sample rate values have been shifted by one to map the value
    zero to a 15 second sample rate.
    
    To avoid any trouble with possible out of range values, the index is
    shifted in a circular way.

--

    Use symbolic constants for the model numbers.

--

    Append the final block to each dive.
    
    There are two good reasons for this change. First of all, it makes the
    Predator data format more consistent with the Petrel data format, which
    also has the final block appended to each dive. But even more important
    is that we might actually need the information stored in the final block
    someday.
    
    The final block contains important information about the device, such as
    the firmware and logbook version. Right now this information is simply
    lost after the download. But if the data format ever changes to support
    some new feature, we'll likely need that information to autodetect the
    correct format.
    
    Unfortunately this also changes the dive format in a non-backwards
    compatible way. However, to minimize the inconvenience, the legacy
    format (without the extra final block) remains supported in the parser.

--

    Add additional descriptors for Uwatec devices.

--

    Avoid unnecessary large memory allocations.
    
    Because the size of a dive isn't known in advance, we use the worst case
    value of 0xFFFFFF (or nearly 16MB). However in practice, the real size
    is many orders of magnitude smaller, even after the decompression.
    Instead of pre-allocating a huge memory buffer, we now start with a much
    smaller one, and increase when necessary.
    
    For the predator and petrel manifests, where the size is known in
    advance, we continue to pre-allocate the exact amount of memory as
    before.

--

    Add support for the native Shearwater Petrel protocol.
    
    The Petrel (with updated firmware) supports an enhanced communication
    protocol, which is more efficient and powerfull than the legacy Predator
    compatibility mode. The new protocol uses data compression for faster
    transfers and supports the ability to selectively download individual
    dives. Last but not least, the new protocol isn't limited to the last
    128kB of logbook data, but can access the full logbook capacity (16MB).

--

    Add support for compressed data packets.
    
    The new Petrel protocol uses a simple data compression scheme to reduce
    the transfer times. The data is broken up into blocks of 32 bytes each.
    Each block except the first is XOR'ed with the previous block, creating
    large runs of zeros due to the similarity of the data. The zeros are
    then run-length encoded (RLE) to save space.

--

    Move the low-level communication to a common file.
    
    This is done in preparation for the implementation of the new Petrel
    protocol, which shares the low level communication with the existing
    Predator protocol.

--

    Replace hardcoded constants with parameters.

--

    Add support for retrieving the transport type.
    
    With the new interface, an application can easily retrieve the
    underlying transport type from the device descriptors and present a
    custom user interface element to the end-user for supplying transport
    specific parameters. For example the serial port for devices using
    serial communcication.
    
    For devices using a usb-serial chipset or the bluetooth Serial Port
    Profile (SPP/rfcomm), the transport type is DC_TRANSPORT_SERIAL, because
    internally the serial emulation layer is used for the communication.

--

    Add a single isinstance function per object type.
    
    Currently, each backend has it's own function to verify whether the
    object vtable pointer is the expected one. All these functions can be
    removed in favor of a single isintance function in the base class,
    which takes the expected vtable pointer as a parameter.
    
    Functions which are called through the vtable, don't need to verify the
    vtable pointer, and those checks are removed.

--

    Rename the backend structure to vtable.
    
    The term "backend" can be confusing because it can refer to both the
    virtual function table and the device/parser backends. The use of the
    term "vtable" avoids this.

--

    Fix time conversion for Shearwater computers
    
    The time read from the Shearwater is already in localtime.
    
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Add support for the Mares Nemo Steel and Titanium.
    
    These two models are simply a variant of the normal Mares Nemo with a
    different material on the outside.

--

    Add support for the Oceanic Pro Plus 3.

--

    Fix the decoding of negative temperatures.
    
    Because temperatures can be negative, we should interpret the stored
    value as a signed integer, even for the absolute values.

--

    Re-order the decostop array to match the enum values.
    
    The enum values have been re-ordered a while ago, but the array was not
    updated to reflect those changes.

--

    Add support for the Aeris Atmos 2.

--

    Add a gitignore file.
    
    Signed-off-by: Cristian Ionescu-Idbohrn <cristian.ionescu-idbohrn@axis.com>

--

    Add support for the Aeris Elite.

--

    Post release version bump to 0.3.1.

--

    Post release version bump to 0.4.0.

--

    Release version 0.3.0.

--

    Add support for the Cressi Leonardo.
    
    This is only a preliminary version. There is certainly some room for
    improvement, but the basic functionality is already in place. That
    should be sufficient for daily use, and possibles issues can always be
    fixed when discovered.

--

    Move the bin/hex conversion functions to a common file.

--

    Fix the fingerprint offset for the Suunto D4i, D6i and D9tx.
    
    When support for these models was introduced, I fixed the date/time
    parsing, but forgot about the fingerprint offset.

--

    Add support for the new D6i firmware.
    
    After the new firmware upgrade, up to three gas mixes are available
    instead of only two. This causes the parsing to fail because there is
    now an extra 6 byte gasmix block in the header.
    
    Unfortunately, we can't rely on the firmware version to detect whether
    this extra gasmix is present or not. In theory the dive computer can
    contain dives in both the old and the new format. Because the firmware
    version is a property of the device, and not stored inside each dive,
    using the firmware version would either cause the old or the new dives
    to fail parsing. This appears to be the approach DM4 is using.
    
    According to some sources on the internet, the logbook gets erased
    during the firmware update. However, according to the memory dumps I
    received, that appears to be incorrect. The old dives are still
    present, and it seems it's only DM4 that fails to download them.
    
    So we need an alternative solution. After a detailed analysis of all
    the Suunto dives at my disposal, I noticed something interesting. The
    first 5 bytes of each dive are almost static. There are only 5
    different variations:
    
    0061906216
    0061A06216
    0062909118
    0062C07118
    0063C07118
    
    The interpretation of these bytes is currently unknown, but the second
    byte might be some kind of data format version. Each model always has
    the same value here, and for the D6i it changes after the firmware
    update:
    
    0x61: D4, D6, D9, Cobra 2, Cobra3, Vyper 2, Vyper Air
    0x62: D4i, D6i (old firmware), D9tx, HelO2
    0x63: D6i (new firmware)
    
    This can't be coincidence, so we use this byte to detect the presence
    of the extra gasmix.

--

    Simplify parsing the variable size gasmix section.
    
    The HelO2, D4i, D6i and D9tx all use the same data format for the gas
    mixes. The only difference is the number of gas mixes and the initial
    byte offset. With this knowledge, we can easily use the same code for
    all models. An additional advantage is that because the profile
    configuration data is stored immediately after the gasmix section, we
    can also replace the hardcoded offset with a simple calculation.

--

    Use absolute byte offsets for the Suunto HelO2.
    
    Absolute byte offsets are a lot more convenient when using the code as
    the reference documentation for interpreting the raw binary data.

--

    Remove the obsolete SKIP macro.
    
    This macro was used to compensate for the fact that the 4 bytes at the
    start of each dive, containing the previous and next dive pointers, are
    stripped. With the SKIP macro the byte offset remained the same as in
    the documentation. Nowadays, this compatibility isn't necessary anymore
    and it only makes interpreting the raw binary data more difficult.

--

    Add support for the Seemann XP5.

--

    Add support for a second Aeris Elite T3 variant.
    
    This second variant only seems to differ from the first variant in the
    different model code and the version string.

--

    Fix the tank pressure decoding for the Hollis DG03.

--

    Fix the unit conversion for the max depth.
    
    The max depth is stored in imperial units (feet), and should be
    converted into metric units (meter). But for some reason this unit
    conversion was omitted.

--

    Decode the serial number as a 32 bit number.
    
    Apparantly there are also two different type of serial numbers present,
    and their interpretation depends on the application. The Windows Dive
    Organizer application shows both a serial number (byte offset 0x04) and
    a warranty number (byte offset 0x0C). However, the Mac OS X Divers'
    Diary application shows the number at byte offset 0x0C as the serial
    number. Very confusing. For now, we just stick to the number at byte
    offset 0x0C, because that's the number that is shown by the device
    itself.

--

    Fix the decoding of the Suunto serial numbers.
    
    The serial numbers were not decoded at all. The raw bytes where simply
    converted into an arbitrary 32 bit integer. Now the serial number
    matches the real serial number as shown by the device.

--

    Deco and ndl support for the Atomic Aquatics Cobalt
    
    The Cobalt tracks only the NDL time in the samples. There are however
    two indications when the dive changes into a decompression dive, but
    they don't always occur at the same time and may or may not appear in
    the same sample. The first indication is that the NDL time goes to zero
    and the other is the first occurrence of the "deco schedule computed"
    bit (0x02) in the violation byte of the sample.
    
    As soon as the NDL time goes to zero, an attempt is made to generate a
    deco schedule. Depending upon the algorithm used, a schedule may or may
    not have any stops, even though the NDL time is zero. If the schedule
    does generate deco stops, the deco schedule computed bit is set in the
    violation byte of the sample. This bit is set each time a non-zero
    schedule is computed. But because this bit is immediately cleared after
    the sample has been stored, and only set again at the completion of the
    next schedule computation, not every sample will have this bit set.
    
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Add support for the Mares Puck Pro.

--

    Add support for the Mares Matrix.
    
    The Matrix uses the same communication protocol as the Nemo Wide 2,
    except that the sending the request packets with just a single write
    operation doesn't seem to work. That's very surprising because it
    caused no problems for the Nemo Wide 2 or the Icon HD!
    
    The first two bytes of each request packet are probably some kind of
    command type. These two bytes are answerred immediately with an ACK
    byte (0xAA). Once this ACK byte has been received, the payload of the
    command (if any) can be sent, and finally the response packet can be
    received.
    
    I suspect that when trying to send the entire command at once, the
    device somehow doesn't receive the payload bytes correctly. Maybe it's
    still busy processing those first two bytes, which causes the remainder
    of the packet to get dropped? That might explain why the version
    commands is not affected, because it doesn't have any payload bytes!

--

    Hardcode the delay between packets.
    
    The application shouldn't have to deal with the delay between packets.
    If the default value isn't good enough, that should be fixed internally
    and not on the application side.

--

    Add support for trimix gas changes.
    
    The second gas change event (type 0x06) contains both the oxygen and
    helium percentages. These are now reported correctly with the new
    GASCHANGE2 event.

--

    Add deco sample support for Suunto d9 based devices
    
    The D9 family has begin and end of the deco event and we can therefore
    convert this to the deco sample. For compatibility with existing software
    we keep the events around.
    
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Re-order the constants in the dc_deco_type_t enum.
    
    The SAFETYSTOP is conceptually somewhere in between the NDL and the
    DECOSTOP, so it makes sense to re-order the constants in the enum to
    reflect this order.

--

    Add gas changes and violation events for Atomic Aquatics Cobalt
    
    These are based on the documentation we have and have been tested and
    verified against actual dive data (with the exception of the pO2 and
    ascent speed violations).
    
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Fix gas handling for OSTC
    
    Two issues:
    - the OSTC counts its gases 1-based, not 0-based
    - dives don't always start with the first gas. Simply create a gas change
    event right after the first time sample that informs the application what
    the first gas mix is
    
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Log the date/time and version in the example applications.

--

    Reverse the order of the include directories.
    
    The version.h header file is generated by autoconf and therefore
    located in the build directory and not the source directory. If
    building out-of-tree, and a version.h header file is accidentally
    present in the source tree, the wrong file will be picked up.
    
    By reversing the order of the include directories, the build directory
    is searched first, and the correct header file will be used.

--

    Include the git commit SHA1 in the version number.
    
    For bug reports it's very convenient to know the exact version. For
    release builds, the standard version triplet (major.minor.micro) is
    more than sufficient, but that's not the case for development builds.
    Due to the post-release version increment, development builds already
    have a version number that is distinct from previous releases, but
    including the git commit SHA1 is even more accurate.
    
    On Windows, the git commit SHA1 is also embedded in the version
    resource.

--

    Add a new vendor event.
    
    The new vendor event provides a mechanism to deliver auxiliary data,
    which is automatically retrieved during the data transfer, but not
    accessible through the library interface otherwise. Possible examples
    include handshake data and/or device identification data.
    
    This event is mainly intended for diagnostic purposes, in combination
    with the memory dumping support. Very few applications will actually
    need it for anything else.

--

    Move the version string to the common device structure.
    
    The version string can be shared by all three backends, which will make
    it easier to use the version data directly from the common code.

--

    Add a small delay before retrying a packet.
    
    If the first attempt fails, that might indicate the device isn't ready
    yet to service requests. In that case immediately retrying again isn't
    the right solution. Adding a small delay seems to increase the success
    rate, so it's a good idea anyway, regardless of the underlying reason.

--

    Update the msvc project file.

--

    Hardcode the maximum number of retries.
    
    The application shouldn't have to deal with the maximum number of
    retries. If the default value isn't good enough, that should be fixed
    internally and not on the application side.

--

    Remove the obsolete timestamp functions.
    
    These timestamp functions offer no real advantage and applications
    should be using the device independent fingerprint feature instead.

--

    Remove calls to the version functions from the examples.
    
    These functions are already called internally, and there is no need to
    call them explicitely in the example applications again.

--

    Read the version info when opening the connection.
    
    The d9 backend already reads the version info, to autodetect the
    protocol variant. When doing the same in the vyper2 backend, we don't
    have to read the version info again when downloading the dives.

--

    Add timestamps to the default log function.
    
    Adding timestamps to the default logging function is very convenient to
    investigate all kinds of timing related issues.

--

    Simplify the version matching logic.
    
    The hardcoded version strings are now grouped into arrays, according to
    their corresponding layout descriptor. The main advantage of using
    arrays is that new versions strings can now easily be added, without
    having to modify any code.

--

    Add support for the Mares Nemo Wide 2.
    
    The Nemo Wide 2 uses the same communication protocol as the Icon HD,
    except for two differences:
    
    The Nemo Wide 2 requires a different baudrate and parity setting.
    Unfortunately it doesn't seem possible to autodetect the correct
    protocol variant at runtime. Attempting to proceed with incorrect
    settings will render the device unresponsive and requires a battery
    reset to recover.Therefore the model code needs to be provided as an
    extra parameter, when opening the connection.
    
    The Nemo Wide 2 also appears to have trouble downloading the entire
    memory with a single request. Therefore the single large request is
    split into many smaller ones. The offical Mares application uses 256
    byte packets, and so do we. The Icon HD keeps using the large packets
    because they are significant faster.
    
    The extra model parameter breaks backwards compatibility!

--

    Add support for the Shearwater Petrel.
    
    The Petrel is slightly different from the Predator because the device
    reorders the internal ringbuffer before sending the data. The most
    recent dive is always the first one, and there is no need to search for
    it, like we have to do for the Predator.

--

    Fix a typo in the Sherwood Wisdom 3 model number.

--

    Fix a redefinition warning for the ERROR macro.
    
    Apparantly, the windows wingdi.h header file already defines the
    ERROR macro. By defining the NOGDI macro before including the
    windows.h header file, we can prevent the wingdi.h file from being
    included and thus avoid the warning. We don't need that header for
    anything anyway.
    
    Because the libusb header file includes the windows.h file
    explicitly, it needs the same fix.

--

    Skip the size validation for unused divisors.
    
    The recently introduced CNS support caused a regression for older
    firmware versions. If a firmware doesn't support a certain sample
    yet, the corresponding sample divisor and size are both equal to
    zero (the default value for unused bytes). However, because the
    size was always checked, regardless of whether the sample is
    actually present or not, this zero size caused the parsing to fail.
    
    To fix the regression, the size is now only checked when the
    divisor indicates the sample is actually present.

--

    Add support for the Aeris A300 AI.

--

    Update the example application for the new sample types.
    
    The example application is updated to support the new setpoint,
    ppO2, CNS and decompression samples that have been introduced. The
    NDL event is removed again.

--

    Convert decostop / ndl to samples
    
    Having these as events seems less useful since for many dive computers
    there are data with every sample - so it makes much more sense to have
    these as part of the sample.
    
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Add support for setpoint, ppO2 and CNS
    
    So far only OSTC and Shearwater Predator are supported. For the OSTC we
    support CNS and setpoint changes in the samples (the current hardware
    doesn't actually support ppO2 sensors and for the older hw that does I
    don't have the correct encoding information).
    
    For the Predator we support only the "average ppO2 during the sample".
    
    The Predator also gives us a CNS value at the end of the dive - I don't
    quite know yet how to deliver that back to the consumer. Possibly as CNS
    value in the very last sample? That would at least be consistent.
    
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Reduce the amount of gaschange events.
    
    Previously, gaschange events were emitted for every single sample.
    With this change, the event is only emitted when the gas mix has
    actually changed.

--

    Support both the OC and CC gas mixes.
    
    The Shearwater Predator has two different sets of gas mixes for OC
    (Open Circuit) and CC (Closed Circuit) mode. Since the dive mode can
    be switched during the dive (e.g. in a bailout scenario), there is no
    easy way to select one of both sets. With this change, both sets are
    returned. It's not a perfect solution, but for CC dives it's already
    an improvement.

--

    Add support for the Shearwater Predator.

--

    Remove the version function for the Uwatec Smart.
    
    The Uwatec Smart protocol supports reading individual settings. However
    the version functions only reads those three values that we use
    internally (model, serial number and device clock). That's a very
    arbitrary subset and it would be much better to support reading
    specific values. But that's something for later...

--

    Move the version function to the device specific api.
    
    The version function requires device specific knowledge to use it (at
    least the required buffer size), it is already called internally when
    necessary, and only a few backends support it. Thus there is no good
    reason to keep it in the high-level public api.

--

    Add some missing size macros.
    
    These size macros are required to use the device specific functions
    correctly and should therfore be exposed in the public api.

--

    Remove the page, packet and memory size macros from the public api.
    
    These macros are used internally and don't need to be exposed. In some
    cases, the actual values are not even constant, but dependant on the
    model and/or the firmware version.

--

    Autodetect the three OSTC variants.
    
    The exact OSTC variant can be detected by means of the serial number.
    Each of the three variants is now assigned an artifical model number,
    and included explicitly in the list of supported models.

--

    Check the salinity byte for out of range values.
    
    Apparently some older firmware versions don't support the salinity
    setting. Because unused bytes are initialized with zero, the salinity
    value will be reported as being zero.
    
    To fix this unexpected value, the salinity factor is first checked for
    valid values. If the value is out of range, a DC_STATUS_UNSUPPORTED
    error is returned to indicate the absence of the value.

--

    Fix a regression in the depth calculation.
    
    Apparently some older firmware versions don't support the salinity
    setting. Because unused bytes are initialized with zero, the salinity
    adjustment results in a division by zero, which converts all depth
    values to infinity.
    
    To fix this regression, the salinity factor is first checked for valid
    values. If the value is out of range, no salinity adjustment is done,
    and the previous behaviour is retained.

--

    Update the example application for the new fields.
    
    Update the example application to support the new salinity and
    atmosperic pressure fields. Because the new fields are not supported by
    all backends, they are only included in the output when available.

--

    Add support for a second Sherwood Insight variant.
    
    There appears to be two very different versions of the Sherwood Insight.
    The old Insight needs the veo250 backend, while the newer Insight 2
    needs the atom2 backend. Currently only the newer version was included
    in the list of supported devices, and to increase the confusion it was
    even named after the old version.
    
    With this patch, the old version is added to the list, and the new
    version is renamed to "Insight 2".

--

    Add some documentation for the event values.
    
    For the new packed 16bit event values, some minimal documentation is
    required to interpret the value correctly.

--

    This adds support for a subset of the events the OSTC provides.
    
    - PO2 warnings (high and low both mapped to the same SAMPLE_EVENT_PO2
      event)
    - SPEED warning (which according to hw isn't emitted at this point)
    - Deco stop violations (both deep and regular mapped to same
      SAMPLE_EVENT_CEILING event)
    - Deco ceiling and time (this is reported as a series of
      SAMPLE_EVENT_DECOSTOP events with packed deco stop depth (in m) and
      time (in seconds)
      A SAMPLE_EVENT_NDL event (with an optional value indicating the non-stop
      time remaining) indicates that the ceiling has been resolved
    - Gas change (reported as SAMPLE_EVENT_GASCHANGE2, using another
      unfortunate O2% / He% semantic that is used in the
      SAMPLE_EVENT_GASCHANGE
      This also covers the manual gas set event of the OSTC
    - Manual Marker (reported as SAMPLE_EVENT_BOOKMARK)
    
    The two new events (SAMPLE_EVENT_GASCHANGE2 and SAMPLE_EVENT_NDL are added
    to the universal app as well.
    
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Add support for salinity and atmospheric pressure
    
    This adds a new type dc_salinity_t and associated enum dc_water_t.
    
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Correct the OSTC depth calculation
    
    This now uses the same formula as the OSTC uses internally which will get
    the values reported by libdivecomputer to be consistent with what is
    displayed on the OSTC.
    
    Signed-off-by: Dirk Hohndel <dirk@hohndel.org>

--

    Add support for a second Aeris Epic variant.

--

    Fix the parser for the Hollis DG03.
    
    The date/time value and the sign bit of the sample temperature were
    parsed incorrectly.

--

    Post release version bump to 0.2.1.

--

    Post release version bump to 0.3.0.

--

    Release version 0.2.0.

--

    Use the ifset macro to append the version suffix.
    
    The version suffix is always defined. The correct condition for
    appending the version suffix is whether it's defined as the empty
    string or not.

--

    Include the msvc project file in the tarballs.

--

    Use non-standard replacement functions for msvc.

--

    Add explicit casts for the msvc C++ compiler.

--

    Update the msvc project file.

--

    Update the list with supported models.

--

    Take the gas model into account to parse the gas mixes.
    
    When the gas model setting is set to air, the individual gas mix
    definitions retain their previous (non-air) values. This is convenient
    to avoid having to adjust the gas mixes again on your next nitrox or
    mixed gas dive. But the consequence is that for air dives, the gas model
    should take precedence over the individual gas mix definitions, and a
    single mix with air is returned instead.

--

    Fix the gas mix parsing.
    
    The Suunto D9tx stores the gas mix definitions at a different offset
    compared to the D4i and D6i.

--

    Don't exceed the maximum number of bytes.
    
    We received data from a device where the end-of-profile marker is
    missing. Because the device fails to locate the last dive, it goes into
    an infinite loop, and keeps sending the same sequence of dives over and
    over again. As a result, we receive more data than expected, and the
    assert in the progress event is triggered.
    
    We now keep track of the maximum number of bytes remaining and abort
    once the limit is passed. The values of the progress events are capped
    at the maximum value to avoid the assertion.

--

    Add support for the Uwatec Galileo Trimix.

--

    Fixed date parsing for Oceanic VEO 3.0

--

    Verify the header in the logbook and profile are identical.
    
    Unless we have a bug in the logbook processing logic, both logbook
    headers should always be identical. But it doesn't hurt to check
    explicitly.

--

    Finish immediately if there are no dives available.
    
    When trying to continue when no dives are available, malloc() will be
    called to allocate zero bytes. The result is implementation defined and
    may return a NULL pointer. Since that would be interpreted as an error,
    it's safer to finish immediately.

--

    Return a negative value to indicate truncation.
    
    If the maximum availalbe buffer size is zero, no data can be written
    (not even the NULL terminator), and a negative values should be returned
    to indicate truncation.

--

    Add a command line option to increase the loglevel.
    
    By default, the universal application will always log error and warning
    messages, but the loglevel can be increased to also log info and debug
    messages.

--

    Adjust the default logformat.
    
    The file, line and function information is now only printed for error
    and debug messages.

--

    Add additional messages for diagnostic purposes.

--

    Add a convenience function for logging hexdumps.
    
    The main logging function isn't really suitable for generating inline
    hexdumps directly from the binary data. There is simply no format string
    available for converting array data types with just a single printf
    call.
    
    A possible solution would be to require the caller to perform the string
    conversion before calling the standard logging function. But that's not
    acceptable, because it doesn't play well with the ability to disable the
    logging at compile time, requires extra memory and clutters the calling
    code unneccessary.
    
    The new function is a compromise which sacrifices flexibility for
    simplicity, by using a hardcoded output format with a custom prefix.
    It's not a perfect solution, but it works well enough for the intended
    purpose.

--

    Add support for the Oceanic OCS.

--

    Add an option to enable support for pseudo terminals.
    
    Pseudo terminals are very convenient for testing purposes, but they are
    not fully compatible with real serial (or even usb-serial) hardware.
    With the new option, some workarounds can be enabled to hide the
    differences and increase compatibility. Although these workarounds
    shouldn't cause any problems in production builds, the advise is to
    disable this feature.
    
    A few ioctl's are not supported for pseudo terminals. They fail with
    EINVAL (Linux) or ENOTTY (Mac OS X). Since these specific error codes
    should not occur under normal conditions, they are simply ignored when
    pseudo terminal support is enabled.
    
    The TIOCEXCL ioctl (exclusive access) is also problematic. The TIOCEXCL
    setting is shared between the master and slave side of the pty. When the
    setting is applied on the slave side, it persists for as long as the
    master side remains open. The result is that re-opening the slave side
    will fail with EBUSY, unless the process has root priviliges. Since this
    is very inconvenient, the TIOCEXCL setting is not used when pseudo
    terminal support is enabled.

--

    Enable exclusive access mode.
    
    With exclusive access mode, no further open() operations on the terminal
    are permitted, except for a process with root priviliges. Non-root
    processes will fail with EBUSY. This change will prevent other processes
    from accidentally messing up the communication. It also makes the
    behaviour similar to Windows, where serial ports are always opened with
    exclusive access.

--

    Properly store the context pointer internally.
    
    I forgot to update the device and parser initialization functions to
    store the context pointer into the objects. As a result, the internal
    context pointers were always NULL.

--

    Update the dummy IrDA backend for Mac OS X.
    
    I forgot to update the dummy IrDA backend with the latest changes. The
    error, init and cleanup functions have been removed, and the
    irda_socket_open function now takes a context pointer.

--

    Fix a mistake introduced during the latest merge commit.
    
    The status codes in the new EXITCODE macro were not updated to use the
    new constants with the namespace prefix. As a result building fails when
    compiling with libusb support.

--

    Add a wrapper for the vsnprintf function.
    
    The non-standard vsnprintf implementation provided by MSVC doesn't
    matches the C99 function. The wrapper function provides a consistent
    interface on top of the native functions.

--

    Silence compiler warnings (unused variables).
    
    When the logging is disabling, several compiler warnings regarding
    unused variables appear. With the cast to void and sizeof trick the
    warnings are silenced without causing any side effects.

--

    Add an option to disable the logging.
    
    With the new option, the library can be compiled with the entire
    logging infrastructure disabled. The public api remains unchanged, but
    the internal logging functions will have no effect anymore.
    
    In practice the overhead of the logging functions should be quite
    small, and disabling the logging at runtime might be more convenient.
    Especially because troubleshooting will become much harder without any
    logging.

--

    Move the logging code to the examples.
    
    With the application defined logging function, the actual logging is not
    performed by the library anymore, and the code belongs in the
    applications.

--

    Remove the obsolete error functions.

--

    Integrate the context object in the serial code.

--

    Integrate the context object in the IrDA code.

--

    Integrate the context object in the library.
    
    The public api is changed to require a context object for all
    operations. Because other library objects store the context pointer
    internally, only the constructor functions need an explicit context
    object as a parameter.

--

    Add a convenience function for logging system errors.
    
    The new convenience function provides a centralized and threadsafe
    function for logging system errors. The previous functions are
    deprecated and will be removed after the transition to the new context
    based logging.

--

    Add support for an application defined logging function.
    
    An application can now register an application defined callback
    function, which will perform the actual logging. This provides
    additional flexibility compared to logging to stderr with a hardcoded
    format. Applications can now easily display the messages in their user
    interface, customize the format, etc.
    
    Although the internal logging function is a printf like function, the
    arguments are converted into a plain string before being passed to the
    callback function. This greatly improves interoperability with
    programming languages which don't support C style variadic functions
    (e.g. Python, C#, etc).

--

    Add a new library context object.
    
    With the introduction of a context object, library initialization and
    shutdown can be performed without requiring any global state. A single
    process can use multiple independent contexts without any problems. The
    lack of a global state also improves the thread-safety of the library.
    
    At the moment, the new context object is primary used to implement an
    improved logging system.

--

    Require a serial handle for the sleep function.

--

    Remove the IrDA init and cleanup functions.
    
    The Windows WSAStartup() and WSACleanup() functions are now called
    automatically when opening and closing IrDA sockets. This causes no
    problems because these functions are reference counted and can be called
    multiple times.
    
    In practice nothing changes because the Uwatec Smart backend already
    called these functions for every connection.

--

    Remove some unnecessary helper functions.

--

    Don't ignore errors in the ascii/binary conversions.
    
    Instead of silently ignoring errors and logging a warning, the
    conversion functions now return an error code that can be checked by the
    caller.

--

    Don't include unnecessary header files.
    
    Due to the use of the convenience functions, the device specific header
    files are no longer necessary, and can be replaced with the high-level
    header files.

--

    Add support for the Aeris Manta.
    
    The last memory page is marked as unreadable, and the profile ringbuffer
    end is set to 0xFE00.

--

    Fix the libusb timeout handling.
    
    A bulk transfer of more than 8K of data takes about one second with the
    Cobalt. Because we use a one second timeout combined with a 10K buffer,
    such a transfer can easily exceed the timeout. Normally this shouldn't
    be a problem because the leftover data is supposed to be received with
    the next transfer. However to break out of the loop we check the actual
    number of bytes received, and ignore the libusb LIBUSB_ERROR_TIMEOUT
    return code.
    
    To fix this problem, the internal buffer is reduced to 8K, and the
    timeout is increased to 2 seconds. This should avoid hitting the timeout
    and allows to consider LIBUSB_ERROR_TIMEOUT a fatal error.

--

    Fix some ioctl calls on 64bit Mac OS X.
    
    On Mac OS X (and probably the other BSD's too), the ioctl() syscall
    takes an 'unsigned long' integer as the request parameter. On 64bit
    systems this is a 64bit type, while on 32bit systems it's a 32bit type.
    
    Some of the request constants are defined as 32 bit negative numbers.
    Casting it to a 64bit value will perform a sign extension operation to
    preserve the negative value. Because this results in a different request
    code when interpreted as an unsigned integer, the ioctl() call fails
    with ENOTTY. For example TIOCMBIS is defined as 0x8004746c and becomes
    0xffffffff8004746 after the sign extension.
    
    Linux 64bit is unaffected by this problem. None of the request constants
    has the sign bit set, and thus the sign extension has no effect. For
    example TIOCMBIS is defined as 0x5416.
    
    By using an unsigned integer type, the sign extension can be avoided. We
    use the 'unsigned long' type in case one of the request constants
    happens to be defined as a 64bit number.

--

    Fix a build error with automake 1.12 or newer.
    
    Since automake 1.12, the warnings in the category 'extra-portability'
    are now enabled by '-Wall'. Because of this change, linking libtool
    archives requires the new AM_PROG_AR macro.

--

    Fix the profile ringbuffer end.
    
    The profile ringbuffer is smaller than expected. The purpose of the
    extra area after the profile ringbuffer is currently unknown.

--

    Update the examples to use the new convenience functions.

--

    Add a dc_parser_new convenience function.
    
    The devinfo and clock event data is now cached internally at the device layer.
    This allows the new dc_parser_new() convenience function to retrieve the event
    data directly from the device handle, and applications don't have to deal with
    the events anymore to create a parser.

--

    Add a dc_device_open convenience function.
    
    With the introduction of the device descriptors, the new dc_device_open()
    convenience function can take care of the mapping from a particular model to
    the corresponding backend internally, without needing any device specific
    knowledge in the application. An application can simply query the list of
    supported devices, and the library will automatically do the right thing.

--

    Add the device enumeration support.
    
    Applications can now enumerate all the supported devices at runtime,
    and don't have to maintain their own list anymore. The internal list
    does include only those devices that have been confirmed to work at
    least once without any major problems.

--

    Add a new device descriptor object.
    
    As the name already indicates, a device descriptor is lightweight
    object which describes a single device. Currently, the api supports
    getting the device name (vendor and product) and model number. But
    this can extended with other features when necessary.

--

    Add a generic iterator interface.

--

    Introduce a namespace prefix for the high-level public api.
    
    Adding the "dc_" namespace prefix (which is of course an abbreviation
    for libdivecomputer) should avoid conflicts with other libraries. For
    the time being, only the high-level device and parser layers are
    changed.

--

    Use a common backend type for the device and parser layers.

--

    Use common status codes for the device and parser layers.

--

    Separate private and public headers.
    
    The public header files are moved to a new subdirectory, to separate
    the definition of the public interface from the actual implementation.
    Using an identical directory layout as the final installation has the
    advantage that the example code can be build outside the project tree
    without any modifications to the #include statements.

--

    Fix the detection of the last dive.
    
    It looks like the Icon HD erases old dives partially with 0xFF bytes
    before overwriting them with new dives. If the head of the oldest dive
    has been erased, the length field which is stored in the first 4 bytes
    is erased as well, and we can use it to detect the last dive.

--

    Add support for eeprom bank number 2.
    
    Devices with firmware version 2.22 (or greater) have an additional
    eeprom bank with new custom functions.

--

    Add a version suffix.
    
    For development snapshots, a 'devel' suffix is added to distinguish from
    the final release. If necessary, the suffix can also be used for 'alpha'
    and 'beta' releases.

--

    Post release version bump to 0.1.1

--

    Enable the model hint to speedup the autodetection.

--

    Add support for the Heinrichs Weikamp Frog.

--

    Add a version suffix.
    
    For development snapshots, a 'devel' suffix is added to distinguish from
    the final release. If necessary, the suffix can also be used for 'alpha'
    and 'beta' releases.

--

    Post release version bump to 0.2.0

--

    Release version 0.1.0

--

    Add a README file.

--

    Fix the Oceanic Veo 1.0 layout descriptor.

--

    Add partial support for the Oceanic Veo 1.0
    
    The Veo 1.0 has very limited memory and doesn't have a logbook and
    profile ringbuffer. Hence downloading dives isn't really supported, but
    even this limited amount of data might be useful for someone.

--

    Add support for the Aeris F10.

--

    Remove the hardcoded logbook entry size.

--

    Fix the gas mix parsing for the Oceanic VT 4.x.

--

    Adjust the header size calculations.

--

    Allow easier disabling of the tank switch and surface samples.

--

    Allow easier disabling of the individual sample types.

--

    Fix the gas mix parsing for the Aeris CompuMask.

--

    Add support for the Oceanic Atom 3.1

--

    Add a small delay before flushing the serial line.
    
    Sometimes there are a few garbages bytes received before the preamble
    bytes. This typically happens when trying to download again after a
    failed attempt. However trying to flush them immediately after opening
    the serial port doesn't work.

--

    Increase the read timeout to 4 seconds.
    
    When the OSTC receives the download dives command, it responds
    immediately with the preamble bytes. But then it does a linear search
    through its internal memory to locate the end-of-profile marker. As a
    result the response time increases when the marker is located near the
    end of the memory area. In the worst case scenario, the response time
    can exceed the 3 second read timeout with a few milliseconds.
    
    Since the required timeout depends on the total amount of profile
    memory, this problem was indirectly introduced with firmware v1.91,
    which doubled the amount of profile memory from 32K to 64K.

--

    Replace the fixed delay with the new half-duplex emulation code.

--

    Add support for half-duplex emulation.
    
    When using half-duplex communication (e.g. only a single wire for both
    Tx and Rx) a data packet needs to be transmitted entirely before
    attempting to switch into receiving mode.
    
    For legacy serial hardware, the tcdrain() probably works as advertised,
    and waits until the data has been transmitted. However for common
    usb-serial converters, the hardware doesn't provide any feedback to the
    driver, and the tcdrain() function can only wait until the data has been
    transmitted to the usb-serial chip. There is no guarantee that the data
    has actually been transmitted by the usb-serial chip.
    
    As a workaround, we wait at least the minimum amount of time required to
    transmit the data packet over a serial line, taking into account the
    current configuration.

--

    Integrate the tcdrain() call into the write function.

--

    Substract the dive time from the date/time value.
    
    The OSTC doesn't store the start of the dive, but the exit time. Hence
    the dive time needs to be substracted.
    
    For dives with format version 0x21, we prefer the total dive time in
    seconds stored in the extended header. This time value also includes the
    shallow parts of the dive, and therefore yields the most accurate start
    time. The dive time is rounded down towards the nearest minute, to match
    the value displayed by the ostc. For dives with the older format version
    0x20, this value isn't available and we default to the normal dive time.

--

    Add a wrapper for the mktime function.

--

    Fix the freedive mode detection for the Mares Puck Air.

--

    Spelling correction.

--

    Add support for parsing the events.
    
    The event bits have been verified for a Mares M1 only.

--

    Fix the oxygen percentage for air dives.
    
    When the dive mode setting is set to air, the oxygen percentage stored
    in the header is different from the expected 21%. It might be the last
    used nitrox percentage.

--

    Adjust the profile ringbuffer to exclude the last 512 bytes.

--

    Skip gaps between two consecutive dive profiles.
    
    The assumption that two consecutive dive profiles are stored without any
    gaps in between them, appears to be incorrect in some cases. Instead of
    failing with an error we just skip those gaps now.

--

    Disable pressure samples for the Oceanic Veo 3.0.

--

    Mark the last memory page on an Oceanic Veo 3.0 as unreadable.

--

    Add support for the Darwin Air tank pressure.

--

    Improve the communication with Darwin Air devices.
    
    We received a report of a Darwin Air device which has a very high error
    rate. The majority of the echo packets is incorrect, but since this
    doesn't seem to have any effect on the actual data packet, we can just
    ignore this error. If there happens to be a more serious error, it will
    be detect in the data packet.
    
    Sometimes there were also a some garbage bytes received at startup.
    Adding a small delay seems to fix this.

--

    Fix the temperature for the Oceanic ProPlus 2.1.

--

    Add support for the Oceanic OC1 Pioneer.

--

    Revert back to a standard baudrate on Unix.
    
    The linux USB CDC-ACM driver, which is used by the Mares Icon HD
    interface, doesn't support the ioctl's to configure a custom baudrate.
    But since the actual baudrate doesn't seem to matter at all, we revert
    back to the nearest standard baudrate.
    
    Because custom baudrates are confirmed to be supported on Windows and
    Mac OS X, those platforms can keep using the non-standard baudrate.

--

    Add support for the Oceanic VT4.1

--

    Add a delay between sending the commands.
    
    When trying to send the commands as fast as possible, without any delay,
    the failure rate is very high. Almost every single packet fails with a
    timeout at first. Retrying the packet works, but those many timeouts
    make the download extremely slow. Adding a small delay avoids the much
    more expensive timeout and speeds up the transfer significantly.

--

    Rename the example application too.

--

    Add a command line parameter to specify the model code.

--

    Rename the backend from darwinair to darwin.
    
    The name change makes it more obvious the backend supports both the
    Darwin and the Darwin Air, and it's a shorter name too.

--

    Add support for the Mares Darwin.
    
    The Darwin and Darwin Air share a very similar layout, but with a few
    differences here and there. Unfortunately, there seems to be no way to
    autodetect the exact model during the download. Therefore, an extra
    model parameter is added to select the appropriate model manually.

--

    Replace the hardcoded constants with a layout descriptor.
    
    A side effect is that the mares_darwinair_extract_dives function now
    requires a valid device handle. This shouldn't cause any real problems
    because this function will likely become private some day.

--

    Remove the init command from the initialization sequence.
    
    The init command appears to behave more like a hard reset. If the
    command is sent during the communication, the device immediately closes
    the connection and no further communication is possible without
    disconnecting and reconnecting the device.
    
    Sending the command at the start of the communication seems to require a
    long delay before sending the next command. However the communication
    works equally well without sending this command. For some devices it
    even improves the success rate of the initialization sequence, and thus
    there is no reason to keep it.

--

    Add a devinfo event for the Dacor Darwin Air.

--

    Add the example application for the Dacor Darwin Air.

--

    Add support for the Dacor Darwin Air.

--

    Remove unnecessary checks.

--

    Redefine the packet size explicitly.
    
    The packet size for the nemo and puck backends happens to be identical.
    But the value for the nemo backend is truly fixed, while the value for
    the puck backend can be adjusted. To avoid breaking the nemo backend
    when changing the default value, we redefine the packet size explicitly
    to the correct value.

--

    Move the low-level communication to the common layer.

--

    Remove the common device structure for the Mares Nemo.
    
    The common device structure was used only for sharing the fingerprint
    and layout descriptor, but the nemo backend doesn't even store a layout
    descriptor, and the fingerprint can equally well be passed around as a
    function argument.

--

    Add a delay between sending the init and version command.
    
    Some devices are having problems during the initialization sequence. The
    extra delay appears to improve the success rate for the affected
    devices. There is obviously a small performance penalty, but being able
    to establish a reliable connection with all devices is more important.

--

    Try to correct an invalid model code.
    
    We received data from an Icon HD Net Ready with a model code equal to
    0xFF, which is an invalid value. Fortunately we can figure out the
    correct model code from the data in the version packet.

--

    Add support for the pressure samples.

--

    Don't use asserts for parameter validation.

--

    Add read support for the Mares Icon HD.

--

    Add the libusb dependency to the pkg-config file.
    
    When linking dynamically, the shared library contains a reference to all
    external dependencies, and the linker can easily resolve them. However
    when linking statically, all external dependencies have to be specified
    explicitly. This rule also applies to dependencies that are not exposed
    through the public api.
    
    The pkg-config Requires.private field is used to support both static and
    dynamic linking correctly.

--

    Skip incomplete dives.
    
    We received an interesting case of a dive computer whose battery died
    during a dive. Apparantly the device recorded some samples, but failed
    to terminate the dive properly. In the linked list, the next pointer of
    this dive points to itself, which is obviously an invalid value.
    
    I suspect the device initializes the next pointer to point to itself at
    the start of a new dive, and updates it again with the correct value
    once the dive has finished. But due to the battery failure, that last
    step never happened.
    
    Anyway, since we are traversing the linked list backwards, we don't need
    the next pointer, and we can simply skip the incomplete dive. The error
    is not returned immediately anymore, but delayed until the end of the
    download.

--

    Validate the ringbuffer pointers before using them.

--

    Adjust the total amount of memory for the newer Suunto's.
    
    The D9tx, D6i and D4i have twice the amount of memory compared to the
    previous versions (64K versus 32K). To support both variants, a new
    layout descriptor is introduced.

--

    Store the version packet internally.

--

    Fix the depth decoding for the Mares Nemo Wide.
    
    The depth is reduced to a 11 bit value. The meaning of the now unused
    bit is still unknown.

--

    Add support for the Mares Icon HD Net Ready.

--

    Store the version packet internally.

--

    Exclude the 4 byte length from the sample data.
    
    Correctly skip the 4 byte length in front of the sample data. The
    previous code happened to work by accident, because the header after the
    sample data was assumed to be 4 bytes larger, and thus those two errors
    cancelled each other out.

--

    Initialize memory before use.

--

    Add support for the Oceanic Atom 3.0 and VT 4.0.

--

    Fix the tank pressure for the Tusa Zen Air.

--

    Update the parser to support the Suunto D4i, D6i and D9tx.

--

    Autodetect the baudrate for the Suunto D4i, D6i and D9tx.
    
    These new models use a faster baudrate. The correct baudrate is detected
    by probing with the version command. To speedup the detection, the model
    code can be supplied by the caller as a hint, which is then used to
    start the autodetection directly with the correct baudrate.
    
    To maintain backwards compatibility, the model hint is not enabled yet.

--

    Use the sample configuration data to parse the sample data.
    
    The sample configuration data describes which sample data is available
    and how it is stored. Using this data should be more reliable than using
    a hardcoded configuration.

--

    Use the same baudrate on Unix and Windows.
    
    With the support for custom baudrates on all systems, there is no need
    anymore to use the nearest standard baudrate. Using the exact baudrate
    should make the communication more reliable on Unix systems.

--

    Add support for non standard baudrates.

--

    Add support for the OSTC screenshot feature.

--

    Add support for some additinal OSTC features.

--

    Select the correct memory layout for the Mares Puck Air.

--

    Use symbolic constants for the model numbers.

--

    Fix the SetPoint change event.

--

    Add support for the new data format.

--

    Support firmware versions with 64K of profile data.

--

    Move duplicated code into a common file.

--

    Log a warning message for errors.

--

    Drop support for older firmware versions.
    
    Some of the older firmware versions contain a critical bug that can
    possibly crash the device when trying to download dives, and also a bug
    in the checksum calculation. To avoid these problems we simply refuse to
    download when an old firmware is detected and require the user to
    upgrade the firmware first.
    
    The detection is performed by means of a new version command which
    allows to retrieve the device information prior to downloading the
    dives, but is only supported by recent firmware versions.
    
    As a side effect, we gain access to the current firmware version, which
    may be different from the one recorded during the last dive. And we can
    get the info even if there are no dives present.

--

    Use symbolic constants for the model numbers.

--

    Fixed a mistake in the type detection code.

--

    Fix the datetime parsing for the Aeris Elite T3.

--

    Add support for the Aeris Atmos AI (metal buttons).

--

    Adjust the profile ringbuffer to exclude the last 512 bytes.
    
    For the devices in the list below, the last 512 bytes of the memory area
    are not part of the profile ringbuffer. The real purpose of these bytes
    is currently unknown.
    
    Oceanic Atom 2.0 (firmware 3I or greater)
    Oceanic Geo 2.0
    Oceanic OC1
    Oceanic ProPlus 2.1
    Oceanic Veo 2.0
    Oceanic Veo 3.0
    Sherwood Insight
    Sherwood Wisdom2
    Tusa Element II
    Tusa Zen
    Tusa Zen Air
    
    Some but not all of these devices also have an unreadable last page,
    making the autodetection code even more complex.

--

    Use symbolic constants for the model numbers.

--

    Fix the parsing of HelO2 dives lacking the additional 12 byte block.

--

    Fix the pressure decoding for the Aeris Compumask.

--

    Add progress and device info events.

--

    Allow building on systems that don't have pkg-config.

--

    Add an option to adjust the depth calibration constants.
    
    When the atmospheric pressure is set to zero (the default value), the
    atmosperic pressure stored in the header is used.

--

    Add an option to switch between real and simulated dives.

--

    Add a libusb based implementation.

--

    Add support for the Atomics Cobalt.

--

    Ignore samples with all 0xFF bytes.

--

    Fix the pressure decoding for the Aeris Epic.

--

    Add support for the Sherwood Insight.

--

    Improve the progress events by reading the data in smaller blocks.

--

    Do not return an error when no dives are present.

--

    Validate the ringbuffer pointers before using them.

--

    Ignore timeouts during initialization.
    
    Some Veo devices never respond to the initialization command, but have
    no problem to continue the communication. Therefore a timeout with no
    data received is ignored. If there happens to be a real problem, it will
    be catched when sending one of the other commands afterwards.

--

    Ignore samples below the depth threshold for calculating statistics.

--

    Use the new field api in the example application.

--

    Implement the new field api for the Seiko devices.

--

    Implement the new field api for the Mares devices.

--

    Implement the new field api for the Heinrichs Weikamp devices.

--

    Implement the new field api for the Oceanic devices.

--

    Implement the new field api for the Uwatec devices.

--

    Implement the new field api for the Suunto devices.

--

    Implement the new field api for the Reefnet devices.

--

    Add a new function to the public api to retrieve the dive metadata.

--

    Fix a buffer overflow.

--

    Choose the samplerate based on the model number.

--

    Add a devinfo event for the Cressi Edy.

--

    Convert assertions into error codes.

--

    Shorten the type detection code with bit manipulations.

--

    Add support for the Oceanic Atom 1.0.

--

    Always prefix the port name with "\\.\" before opening the port.
    
    The "\\.\" prefix allows to access the Win32 device namespace directly,
    without going through the file system. This is required to support
    non-standard port names, and COMx ports with a number greater than 9.

--

    Add a warning for uninitialized logbook entries.

--

    Silenty ignore ringbuffer overflow errors.

--

    Validate the logbook pointers immediately after downloading.
    
    The Aeris Elite T3 appears to update the global logbook pointer
    incorrectly when overwriting old dives. As a result there can be logbook
    entries pointing to profile data that has already been overwritten with
    newer dives, and those cause problems when calculating the total amount
    of bytes in the profile ringbuffer.
    
    As a workaround we validate the logbook pointers immediately after
    downloading. At this early stage we can check manually for ringbuffer
    overflows without having to rely on the values stored in the data.

--

    Send the version command at startup.

--

    Improve the detection of the last dive.

--

    Search for the end of te profile ringbuffer.
    
    Because some devices appear to store the end-of-profile pointer at
    different locations, we search all know positions for a valid value.

--

    Change the sample timestamps to the end of the interval.

--

    Fix the parsing of the temperature for the Aeris Epic.

--

    Return the error code instead of success.

--

    Fix the header size for the Oceanic Veo 3.

--

    Use symbolic constants for the model numbers.

--

    Poll the serial line to avoid the use of an infinite timeout.
    
    Because the user needs to initiate the transfer on the device itself, we
    have to wait for an unknown amount of time. The infinite timeout works,
    but causes problems if the data never arrives. By polling the serial
    line, an application can at least cancel the operation.

--

    Add fingerprint support for the Mares Icon HD.

--

    Add a parser for the Oceanic OC1.

--

    Improve the foreach function for the Mares Icon HD.
    
    With the knowledge of the end of profile pointer and the number of
    samples, the ringbuffer can be traversed backwards and the start of the
    ringbuffer doesn't have to be fixed anymore.

--

    Simplify the timeout calculation.

--

    Delay the resending of a command after an error.
    
    Especially the version commands seems to be sensitive to errors. Once
    the initialization phase is over, a delay is usually not necessary, but
    it should cause a noticable slowdown either because errors are supposed
    to be rare.

--

    Discard the additional bytes inside the init function.

--

    Eliminate some duplicated code.

--

    Fixed a typo in the autodetection of the Oceanic OC1.

--

    Check the ringbuffer pointers for invalid values.
    
    If a logbook entry contains an invalid ringbuffer pointer, the error is
    not returned immediately, but delayed until the end of the download.
    With this approach we can download at least the dives before the
    problematic logbook entry.

--

    Add support for the new surface samples.

--

    Adjust the header size for the Oceanic Veo 3.

--

    Reset the complete state at the correct place.

--

    Add a function to query the state of the serial lines.

--

    Use a more consistent typedef in the serial and irda backends.

--

    Add progress events for writing the user data segment.

--

    Improve the error recovery during the handshaking phase.
    
    The handshaking is now automatically restarted whenever a non-fatal
    error (such as a timeout or a protocol violation) is encountered.
    Previously, only corrupt handshake packets where handled.

--

    Add a devinfo event for the Mares Icon HD.

--

    Add support for the Tusa Zen Air.

--

    Add support for the Oceanic Veo 3.

--

    Mark the last memory page on an Geo 2 and Pro Plus 2.1 as unreadable.

--

    Add support for the Oceanic Geo 2 and Veo 2.

--

    Adjust the baudrate for Unix systems.
    
    The termios interface does not support setting a baudrate of 256000 bps,
    but using the nearest supported baudrate appears to work fine too.

--

    Add the foreach function for the Mares Icon HD.
    
    Note that this implementation will fail if the ringbuffer doesn't start
    at the fixed address 0xA000. This is very likely to occur once the
    ringbuffer is filled completely and the device starts to overwrite old
    data.

--

    Discard garbage bytes when opening the session.

--

    Use only 12 bits for the depth.
    
    The depth is stored with only 12 bits, which results in a maximum depth
    of 99.9 meters. The remaining 4 bits are yet unknown, but one of those
    bits appears to indicate a larger sample.

--

    Fixed a small mistake in the previous commit.

--

    Avoid reading outside the ringbuffer area.
    
    Since the total amount of profile data is not necessary a multiple of
    the maximum packet size, the code may attempt to read outside the
    ringbuffer area in some cases. Because the device supports a variable
    packet size, the problem can simply be avoided by adjusting the packet
    size.
    
    As a side effect of this fix, the code will now also detect when the
    profile ringbuffer is filling up faster than the logbook ringbuffer, and
    the progress events are improved as well.

--

    Implement the foreach and fingerprint support for the Zeagle N2iTiON3.

--

    Add support for the Zeagle N2iTiON3.

--

    Fix the year offset for some models.

--

    Mark the last memory page on an Aeris Epic as unreadable.

--

    Use the correct number of alarm bytes for each model.

--

    Copy missing sample values from the previous sample.
    
    The Uwatec Smart stores a sample value only when it's diffent from the
    previous value. While this compressed format does save some space on the
    device, it is less practical for use in an application. The original
    uncompressed data can easily be obtained by copying missing sample
    values from the previous sample.
    
    The implementation uses a two pass approach. In the first pass, all
    sample values that are explicitly stored in the profile date are
    collected. Any sample value that is not present, will automatically
    retain the value from the previous sample. In the second pass, all
    sample values are passed back to the application. The presence of an
    absolute value is used to decide which sample types are present in the
    data.

--

    Keep only a single type for both absolute and delta values.

--

    Increase the packet size if more data is immediately available.

--

    Mark the last memory page on a Sherwood Wisdom 2 as unreadable.

--

    Add support for the Mares Nemo Apneist.
    
    The total memory size is hardcoded again because the protocol does not
    allow to retrieve the correct memory layout in advance. As long as there
    is no device with a different amount of memory, that should be fine.

--

    Parse the tank pressure for the Mares Puck Air.

--

    Add support for the Mares Puck Air.

--

    Add a parser for the Mares Icon HD.

--

    Add support for the Mares Icon HD.

--

    Mark the last memory page on an Oceanic Atom 2 as unreadable.
    
    When trying to read the last memory page from an Oceanic Atom 2, the
    device does not respond. Strangely, other compatible devices are not
    affected by this problem.

--

    Fix the temperature and pressure for the Oceanic Atom 2.

--

    The Solution Nitrox/Vario stores nitrox data, not tank pressure.

--

    Fix the decoding of negative temperatures.

--

    Introduce surface samples for the pressure and temperature data.
    
    The Suunto Vyper, Spyder and Eon store a surface event after the last
    depth sample. Adding an artificial zero depth sample avoids the problem
    of having an incomplete sample without a depth measurement.
    
    Because these devices also store the tank pressure and/or the
    temperature at the begin/end of the dive, these measurements are
    associated with the new surface samples.

--

    Associate the events with the correct sample timestamp.

--

    Add support for the Uwatec Aladin Tec 2G.

--

    Migrate from Subversion to Git.

--

    Fix the 64bit integer type for the mingw compiler.
    
    The mingw native 64bit integer type is long long. The msvc __int64 type
    is supported for compatibility reasons, but requires including one of
    the standard C header files.

--

    Include the stddef.h header for the size_t type.

--

    Remove all debugging code.

--

    Prepare the libtool shared library versioning.

--

    Support automatic fingerprint management using a cache directory.

--

    Add a parser for the Cressi Edy.

--

    Implement some missing features for the Cressi Edy.
    
    The internal memory appears to contain two separate areas. One for the
    normal dives and one for the freedives. Currently, only the freedive
    section is processed.

--

    Move the subversion revision number to a private header.

--

    Add a more convenient method for compile/run-time version checks.

--

    Return the version info as a string.

--

    Add a function to retrieve the run-time version info.

--

    Fix the datetime parsing for the Oceanic OC1.

--

    Use an extra bit for the pointers in the logbook entries.
    
    Due to the larger memory capacity, the Oceanic OC1 needs an additional
    bit to be able to address memory pages above 64K.

--

    Autodetect the Oceanic OC1 layout at runtime.

--

    Use independent settings for the global and logbook pointer modes.

--

    Locate the header marker correctly in a longer sequence of zero bytes.
    
    If the first few bytes of the timestamp are equal to zero, they were
    incorrectly identified as part of the header marker. The correct header
    marker is located a the start of this zero byte sequence, not the end.

--

    Fix the temperature and pressure for the Oceanic Geo and Datamask.

--

    Add support for dives with a depth based sample interval.
    
    Because the sample data contains a timestamp with a limited resolution
    of only one minute, there can be consecutive samples with identical
    timestamps. To deal with this situation, samples with identical
    timestamps are distributed evenly inside the one minute interval. All
    resulting non-integer timestamps are rounded to the nearest second.
    
    For dives with a time based interval, the timestamps are now validated.

--

    Add a parser for the Heinrichs Weikamp OSTC.

--

    Implement some missing features for the Heinrichs Weikamp OSTC.

--

    Add the subversion revision number to the version info.

--

    Delay the resending of a command after an error.

--

    Limit the init response to 13 bytes.
    
    Not all devices appear to send the last zero byte, resulting in a
    timeout. If a device does send this zero byte, it is automatically
    flushed when sending the next command.

--

    Use the correct printf format for 64 bit integers.

--

    Use different layouts for the Mares Puck and Nemo Wide.

--

    Fix the freedive mode detection for the Mares Nemo Wide.

--

    Allow the first page to be empty.
    
    When the Sensus Ultra reaches the end of a memory page while recording
    data, the next page is erased to all 0xFF, and the current page cursor
    is advanced. With this memory usage scheme, the last page will be empty
    if the previous one was just filled.

--

    Recalculate the timeout using the correct variable.

--

    Improve the ACK/NAK error recovery to fix more errors.

--

    Fix the decoding of negative temperatures.

--

    Autodetect the correct layout at runtime.

--

    Fix the divisor for the compass headings.

--

    Fix the freedive mode detection.

--

    Add a version resource on Windows.

--

    Prepare for a more flexible versioning system.

--

    Modernize the autotools build system.

--

    Fix the init sequence for Geo 2 devices.
    
    The Geo 2 appears to respond with a single NAK byte instead of three.
    The issue is fixed by expecting only a single byte, and flushing the
    serial line to discard all other bytes (if there are any).

--

    Use the correct freedive mode for each model.

--

    Add support for the Mares Nemo Air data format.
    
    The Nemo Air contains an extra header which can be detected due to the
    presence of a three byte marker sequence. The sample size is larger too.

--

    Autodetect the Mares Nemo Air.

--

    Store the layout descriptor in the device handle.

--

    Use the common fingerprint function directly.

--

    Add some more HelO2 events.

--

    Fix the HelO2 fingerprint, datetime and sample interval offsets.

--

    Add a dummy backend for systems without IrDA support.

--

    Parse the dive data and output an xml file.

--

    Use the userdata parameter to pass the device data back to the caller.

--

    Use the userdata parameter to pass the dive data to the callback.

--

    Add cancellation support.
    
    To be able to cancel an operation, an application should register a
    callback function that returns a non-zero value whenever the active
    operaton should be cancelled. A backend can invoke this callback function
    to query the application for a pending cancellation request.

--

    Return the right type of error code.

--

    Add an option to provide fingerprint data.

--

    Pass the fingerprint data to the callback function.

--

    Add a workaround for the year 2010 problem.

--

    Use the year stored in the dive header.

--

    Add datetime support to the parsers.

--

    Add a clock synchronization event.

--

    Update the code to use the new datetime support.

--

    Add a datetime module.

--

    Rename the Suunto Spyder parser as the Eon parser.
    
    Both devices have an almost identical data format. Renaming the parser
    backend makes it more consistent with the corresponding device backend.

--

    Removed the handshake and version functions.
    
    The handshake function is now called internally (even if it doesn't seem
    to be required at all), and the version function can be called through
    the public api. The format of the version data is changed too.

--

    Use the common fingerprint function directly.

--

    Do not ignore the return value when writing data.

--

    Remove a number of unnecessary functions.

--

    Do not ignore errors during initialization.

--

    Use multipage reads for downloading dives too.

--

    Use multipage read commands for faster transfers.
    
    Multipage read commands can reduce the transfer time significantly,
    because the overhead of processing each single page read command is
    eliminated.

--

    Add a small delay before sending the version command.
    
    Trying to send the version command immediately after the initialization
    of the data cable doesn't work very well. Adding a small delay before
    sending the version commands turns out to be much more reliable.

--

    Store the layout descriptor in the device handle.

--

    Keep only a single PAGESIZE macro.

--

    Use the ACK/NAK error correction for all commands.

--

    Add a devinfo event for the Mares backends.

--

    Handle the special case of a full ringbuffer correctly.
    
    When using the ringbuffer pointers to traverse the linked list, a full
    ringbuffer appears as an empty one. This is probably a very rare
    condition, but a very annoying one if you run into it it. Using byte
    counts and the number of dives in the header avoids the problem.

--

    Make the empty/full ringbuffer interpretation configurable.
    
    In a ringbuffer implementation with only two begin/end pointers, it's
    impossible to distinguish between an empty and a full ringbuffer. The
    correct interpretation mode needs to be specified by the user.

--

    Add support for the Suunto HelO2.

--

    Reduce the number of hardcoded offsets.

--

    Add a parser for the Oceanic VT Pro.

--

    Add a parser for the Oceanic Veo 250.

--

    Fix the serial number for Veo compatible devices.

--

    Make the bcd2dec() function available to all backends.

--

    Fix the spyder fingerprint offset.

--

    Skip dives without a footer marker.
    
    Due to the internal memory buffering scheme of the Sensus Ultra, the
    last page might contain a partial dive. Skipping this dive is more
    apropriate than returning an error.

--

    Rewrite the incremental parser function.

--

    Add functions to search for markers in an array.

--

    Rewrite the code to use buffer objects internally.

--

    Fixed an off-by-one error.

--

    Added the initial implementation for the Cressi Edy.

--

    Use the memory buffer class for downloading individual dives.

--

    Use pointers to the layout structure for simplicity.

--

    Remove the debugging code.

--

    Reduce the amount of data copying.

--

    Add a function to slice the buffer.

--

    Initialize allocated memory to zero when resizing.

--

    Add options to download only the memory dump or the dives.

--

    Remove some unnecessary functions.

--

    Added the initial implementation for the Heinrichs Weikamp OSTC.

--

    Implement progress events for the device_dump() function.
    
    A helper function is added to simplify implementing the devic_dump()
    function on top of the device_read() function, and enable progress
    events automatically.

--

    Add a single download application for all backends.

--

    Changed the device_dump() function to use the new memory buffer class.
    
    Using a resizable memory buffer allows to allocate the right amount of
    memory inside the backend, avoiding having to know the required buffer
    size in advance.

--

    Update the msvc project file.

--

    Implement a more efficient buffer growing strategy.

--

    Avoid undefined behaviour with NULL pointers.
    
    We accept NULL pointers if the size is zero, but the C standard
    library functions memcpy and memmove requires valid pointers, even if
    the size is zero.

--

    Add a new memory buffer class.

--

    Write all messages to stderr.
    
    Messages written to stdout are undesirable when the output of an
    application needs to be passed through a pipe.

--

    Fixed some compiler warnings related to unused variables.

--

    Enable automake silent build rules by default.
    
    Support for silent build rules requires at least automake 1.11.
    Disable by either passing --disable-silent-rules to configure or
    passing V=1 to make.

--

    Fixed a small mistake.

--

    Remove the gap between the logbook and profile ringbuffers.

--

    Improve the empty ringbuffer detection.
    
    The logbook ringbuffer is now considered empty if any of the pointers is
    outside the valid ringbuffer area. Compared to checking only against a
    special empty value, this approach makes the code more robust against
    invalid pointers.

--

    Add a parser for the Oceanic Atom 2.

--

    Update the msvc project file.

--

    Add a common base class for the Mares backends.
    
    The memory layout of the Mares Puck and Nemo devices is very similar,
    which allows to share the parsing code between the backends.
    
    The Mares Puck protocol allows for a more efficient implementation, by
    reading only the data that we really need. But as an intermediate
    solution, reusing the Nemo code is good enough.

--

    Define the WARNING macro only once.

--

    Add a common base class.
    
    The transfer protocol of the Suunto Vyper 2 and D9 devices is very
    similar, which allows to share most of the transfer code between the
    backends.

--

    Changed the initialization sequence to allow multiple transfers.
    
    The DTR line is used to initialize or reset the communication. Toggling
    this line before each transfer, rather than doing it once at startup,
    allows to perform multiple transfers in the same session.

--

    Use the new array_isequal() function instead of a local function.

--

    Improve the detection of an empty logbook ringbuffer.
    
    Some devices do not appear to set the ringbuffer pointers to their
    normal empty values (e.g. pointing outside the ringbuffer memory). In
    that case, there appears to be a single entry. But since that entry
    contains uninitialized memory (e.g. all 0xFF bytes), we are able to
    detect this special situation.

--

    Fixed a bug in the write command.
    
    The packet size should include both the number of parameter bytes and
    the number of data bytes. The packet verification code is modified to be
    able to deal with this change too.

--

    Prefer the dump function in the examples.

--

    Calibrate the device during initialization.
    
    Although calibration is optional, it's highly recommended because it
    reduces the transfer time considerably. The calibrate function is
    removed from the public api.

--

    Automatically switch the device into download mode.

--

    Do not send the quit command during initialization.

--

    Use the symbolic constants for ACK/NAK bytes.

--

    Increase the total memory size to 64KB.

--

    Add the end-of-profile pointer to the layout descriptor structure.

--

    Add a common base class and a layout descriptor structure.
    
    The memory layout of the Suunto Eon and Vyper devices is very similar,
    which allows to share the parsing code between the backends. Differences
    in the layout are passed by means of a new layout descriptor structure
    and a common base class is introduced to share the fingerprint data.
    Memory buffers are now allocated dynamically to support devices with
    different amounts of memory.

--

    Add support for the Suunto Vyper Air and Cobra 3 to the parser.

--

    Add a common base class.
    
    Introducing a common base class allows to share more code between the
    backends. Sharing the fingerprint data eliminates the need to pass it
    with a function parameter.

--

    Enable the shared parsing code.

--

    Share the parsing code between the backends.
    
    The memory layout of all Oceanic devices is very similar, which allows
    to share the parsing code between the different backends. Differences in
    the layout are passed by means of a new layout descriptor structure.
    Memory buffers are now allocated dynamically to support devices with
    different amounts of memory.

--

    Implement the fingerprint function.

--

    Fix the symbols file for platforms without IRDA support (Mac OS X).
    
    When the IRDA backend is disabled or not supported by the underlying
    platform (such as on Mac OS X), the Uwatec Smart parser is disabled as
    well. The symbols file is updated to reflect this.

--

    Updated the msvc project file.

--

    Remove the handshake function from the public api.

--

    Add a function to retrieve the stored handshake packet.

--

    Store the handshake packet in the device handle.

--

    Wake-up the device automatically.
    
    The backend is now in full control of the handshake sequence and does
    automatically wake-up the device at the appropriate time.

--

    Use a single function for writing the device parameters.

--

    Add progress events.

--

    Add a device info event.

--

    Use a single buffer for all profiles.

--

    Read the profile ringbuffer backwards.

--

    Rewrite the code to use the stored fingerprint.
    
    Logbook entries are now downloaded one by one, until a previously
    downloaded entry is identified. This approach reduces the amount of data
    that needs to be transfered in the typical case, where only a few new
    dives are available on the device.

--

    Implement the fingerprint function.

--

    Merge the typedef with the struct declaration.

--

    Added the initial implementation for the Mares Puck.

--

    Resend the command after timeouts and protocol errors.

--

    Retry the discovery a few times when no devices are found.

--

    Store the clock calibration values in the device handle.

--

    Fix some small mistakes in the previous commit.

--

    Use the new byte order functions everywhere.

--

    Added byte order conversion functions (little and big endian).

--

    Use symbolic constants for the profile ringbuffer.

--

    Receive the entire packet before reporting buffer overflows.

--

    Always use the timestamp stored in the device handle.

--

    Add fingerprint support for the Mares Nemo.

--

    Add fingerprint support for the Suunto Vyper, Spyder and Eon.

--

    Add fingerprint support for the Suunto Vyper2 and D9.

--

    Add fingerprint support for the Reefnet Sensus Original, Pro and Ultra.

--

    Add fingerprint support for the Uwatec Aladin, Memomouse and Smart.

--

    Added basic support for the fingerprint feature.

--

    Autodetect the difference between a Vyper and a Spyder.

--

    Add a device info event for the Suunto Vyper.

--

    Add a device info event for the Suunto D9 and Vyper2.

--

    Add a device info event for the Suunto Eon and Solution.

--

    Add a device info event for the Reefnet Sensus Original, Pro and Ultra.

--

    Add a device info event for the Uwatec Smart.

--

    Add a device info event for the Uwatec Memomouse.

--

    Add a device info event for the Uwatec Aladin.

--

    Added basic support for the new device info event.

--

    Remove all legacy event code.

--

    Added event notifications for the Mares Nemo.

--

    Added event notifications for the Suunto Solution.

--

    Port the Suunto Eon, Vyper, Vyper2 and D9 to the new event code.

--

    Port the Reefnet Sensus Original, Pro and Ultra to the new event code.

--

    Port the Uwatec Aladin, Memomouse and Smart to the new event code.

--

    Added basic support for the new event notification code.

--

    Check the length of the provided buffer space before the data transfer.

--

    Use standard header files to define NULL.

--

    Automatically abort when a dive is older than the provided timestamp.

--

    Added a checksum function for the Oceanic VT Pro version string.

--

    Added a parser for the Reefnet Sensus Original.

--

    Added the foreach() function for the Reefnet Sensus Original.

--

    Updated the msvc project file.

--

    Automatically cancel the waiting state.

--

    Added the initial implementation for the Reefnet Sensus Original.

--

    Reduce the very large timeout value by polling the serial line.
    
    The event reporting is improved as well, by emitting more waiting
    events.

--

    Fixed some warnings related to missing initializers.

--

    Fixed some warnings related to shadow variables.

--

    Declare functions with no arguments as void.

--

    Check the correct variable for NULL.

--

    Updated the Oceanic header file.

--

    Updated the msvc project file. Patch by Eric Bourque.

--

    Added write support.

--

    Added a new function for the keepalive command.

--

    Take care of the init and quit command internally.

--

    Added a parser for the Suunto Solution.

--

    Added the foreach() function for the Suunto Solution.

--

    Added the initial implementation for the Suunto Solution.

--

    Handle partial dives near the end of the ringbuffer correctly.

--

    Added a parser for the Mares Nemo.

--

    Extract the freedive profile data too.

--

    Added the foreach function for the Mares Nemo.

--

    Added the initial implementation for the Mares Nemo.

--

    Forgot to add the calibrate function to the public header file.

--

    Forgot to update the list of public header files.

--

    Added a function to calibrate the interface.

--

    Added the initial implementation for the Oceanic VT Pro.

--

    Generate the module definition file automatically from the symbols file.

--

    Always use the ANSI variant of the Windows functions.
    
    The current api is not compatible with the wide character data type that
    is required for the unicode variant.

--

    Use the non-standard _snprintf() function for msvc.

--

    Added a project file for the MS Visual C++ 2008 compiler.

--

    Added some explicit casts to be able to build with a C++ compiler.

--

    Convert to unix style line endings.

--

    Renamed the handshake function to indicate it sends the quit command.

--

    Stop reading the response to the init command in the handshake function.

--

    Use a symbolic constant for the location of the pointers.

--

    Added the foreach() function for the Oceanic Veo 250.

--

    Use the address of the last read page in the keepalive command.

--

    Added a new function for the keepalive command.

--

    Discard garbage bytes before sending a command.

--

    Added the initial implementation for the Oceanic Veo 250.

--

    Merge the Uwatec Smart and Galileo parsers.

--

    Prepare to merge the Uwatec Smart and Galileo parsers.

--

    Port the changes from r179 to the Uwatec Smart parser.

--

    New method to detect the presence (or absence) of pressure samples.
    
    The previous method failed for some dives.

--

    Use separate variables for the signed and unsigned values.
    
    Because the number of bits in the datatype is not necessary a multiple
    of 8, the conversion can't be done with a simply cast.

--

    Set the initial rbt value to 99.
    
    Some models omit the absolute rbt value in the profile data.

--

    Added a parser for the Uwatec Galileo.

--

    Added support for compass bearings.

--

    Use only 1 byte for the alarms.

--

    Ignore data bits that are stored in the last type byte for some samples.

--

    Added a parser for the Uwatec Smart.

--

    Added a parser for the Suunto D9 and Vyper2.

--

    Added a parser for the Suunto Spyder.

--

    Added a parser for the Suunto Vyper.

--

    Added a parser for the Uwatec Memomouse.

--

    Added support for vendor specific sample types.

--

    Added a parser for the Reefnet Sensus Ultra.

--

    Added a parser for the Reefnet Sensus Pro.

--

    Added constants for doing unit conversions.

--

    Added a base class for the parsers.

--

    Add LGPL license headers.

--

    Only export functions that are part of the public api.

--

    Removed the interface detection code since it is no longer required.

--

    Mark the private function as static.

--

    Convert to unix style line endings.

--

    Always read at least 8 bytes, because reading fewer bytes is unreliable.

--

    Allow the library to be compiled as C++ code.
    
    Moved the initialization of the backend pointers to the beginning of the
    source file. Without the need for a tentative definition, the library
    can be compiled with a C++ compiler.

--

    Include the public header file.

--

    Add explicit casts to improve type safety.

--

    Improve the type safety by using the device_status_t enum.

--

    Fixed another misuse of the status codes.

--

    Stop abusing status codes to return size information to the application.
    
    When necessary, an output parameter is added to provide the size
    information. Status codes are strictly reserved for providing status
    information only.

--

    Implemented progress notifications for the Suunto Eon.

--

    Implemented progress notifications for the Uwatec Smart.

--

    Implemented progress notifications for the Uwatec Memomouse.

--

    Implemented progress notifications for the Uwatec Aladin.

--

    Implemented progress notifications for the Reefnet Sensus Ultra.

--

    Implemented progress notifications for the Reefnet Sensus Pro.

--

    Implemented progress notifications for the Suunto D9 and Vyper2.

--

    Implemented progress notifications for the Suunto Vyper.

--

    Added the initial support for progress notifications.

--

    Automatically abort when a dive is older than the provided timestamp.

--

    Moved the code to extract dives to a single function.

--

    Moved all array reversal functions to a common file.

--

    Moved all the checksum functions to a common file.

--

    Fixed a bug in the previous commit.
    
    The dump() function returns the size of the downloaded data, not a
    status code.

--

    Implement the device_foreach() function on top of device_dump().

--

    Implement the device_dump() function on top of device_read().

--

    Allow to abort a transfer by returning FALSE from the callback.

--

    Add a function to initialize the base class.

--

    Add autotools generated files to svn:ignore property.

--

    Rename the device_download() function to device_dump().
    
    The new name makes it more clear that it's not the recommended function
    to download data.

--

    Corrected the name of a function in the header file.

--

    Skip the entire header of the packet, not only the first byte.

--

    Wait a small amount of time before sending the command.
    
    Without this delay, the transfer will fail most of the time.

--

    Always return the size of the downloaded data.

--

    Port the Oceanic Atom 2 to the new api.

--

    Remove all remaining pieces of the legacy api from the Uwatec code.

--

    Port the Uwatec Smart to the new api.

--

    Port the Uwatec Memomouse to the new api.

--

    Port the Uwatec Aladin to the new api.

--

    Remove all remaining pieces of the legacy api from the Reefnet code.

--

    Port the Reefnet Sensus Ultra to the new api.

--

    Port the Reefnet Sensus Pro to the new api.

--

    Remove all remaining pieces of the legacy api from the Suunto code.

--

    Port the Suunto Eon to the new api.

--

    Port the Suunto Vyper2 to the new api.

--

    Port the Suunto D9 to the new api.

--

    Port the Suunto Vyper to the new api.

--

    Added the first steps towards the implementation of the new api.
    
    For this new api, each device will be implemented as a separate backend
    for a common interface. This will make it easier to support multiple
    devices in a single application.

--

    Added a constant for the size of the version data.

--

    Write timestamps to the logfile.

--

    Defined a few macros for the ringbuffer code.

--

    Added a more strict check on the ACK/NAK response.

--

    Split the transfer code in a handshake, version and read function.

--

    Treat the first byte of a packet as an ACK/NAK byte.
    
    The first byte of a packet seems to be an ACK/NAK byte, rather than a
    real packet header. The implementation of the transfer function is
    changed to match this observation.

--

    Moved the handshaking to a new function and added the quit sequence.

--

    Added a function to read individual dives from the Oceanic Atom 2.

--

    Fixed some compiler warnings.

--

    Fixed a small error where two variables had the same name.

--

    Moved all ringbuffer operations to a common location.

--

    Updated the Suunto Vyper2 code to match the D9 code.

--

    Always return an error code if the supplied memory buffer is too small.

--

    Use a temporary buffer to download the data.

--

    Simplified the exitcode macro.

--

    Added a 100ms delay before sending the handshake command.

--

    Removed the feature test macros.
    
    On Mac OS X they disable the definition of the timeval macros and on
    Linux they are defined by default. Thus removing them makes everything
    work on both platforms.

--

    Added the initial implementation for the Oceanic Atom 2.

--

    Added pkg-config support.

--

    Start using autotools to build the project.

--

    Reorganization to separate the library and the test applications.

--

    Made the discovery function static.

--

    Make the public API return the size of the downloaded data.
    
    And renamed a few variables to make the code more consistent with code
    elsewhere in the library.

--

    Added a public API function to set the oldest timestamp.

--

    Added a function to read individual dives from the Reefnet Sensus Ultra.

--

    Added a function to extract individual dives for the Suunto Vyper/Eon.

--

    Use a dynamically allocated memory buffer.
    
    Since the memory capacity of the device is unknown, a fixed size buffer
    could cause problems. The public API now returns the size of the
    downloaded data.

--

    Removed some unnecessary code.

--

    Simplified the error recovery by moving the code to a separate function.

--

    Added a public function to control the maximum number of retries.

--

    Separate reading and verification of the prompt byte.

--

    Moved the code to read pages and the error recovery into a new function.

--

    Return the dives in reverse order (newest dives first).

--

    Added a function to extract individual dives from the binary data.

--

    Added a function to extract individual dives from the binary data.

--

    Added the initial implementation for the Suunto Eon.

--

    Added an auxiliary function to reduce the amount of duplicated code.

--

    Fixed a small error.

--

    Added a function to extract individual dives from the binary data.

--

    Fixed a mistake in the transfer protocol.
    
    The device sends the size of the data stream before the actual data.

--

    Return only after all data has been read or written.
    
    And added a function to retrieve the number of bytes waiting in the
    receive buffer.

--

    Added the initial implementation for the Uwatec Smart.

--

    Added the initial support for infrared connections on Windows and Linux.

--

    Return the dives in reverse order (newest dives first).

--

    Added a function to extract individual dives from the binary data.
    
    Each dive is converted from the Aladin format into the Memomouse format.

--

    Added a function to extract individual dives from the binary data.

--

    Implemented the callback function to read individual dives.

--

    Reduce the number of read operations.
    
    Only the header of the package needs to be read separately (to obtain
    the size of the entire package). Removed the suunto_vyper_recv function.

--

    Added the initial implementation for the Reefnet Sensus Ultra.

--

    Added the initial implementation for the Reefnet Sensus Pro.

--

    Simplified the download code.
    
    With a memory buffer that is large enough to store all profile data,
    there is no need to use an intermediate package buffer.

--

    Move the function to read individual dives into the library.
    
    A callback function can be provided to process each downloaded dive.

--

    Show the commandline parameters in the logfile.

--

    Skip the last 2 bytes when reading the ringbuffer.
    
    It turns out that those 2 bytes do not contain valid profile data.

--

    Fixed another regression in the timeout code.
    
    The assignment needs extra parentheses, because it has lower precedence
    than the relational operator.

--

    Fixed a regression in the timeout code.
    
    The timestamp was not updated when calculating the remaining timeout.

--

    Added a function to assert or clear a break condition.

--

    Some more code simplifications.

--

    Cleanup and simplification of the posix timeout code.

--

    Automatically retry the command if the device does not respond.

--

    Removed the suunto_vyper2_recv and suunto_d9_recv functions.

--

    Read the entire package with a single operation.
    
    Since the package size is known in advance, there is no need to read
    each part (header, data and checksum) separately.

--

    Use the select() function instead of poll().
    
    The poll() function does not support (serial) devices on Mac OS X.

--

    Added the initial implementation for the Suunto D6 and D9.

--

    Set the fAbortOnError flag explicitly to FALSE.
    
    This change prevents some unexpected errors.

--

    Added support for the Mac OS X operating system.

--

    Added a function to change the delay between two commands.
    
    Some dive computers do not work well with the default delay. But
    increasing the default delay would make the transfer unnecessary longer
    for all others.

--

    Added the initial implementation for the Uwatec Memomouse.

--

    Do not return the checksum bytes to the user.

--

    Added the initial implementation for the Uwatec Aladin.

--

    Added code to transfer only the dive data from a Suunto Vyper2.
    
    The dives are transfered in reverse order (newest dives first).

--

    Added utility functions to duplicate all output to a logfile.

--

    Updated the comments on the timings of the original Suunto interface.

--

    Added a missing function to the header file.

--

    Added the initial implementation for the Suunto Vyper2.

--

    Use common error codes for all Suunto divecomputers.

--

    Prepare to add support for other Suunto dive computers.

--

    Return success when trying to close a NULL device.

--

    Changed the default timeout to 1000ms.

--

    Add extra debugging code when a null package is received.

--

    Improved some code comments.

--

    Do not detect the first package by means of the number of bytes.
    
    If the first package was a null package and the transfer was not
    aborted, it does not work properly.

--

    Do not flush the input and output buffers when configuring the device.

--

    Added a function to configure the size of the input and output buffers.

--

    Fixed include file.

--

    Renamed the dumpfile to avoid confusion with the dumpfile from SDM.

--

    Do not attempt to read data if it's not required.

--

    Read the package length and header with a single read operation.

--

    Removed some unnecessary functions.

--

    Reduced the amount of duplicated code.

--

    Use the SUUNTO_VYPER_PACKET_SIZE macro.

--

    Use the result codes in the test application.

--

    Return more useful result codes from all public api functions.

--

    Updated the code comments on the timing of the echo cancellation.
    
    I measured the echo is arrives after approximately 40ms.

--

    Setting the RTS line is not really necessary when opening the device.

--

    Use a macro for all warning messages.

--

    Change the echo cancellation to match with Suunto Dive Manager 1.6.
    
    Detection of the interface before reading or writing is not required
    anymore.

--

    Open the dump files in binary mode.

--

    Handle null packages correctly.
    
    Abort the transmission and discard the data if a null package is
    received at the end of the internal ring buffer.

--

    Handle timeouts while receiving the first package.
    
    Instead of ending the transmission, an error is reported.

--

    Added a test to dump the entire memory of the dive computer.

--

    Added the initial implementation for the Suunto Vyper.

--

    Added missing break statements in the serial_flush() functions.

--

    Implemented the win32 serial_drain function using FlushFileBuffers.

--

    Implemented the win32 serial_drain function using WaitCommEvent.

--

    Added a shorter implementation for the serial_set_status function.

--

    Attempt to read/write before waiting, instead of the other way around.

--

    Replace termios VMIN=0 and VTIME=0 with O_NONBLOCK.
    
    Enable O_NONBLOCK to be able to detect the difference between a timeout
    and a modem disconnect (EOF). With this change, it's also possible to
    implement write timeouts.

--

    Initial import.
